<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鑫宇的个人博客</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-05-23T14:05:50.849Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>rain</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>系统调用的实现</title>
    <link href="http://yoursite.com/2021/05/23/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2021/05/23/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-05-23T07:09:20.000Z</published>
    <updated>2021-05-23T14:05:50.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作系统的接口"><a href="#操作系统的接口" class="headerlink" title="操作系统的接口"></a>操作系统的接口</h2><p>接口即一些函数，操作系统为上层应用提供一种进入到内核中的手段</p><p>接口表现为函数调用又由系统提供，所以称为<strong>系统调用</strong></p><h3 id="操作系统向上连接的并不是用户而是应用程序"><a href="#操作系统向上连接的并不是用户而是应用程序" class="headerlink" title="操作系统向上连接的并不是用户而是应用程序"></a>操作系统向上连接的并不是用户而是应用程序</h3><p>接口是计算机系统中两个独立的部件进行信息交换的共享边界，应用程序与操作系统之间存在接口，操作系统和计算机硬件之间也存在接口。通过接口可以实现应用程序与操作系统之间的通信和操作系统与计算机硬件之间的通信。由此可见与操作系统相连接的并不是用户，而是应用程序。</p>  <a id="more"></a>  <h3 id="操作系统既然并不面向用户那么用户是如何使用操作系统的"><a href="#操作系统既然并不面向用户那么用户是如何使用操作系统的" class="headerlink" title="操作系统既然并不面向用户那么用户是如何使用操作系统的"></a>操作系统既然并不面向用户那么用户是如何使用操作系统的</h3><ul><li>命令行 (命令程序)</li><li>图形界面 （消息框架程序 + 消息处理程序）</li><li>应用程序</li></ul><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><p>以Linux操作系统为例，当我们使用命令行在去执行hello world程序的时候，C语言代码中的printf函数会在Linux操作系统中生成gcc -o output output.c文件，然后通过shell命令去执行output.c文件，此时该文件会调用操作系统里的write函数，将printf里的字符串写到cmd命令行界面上。这里的write函数就是操作系统接口也叫系统调用。</p><h4 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h4><p>我们以图形化界面中的一个按钮举例。当鼠标点击按钮以后，硬件输入首先会进入一个系统消息队列，然后进入应用消息队列，此时应用消息程序会从消息队列中获得硬件输入的指令，应用消息程序中有WinMain消息循环函数，WinMain函数中有一个GetMassage函数，GetMassage函数从操作系统中获取系统调用，硬件输入的系统调用是OnOK()。在OnOK()中有fopen() 函数，printf() 函数，fclose() 函数，主要功能是获取硬件输入指令相应的信息，然后打印该信息最后关闭该信息。打印的信息作为OnOK()函数的返回值返回到getMassage函数，最后消息循环函数在处理这一硬件输入的循环过程结束，硬件输入的执行结果进入到消息队列中，最后返回给用户。</p><h3 id="一些常见的操作系统接口"><a href="#一些常见的操作系统接口" class="headerlink" title="一些常见的操作系统接口"></a>一些常见的操作系统接口</h3><p><strong>POSIX</strong>: Portable Operating System Interface of UNIX (IEEE 制定的一个标准族)</p><table><thead><tr><th align="center">分类</th><th align="center">POSIX 定义</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"></td><td align="center">fork</td><td align="center">创建一个进程</td></tr><tr><td align="center"><strong>任务管理</strong></td><td align="center">execl</td><td align="center">运行一个可执行程序</td></tr><tr><td align="center"></td><td align="center">pthread_create</td><td align="center">创建一个线程</td></tr><tr><td align="center"></td><td align="center">open</td><td align="center">打开一个文件或目录</td></tr><tr><td align="center"><strong>文件系统</strong></td><td align="center">EACCES</td><td align="center">返回值：表示没有权限</td></tr><tr><td align="center"></td><td align="center">mode_tst_mode</td><td align="center">文件头结构：文件属性</td></tr></tbody></table><h2 id="系统调用的实现"><a href="#系统调用的实现" class="headerlink" title="系统调用的实现"></a>系统调用的实现</h2><p>实现一个 <strong>whoami</strong>  系统调用，一个放在操作系统内核中的字符串 ”I am cxy“ (系统引导时被载入的)被取出来并打印。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设为用户程序</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">whoami();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//假设为内核代码</span></span><br><span class="line">whoami()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="number">100</span>,<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">100</span>: <span class="string">"I am cxy"</span></span><br></pre></td></tr></table></figure><p><strong>要求</strong></p><ul><li>不能jump，不应该jump  唉</li><li>凭什么不让我jump 害</li><li>不jump该怎么实现 呢</li></ul><h3 id="为什么不可以jump"><a href="#为什么不可以jump" class="headerlink" title="为什么不可以jump"></a>为什么不可以jump</h3><p>操作系统在内存中，应用程序也在内存中，想访问操作系统提供的功能为什么不直接跳进去？直接 mov 不行嘛？</p><p>NO NO NO !!!</p><p>直接mov jump 就成为了简单的函数调用。操作系统中存储着重要的信息，如root 的用户名和密码，如果可以轻松进入随便访问，那么root的用户名和密码就很可能被应用程序给<strong>捞</strong>上来，太不安全。所以绝对不可以jump，mov 进入操作系统内部。</p><h3 id="为什么jump不进去"><a href="#为什么jump不进去" class="headerlink" title="为什么jump不进去"></a>为什么jump不进去</h3><p>将内核程序与用户程序隔离-&gt; 区分为 <strong>内核态 和用户态</strong> (一种处理器的硬件设计)</p><p>计算机对内存的使用是一段一段的，内核态可以访问任何数据，用户态不可以 访问内核态数据 -&gt; 由段寄存器实现</p><p>两个特殊的段寄存器</p><p>CPL ：目标内存段的特权级</p><p>DPL ：当前内存段的特权级</p><img src="/2021/05/23/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/1.png" alt="1" style="zoom:80%;">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;操作系统的接口&quot;&gt;&lt;a href=&quot;#操作系统的接口&quot; class=&quot;headerlink&quot; title=&quot;操作系统的接口&quot;&gt;&lt;/a&gt;操作系统的接口&lt;/h2&gt;&lt;p&gt;接口即一些函数，操作系统为上层应用提供一种进入到内核中的手段&lt;/p&gt;
&lt;p&gt;接口表现为函数调用又由系统提供，所以称为&lt;strong&gt;系统调用&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;操作系统向上连接的并不是用户而是应用程序&quot;&gt;&lt;a href=&quot;#操作系统向上连接的并不是用户而是应用程序&quot; class=&quot;headerlink&quot; title=&quot;操作系统向上连接的并不是用户而是应用程序&quot;&gt;&lt;/a&gt;操作系统向上连接的并不是用户而是应用程序&lt;/h3&gt;&lt;p&gt;接口是计算机系统中两个独立的部件进行信息交换的共享边界，应用程序与操作系统之间存在接口，操作系统和计算机硬件之间也存在接口。通过接口可以实现应用程序与操作系统之间的通信和操作系统与计算机硬件之间的通信。由此可见与操作系统相连接的并不是用户，而是应用程序。&lt;/p&gt;</summary>
    
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统的启动</title>
    <link href="http://yoursite.com/2021/05/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%90%AF%E5%8A%A8/"/>
    <id>http://yoursite.com/2021/05/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%90%AF%E5%8A%A8/</id>
    <published>2021-05-20T11:19:30.000Z</published>
    <updated>2021-05-23T06:55:34.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="打开电源那神秘的黑色背后发生着什么"><a href="#打开电源那神秘的黑色背后发生着什么" class="headerlink" title="打开电源那神秘的黑色背后发生着什么"></a>打开电源那神秘的黑色背后发生着什么</h2><ol><li>x86 PC刚开机时CPU处于实模式 （实模式即16bit，保护模式即32bit）</li><li>开始时，CS = 0xFFFF；IP = 0x0000；（CS-&gt; 段寄存器；IP-&gt;段内偏移; <strong>CS &lt;&lt; 4 + IP = 物理地址</strong>）</li><li>寻址 0xFFFF0(ROM BIOS 映射区)  （BIOS -&gt; Basic Input Output System；固化到内存地址为 0xFFFF0 处的一段代码）</li><li>检查RAM，键盘，显示器，软硬磁盘</li><li>将磁盘0磁道0扇区读入 0x7c00处 （0磁道0扇区为操作系统的引导扇区共 512byte）</li><li>设置CS = 0x07c0; IP = 0x0000;</li><li>寻址 0x7c00 开始执行操作系统引导扇区的代码</li></ol><a id="more"></a>  <p><strong>注解</strong></p><p>intel x86 PC机开机接通电源后，在内存0xFFFF0处固化了一段程序即 ROM BIOS ，由于计算机的工作原理是取指执行，如果内存中一片空白则无法进行取指执行，所以该段程序是由硬件已经做好的。刚一上电硬件自动设置 CS = 0xFFFF；IP = 0x0000；由于[CS &lt;&lt;4 + IP = 0xFFFF0] ，所以刚一上电就跳到了 BIOS区进行执行。执行该段固化好的代码-&gt; 1.检查RAM，键盘，显示器，软硬磁盘，2.将磁盘0磁道0扇区的代码读入到 0x7c00处 。然后更新 CS = 0x07c0; IP = 0x0000; 继续取指执行，寻址 0x7c00 开始执行操作系统引导扇区的代码。因此硬盘的第一个扇区上存放着开机后执行的第一段我们可以控制的程序。<strong>操作系统的故事从这里开始……</strong></p><h2 id="引导扇区代码-bootsect-s"><a href="#引导扇区代码-bootsect-s" class="headerlink" title="引导扇区代码 bootsect.s"></a>引导扇区代码 bootsect.s</h2><p><strong>为什么引导扇区的代码使用汇编</strong></p><p>在操作系统引导的过程中我们要保证有绝对的控制，使用汇编可以精准的变成机器指令去执行，而使用C语言则首先需要编译，在编译的过程中很可能会发生差错，没办法进行绝对的控制，就很可能发生死机的情况。</p><p><strong>bootsect核心代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">BOOTSEG = <span class="number">0x07c0</span></span><br><span class="line">INITSEG = <span class="number">0x9000</span></span><br><span class="line">SETUPSEG = <span class="number">0x9020</span></span><br><span class="line"></span><br><span class="line">entry start <span class="comment">//关键字entry告诉链接器“程序入口”</span></span><br><span class="line">start:</span><br><span class="line">    mov ax, #BOOTSEG mov ds, ax</span><br><span class="line">    mov ax, #INITSEG mov es, ax</span><br><span class="line">    mov cx, #<span class="number">256</span></span><br><span class="line">    sub si, si sub di,di</span><br><span class="line">    rep movw</span><br><span class="line">    jmpi go, INITSEG</span><br><span class="line"></span><br><span class="line">go: mov ax,cs <span class="comment">//cs=0x9000</span></span><br><span class="line">    mov ds,ax mov es,ax mov ss,ax mov sp,#<span class="number">0xff00</span></span><br><span class="line">load_setup: <span class="comment">//载入setup模块</span></span><br><span class="line">    mov dx,#<span class="number">0x0000</span> mov cx,#<span class="number">0x0002</span> mov bx,#<span class="number">0x0200</span></span><br><span class="line">    mov ax,#<span class="number">0x0200</span>+SETUPLEN <span class="keyword">int</span> <span class="number">0x13</span> <span class="comment">//BIOS中断</span></span><br><span class="line">    jnc ok_load_setup</span><br><span class="line">    mov dx,#<span class="number">0x0000</span></span><br><span class="line">    mov ax,#<span class="number">0x0000</span> <span class="comment">//复位</span></span><br><span class="line">    <span class="keyword">int</span> <span class="number">0x13</span></span><br><span class="line">    j load_setup <span class="comment">//重读</span></span><br></pre></td></tr></table></figure><ul><li>将磁盘上从第 2 到 5 的四个扇区构成的 setup 模块读入到了内存的0x90200 处；</li><li>然后打出一个 Logo；</li></ul><img src="/2021/05/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%90%AF%E5%8A%A8/1.png" alt="1" style="zoom:80%;"><p><strong>注解</strong></p><p>对于x86PC来说，bootsect  刚读进来是放在0x07c00这个位置，然后将其转移到0x90000这个位置，并继续执行；利用int 0x13中断，将操作系统的setup读入到0x90200开始的内存处；读入setup之后，bootsect 继续执行，在屏幕上显示开机logo “loading system…”，然后进入 read_it 继续读操作系统模块，并将控制权转移到setup中，执行setup中的内容。</p><h2 id="setup-s"><a href="#setup-s" class="headerlink" title="setup.s"></a>setup.s</h2><p><strong>setup-&gt;OS启动前的配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SYSSEG = <span class="number">0x1000</span></span><br><span class="line"></span><br><span class="line">start: mov ax,          #INITSEG mov ds,ax mov ah,#<span class="number">0x03</span></span><br><span class="line">    <span class="keyword">xor</span> bh,bh <span class="keyword">int</span> <span class="number">0x10</span>  <span class="comment">//取光标位置dx mov [0],dx</span></span><br><span class="line">    mov ah,#<span class="number">0x88</span> <span class="keyword">int</span> <span class="number">0x15</span> mov [<span class="number">2</span>],ax ...</span><br><span class="line">    cli                 <span class="comment">//不允许中断</span></span><br><span class="line">    mov ax,             #<span class="number">0x0000</span> cld</span><br><span class="line">do_move: mov es,ax add ax,#<span class="number">0x1000</span></span><br><span class="line">    cmp ax,             #<span class="number">0x9000</span> jz end_move</span><br><span class="line">    mov ds,ax sub di,di</span><br><span class="line">    sub si,si</span><br><span class="line">    mov cx,             #<span class="number">0x8000</span></span><br><span class="line">    rep                 # 将system模块移到<span class="number">0</span>地址</span><br><span class="line">    movsw</span><br><span class="line">    jmp do_move</span><br></pre></td></tr></table></figure><ul><li>准备初始化参数 （将硬件参数存放到0x90000处）</li><li>将<strong>system操作系统主体模块</strong>移动到0地址处</li><li>临时建立GDT IDT表，<strong>jump 0，8</strong> 进入到保护模式下</li></ul><img src="/2021/05/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%90%AF%E5%8A%A8/2.png" alt="2" style="zoom: 80%;"><p><strong>注解</strong></p><p>操作系统是管理各种硬件的，要管理各种硬件就必须首先知道各种硬件参数。管理内存就要知道内存有多少，同时知道都被谁给占着，这就需要数据结构来存储这些信息。所以setup会获取各种硬件的信息并建立相应的数据结构来管理这些硬件。</p><p>CS是16bit寄存器，IP也是16bit的寄存器。CS&lt;&lt;4 + IP 最多只能形成一个 20 位地址放到地址总线上，所以最多只能寻址 <strong>1M</strong> 以内的内存。这对于现在的计算机是远远不够的。所以需要从实模式进入到保护模式下（1M -&gt; 4G）</p><p>16bit 模式和 32bit 模式的本质区别是 <strong>CPU的解释程序不同</strong></p><p>保护模式下的寻址方式不再是 CS&lt;&lt;4 + IP，而是根据<strong>CS(选择子) 查表 + IP</strong></p><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><p>执行完bootsect与setup模块之后，接着跳到system操作系统的主体模块进行执行。</p><h3 id="head-s"><a href="#head-s" class="headerlink" title="head.s"></a>head.s</h3><p>head.s是system模块开始的第一个文件，存放在0地址处</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stratup_32: movl $<span class="number">0x10</span>,%eax mov %ax,%ds mov %ax,%es</span><br><span class="line">    mov %as,%fs mov %as,%gs <span class="comment">//指向gdt的0x10项(数据段)</span></span><br><span class="line">    lss _stack_start,%esp <span class="comment">//设置栈(系统栈)</span></span><br><span class="line">    call setup_idt</span><br><span class="line">    call setup_gdt</span><br><span class="line">    xorl %eax,%eax</span><br><span class="line"><span class="number">1</span>:incl %eax</span><br><span class="line">    movl %eax,<span class="number">0x000000</span> cmpl %eax,<span class="number">0x100000</span></span><br><span class="line">    je <span class="number">1b</span> <span class="comment">//0地址处和1M地址处相同(A20没开启)，就死循环</span></span><br><span class="line">    jmp after_page_tables <span class="comment">//页表，什么东东?</span></span><br><span class="line">setup_idt: lea ignore_int,%edx</span><br><span class="line">    movl $<span class="number">0x00080000</span>,%eax movw %dx,%ax</span><br><span class="line">    lea _idt,%edi movl %eax,(%edi)</span><br></pre></td></tr></table></figure><ul><li>setup.s是进入保护模式，head.s是进入保护模式之后的初始化。</li><li>重新设置 GDT, IDT 表，重新开启A20地址线 （setup里设置的gdt与idt 是临时的，开启A20地址线后寻址范围就从1M变成了4G）</li><li>IDT表是中断函数表，从此int n 不再是DOS中断，而是在IDT表中找到中断函数的地址并执行。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">after_page_tables:</span><br><span class="line">    pushl $<span class="number">0</span> pushl $<span class="number">0</span> pushl $<span class="number">0</span> pushl $L6</span><br><span class="line">    pushl $_main jmp setup_paging</span><br><span class="line">L6: jmp L6</span><br><span class="line">setup_paging: 设置页表 ret</span><br></pre></td></tr></table></figure><ul><li>在前面开启20号地址线之后就jmp到after_page_tables这个标号处</li><li>在after_page_tables里面将main函数三个参数、L6、main函数的入口地址都压入栈中</li><li>在set_paging 执行完毕后，将ret到main() 函数执行</li></ul><p><strong>注解</strong></p><p>IDT,GDT 的查表都是硬件查表，都是硬件设计好的，目的就是为了速度快</p><p>head.s中使用的汇编和bootsect 及 setup的汇编不一样，head.s中使用的是32位的汇编代码，而bootsect及setup中使用的是16位的汇编代码。另外在操作系统的.c文件中还使用一种汇编为”内嵌汇编”。</p><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><p><strong>main函数完成了各种硬件数据结构的初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mem_init();</span><br><span class="line">    trap_init();</span><br><span class="line">    blk_dev_init();</span><br><span class="line">    chr_dev_init();</span><br><span class="line">    tty_init();</span><br><span class="line">    time_init();</span><br><span class="line">    sched_init();</span><br><span class="line">    buffer_init();</span><br><span class="line">    hd_init();</span><br><span class="line">    floppy_init();</span><br><span class="line">    sti();</span><br><span class="line">    move_to_user_mode();</span><br><span class="line">    <span class="keyword">if</span>(!fork())&#123;init();&#125;   <span class="comment">// 这行永远不会退出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>bootsect将操作系统从磁盘中读入进内存，setup获取一些硬件参数并进入到保护模式，head初始化一些gdt表，并初始化一些页表，之后跳到main函数，main中有一大堆init，完成对各种硬件数据结构的初始化。</p><p><strong>总体可以概括为两步</strong></p><ol><li>将操作系统读入到内存</li><li>初始化</li></ol><p><strong>注解</strong></p><p>只有先将操作系统读入进内存后计算机才能进行取指执行</p><p>初始化是因为操作系统是管理计算机硬件的软件，要想管理硬件就先要对每一种硬件做出相应的数据结构。setup，head，main, mem-init 这些搭在一起就是为了 得到硬件参数，初始化关键的数据结构，为将来管理操作系统做准备。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;打开电源那神秘的黑色背后发生着什么&quot;&gt;&lt;a href=&quot;#打开电源那神秘的黑色背后发生着什么&quot; class=&quot;headerlink&quot; title=&quot;打开电源那神秘的黑色背后发生着什么&quot;&gt;&lt;/a&gt;打开电源那神秘的黑色背后发生着什么&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;x86 PC刚开机时CPU处于实模式 （实模式即16bit，保护模式即32bit）&lt;/li&gt;
&lt;li&gt;开始时，CS = 0xFFFF；IP = 0x0000；（CS-&amp;gt; 段寄存器；IP-&amp;gt;段内偏移; &lt;strong&gt;CS &amp;lt;&amp;lt; 4 + IP = 物理地址&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;寻址 0xFFFF0(ROM BIOS 映射区)  （BIOS -&amp;gt; Basic Input Output System；固化到内存地址为 0xFFFF0 处的一段代码）&lt;/li&gt;
&lt;li&gt;检查RAM，键盘，显示器，软硬磁盘&lt;/li&gt;
&lt;li&gt;将磁盘0磁道0扇区读入 0x7c00处 （0磁道0扇区为操作系统的引导扇区共 512byte）&lt;/li&gt;
&lt;li&gt;设置CS = 0x07c0; IP = 0x0000;&lt;/li&gt;
&lt;li&gt;寻址 0x7c00 开始执行操作系统引导扇区的代码&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统概述</title>
    <link href="http://yoursite.com/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</id>
    <published>2021-05-16T08:44:16.000Z</published>
    <updated>2021-05-19T03:36:43.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机是如何工作的"><a href="#计算机是如何工作的" class="headerlink" title="计算机是如何工作的"></a>计算机是如何工作的</h2><h3 id="从白纸到图灵机"><a href="#从白纸到图灵机" class="headerlink" title="从白纸到图灵机"></a><strong>从白纸到图灵机</strong></h3><p>计算机是如何工作的说到底就是一个<strong>计算模型</strong></p><p>1936年，英国数学家A.C.图灵提出了一种模型，通过纸带模拟人使用笔在纸上进行计算。即在纸带上读入3，在纸带上读入2，在纸带上读入 +，控制器查表知道是5，接着在纸带上写下5；<strong>此时图灵机只能进行加法运算</strong>。</p><p><img src="/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/7.jpg" alt="7"></p><a id="more"></a>  <h3 id="从图灵机到通用图灵机"><a href="#从图灵机到通用图灵机" class="headerlink" title="从图灵机到通用图灵机"></a><strong>从图灵机到通用图灵机</strong></h3><p>只能进行加法运算的计算模型显然是不够的，接着人们将控制器进行更改，当遇到加法操作时就改为加法控制器，当遇到乘法操作时就将控制器更改为乘法控制器。此时的通用图灵机就可以根据不同的运算方式来进行不同的计算控制，实现了通用的计算模型。</p><img src="/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/6.jpg" alt="6" style="zoom: 80%;"><h3 id="从通用图灵机到计算机"><a href="#从通用图灵机到计算机" class="headerlink" title="从通用图灵机到计算机"></a><strong>从通用图灵机到计算机</strong></h3><p><strong>冯·诺依曼</strong>首次提出<strong>存储程序</strong>的思想。</p><p>一种将程序指令存储器和数据存储器合并在一起的电脑设计概念结构</p><p>计算机由五大部分组成：<strong>运算器、控制器、存储器、输入设备、输出设备</strong>。</p><p>存储程序计算机在体系结构上主要特点有：1.以运算单元为中心；2.采用存储程序原理；3.存储器是按地址访问、线性编址的空间；3.控制流由指令流产生；4.指令由操作码和地址码组成；6.数据以二进制编码；</p><p>计算机在程序的控制下一步一步的从存储器中取出指令并进行处理，从此计算机工作的原理变成了<strong>取指执行</strong></p><img src="/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/55.png" alt="55" style="zoom:50%;"><h2 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h2><h3 id="维基百科的解释"><a href="#维基百科的解释" class="headerlink" title="维基百科的解释"></a><strong>维基百科的解释</strong></h3><p>操作系统（英语：<strong>O</strong>perating <strong>S</strong>ystem，缩写：<strong>OS</strong>）是一组主管并控制计算机操作、运用和运行硬件、软件资源和提供公共服务来组织用户交互的相互关联的系统软件程序，同时也是计算机系统的内核与基石。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入与输出设备、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互的操作界面。</p><h3 id="简而言之"><a href="#简而言之" class="headerlink" title="简而言之"></a><strong>简而言之</strong></h3><p>键盘能输入，鼠标能点，显示器能看。人们可以在其上面进行听音乐、看小电影、浏览网站等一系列<strong>人机交互</strong>动作的啥东西。</p><h3 id="将操作系统立起来"><a href="#将操作系统立起来" class="headerlink" title="将操作系统立起来"></a><strong>将操作系统立起来</strong></h3><p>操作系统是工作在应用程序与计算机硬件之间的一层软件。向上给应用程序提供接口，向下管理各种硬件。</p><img src="/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/1.jpg" alt="1" style="zoom: 50%;"><h3 id="操作系统都管理那些硬件"><a href="#操作系统都管理那些硬件" class="headerlink" title="操作系统都管理那些硬件"></a><strong>操作系统都管理那些硬件</strong></h3><p>CPU管理    内存管理    终端管理    磁盘管理    文件管理    <em>网络管理    电源管理    多核管理</em></p><img src="/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/8.jpg" alt="8" style="zoom:80%;"><h2 id="操作系统的历史"><a href="#操作系统的历史" class="headerlink" title="操作系统的历史"></a>操作系统的历史</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计算机是如何工作的&quot;&gt;&lt;a href=&quot;#计算机是如何工作的&quot; class=&quot;headerlink&quot; title=&quot;计算机是如何工作的&quot;&gt;&lt;/a&gt;计算机是如何工作的&lt;/h2&gt;&lt;h3 id=&quot;从白纸到图灵机&quot;&gt;&lt;a href=&quot;#从白纸到图灵机&quot; class=&quot;headerlink&quot; title=&quot;从白纸到图灵机&quot;&gt;&lt;/a&gt;&lt;strong&gt;从白纸到图灵机&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;计算机是如何工作的说到底就是一个&lt;strong&gt;计算模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1936年，英国数学家A.C.图灵提出了一种模型，通过纸带模拟人使用笔在纸上进行计算。即在纸带上读入3，在纸带上读入2，在纸带上读入 +，控制器查表知道是5，接着在纸带上写下5；&lt;strong&gt;此时图灵机只能进行加法运算&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/7.jpg&quot; alt=&quot;7&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>java 基础类</title>
    <link href="http://yoursite.com/2020/09/17/java%E5%9F%BA%E7%A1%80%E5%BA%93%E7%B1%BB/"/>
    <id>http://yoursite.com/2020/09/17/java%E5%9F%BA%E7%A1%80%E5%BA%93%E7%B1%BB/</id>
    <published>2020-09-17T13:15:21.168Z</published>
    <updated>2021-05-23T07:10:35.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Main类"><a href="#Main类" class="headerlink" title="Main类"></a>Main类</h2><blockquote><p> JVM运行Java应用程序的时候，首先会调用main方法<br>  调用时不实例化这个类的对象,而是通过类名直接调用<br>  因此需要是限制为public static<br> main()方法定义：“public static void main(String[]  字符串数组参数名)”  </p></blockquote><h2 id="jvm有限制，不能有返回值，因此返回值类型为void"><a href="#jvm有限制，不能有返回值，因此返回值类型为void" class="headerlink" title="jvm有限制，不能有返回值，因此返回值类型为void"></a>jvm有限制，不能有返回值，因此返回值类型为void</h2>  <a id="more"></a>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span>  </span>&#123;</span><br><span class="line"><span class="comment">//主方法入口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//输出args数组的长度</span></span><br><span class="line">    System.out.println(args.length);</span><br><span class="line">    System.out.println(<span class="string">"打印main方法中的输出参数"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">    System.out.println(args[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><blockquote><p>  Object类在java.lang包中<br>   所有Java类都直接或间接扩展Object类<br>   所有Java类都是Object类的子类Object类是所有类的超类<br>   Object类本身没有超类<br>   Object类的引用变量可以保存任何类的对象的引用</p></blockquote><h3 id="Object类方法"><a href="#Object类方法" class="headerlink" title="Object类方法"></a>Object类方法</h3><ul><li><p>public String toString()<br>我们可以自定义它， 它返回对象的字符串表示形式 通常它用于调试目的<br> 如果类中未重写该方法，则输出：”类名@十六进制的hashcode值”，若重写，则输出表述该对象信息的字符串</p></li><li><p>System.out.println(xx)<br>括号里面的“xx”对象如果不是String类型的话，就自动调用xx的toString()方法</p></li><li><p>public boolean equals(Object obj) </p><p>它用于比较两个对象的相等性</p></li><li><p>public int hashCode()<br>它返回对象的哈希码（整数）值, 根据一定的规则将与对象相关的信息（比如对象的存储地址，对象的字段等）映射成一个数值，这个数值称作为散列值</p></li><li><p>protected void finalize() throws Throwable </p><p>它不是在Object类中实现 它在对象被销毁之前被垃圾收集器调用。</p></li><li><p>public final Class getClass()<br>  它返回对象的Class对象的引用即可以返回对象的父类等相关信息</p></li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String strObj = <span class="keyword">new</span> String();</span><br><span class="line">        ObjectTest obj = <span class="keyword">new</span> ObjectTest();</span><br><span class="line"></span><br><span class="line">        printClassInfo(strObj);</span><br><span class="line">        printClassInfo(obj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String str1 =<span class="keyword">new</span> String(<span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">//调用hasCode方法输出对象的哈希值</span></span><br><span class="line">        System.out.println(<span class="string">"str字符串的哈希值为："</span>+str1.hashCode());</span><br><span class="line">        equalsTest(str1);</span><br><span class="line">        <span class="comment">//调用toString方法返回str对象的字符串形式</span></span><br><span class="line">        System.out.println(<span class="string">"返回str对象的字符串形式："</span>+str1.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个printClassInfo()方法来描述getClass()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printClassInfo</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取类名</span></span><br><span class="line">        System.out.println(<span class="string">"类名："</span> + obj.getClass().getName());</span><br><span class="line">        <span class="comment">//获取父类名</span></span><br><span class="line">        System.out.println(<span class="string">"父类："</span>+obj.getClass().getSuperclass().getName());</span><br><span class="line">        <span class="comment">//获取接口信息并输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; obj.getClass().getInterfaces().length; i++) &#123;</span><br><span class="line">            System.out.println(obj.getClass().getInterfaces()[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个equalsTest方法来描述equals()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equalsTest</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        String passworld = <span class="string">"123456"</span>;</span><br><span class="line">        <span class="keyword">boolean</span> con;</span><br><span class="line">        <span class="keyword">if</span> (str.equals(passworld)) con = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            con=<span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(con);</span><br><span class="line">        <span class="keyword">return</span>  con;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String-StringBuffer-StringBuilder类"><a href="#String-StringBuffer-StringBuilder类" class="headerlink" title="String StringBuffer StringBuilder类"></a>String StringBuffer StringBuilder类</h2><blockquote><p>String 类一旦创建将不会改变<br>与String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象<br>tringBuffer用法和StringBuilder一样，不过，StringBuffer是线程安全的<br> StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder类</p></blockquote><h3 id="String类方法"><a href="#String类方法" class="headerlink" title="String类方法"></a>String类方法</h3><ul><li>char charAt(int index)<br>取字符串中的某一个字符，其中的参数index指的是字符串中序数。<br>   字符串的序数从0开始到length()-1    </li><li>int compareTo(String anotherString)<br>当前String对象与anotherString比较<br>  相等关系返回０；不相等时，从两个字符串第0个字符开始比较，返回第一个不相等的字符差<br>   另一种情况，较长字符串的前面部分恰巧是较短的字符串，返回它们的长度差  </li></ul><hr>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符串</span></span><br><span class="line">        String greeting =<span class="string">"hello world"</span>;</span><br><span class="line">        System.out.println(greeting);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//string和StringBuffer类的相互转换</span></span><br><span class="line">        <span class="comment">//注意：可以=解决scanner类输入字符串进行修改的问题</span></span><br><span class="line">        String aa =<span class="keyword">new</span> String(<span class="string">"123456"</span>);</span><br><span class="line">        StringBuilder bb = <span class="keyword">new</span>  StringBuilder(aa);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化字符转</span></span><br><span class="line">        <span class="keyword">char</span> [] helloArray = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">        String arrayTest = <span class="keyword">new</span> String(helloArray);</span><br><span class="line">        System.out.println(arrayTest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出字符串的长度</span></span><br><span class="line">        System.out.println(arrayTest.length());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取字符串中的特定字符</span></span><br><span class="line">        System.out.println(arrayTest.charAt(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将两个字符串进行比较</span></span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">"i love cat"</span>);</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(<span class="string">"i love cat"</span>);</span><br><span class="line">        String str3 = <span class="keyword">new</span> String(<span class="string">"i love cat and dogs"</span>);</span><br><span class="line">        System.out.println(str1.compareTo(str2));</span><br><span class="line">        System.out.println(str1.compareTo(str3));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接两个字符串的方法</span></span><br><span class="line">        String str4 =<span class="string">"我的github网站："</span>;</span><br><span class="line">        String str5 =<span class="string">"https://github.com/hermit-rain"</span>;</span><br><span class="line">        System.out.println(str1.concat(str2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//描述StringBuilder类中主要使用的方法</span></span><br><span class="line">        StringBuilder str6 = <span class="keyword">new</span> StringBuilder(<span class="string">"hello "</span>);</span><br><span class="line">        <span class="comment">//追加</span></span><br><span class="line">        System.out.println(str6.append(<span class="string">"java"</span>));</span><br><span class="line">        <span class="comment">//反转</span></span><br><span class="line">        System.out.println(str6.reverse());</span><br><span class="line">        <span class="comment">//移除</span></span><br><span class="line">        System.out.println(str6.delete(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">        <span class="comment">//替换</span></span><br><span class="line">        System.out.println(str6.insert(<span class="number">0</span>,<span class="string">"hello java"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h2><blockquote><p>Scanner类包括文件输入和字符输入两种格式<br>next无法读取空格 遇到空格即停止编译  nextLine可以识别空格并成功输出<br>注意：Scanner类只能返回String类的对象 不能返回StringBuffer类的对象,要想调用StringBuffer方法必须将String类型转化成StringBuffer类型</p></blockquote><h3 id="Scanner类方法"><a href="#Scanner类方法" class="headerlink" title="Scanner类方法"></a>Scanner类方法</h3><ul><li>hasNext hasNextLine作为判断判否还有下一行输入  </li><li>next  nextLine 返回输入源中的下一行字符串</li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建Scanner类对象</span></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in) ;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//用next返回输入源中的下一行字符串</span></span><br><span class="line">        <span class="keyword">if</span> (scan.hasNext())&#123;</span><br><span class="line">            String str1 =scan.next();</span><br><span class="line">            System.out.println(<span class="string">"输出的数据是："</span>+str1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用 nextLine返回输入源中的下一行字符串</span></span><br><span class="line">        <span class="keyword">if</span> (scan.hasNextLine())&#123;</span><br><span class="line">            String str2 = scan.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"输入字符串str2："</span>+str2);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><blockquote><p>System类中包括类有 3 个静态成员变量<br>分别是 PrintStream out、InputStream in 和 PrintStream err  </p></blockquote><h3 id="System类方法"><a href="#System类方法" class="headerlink" title="System类方法"></a>System类方法</h3><ul><li>arrayCopy() 方法 该方法的作用是数组复制，即从指定源数组中复制一个数组 </li><li>currentTimeMillis() 方法 该方法的作用是返回当前的计算机时间  </li><li>identityHashCode(Object x) 该方法返回指定对象的精确hashCode值  <blockquote><blockquote><p>identityHashCode(Object x)与hashCode()两种方法的区别<br>Object的hashCode()默认是返回内存地址的，但是hashCode()可以重写，所以hashCode()不能代表内存地址的不同<br>System.identityHashCode(Object x)方法可以返回对象的内存地址,不管该对象的类是否重写了hashCode()方法<br>该方法返回指定对象的精确hashCode值，也就是根据该对象的地址计算得到的hashCode值，可以唯一地标识一个对象<br>判断两个对象是否是指向同一地址，应该用System.identityHashCode(Object x)方法进行判断 </p></blockquote></blockquote></li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//类方法arrayCopy</span></span><br><span class="line">        <span class="comment">// public static void arraycopy(Object src,int srcPos,Object dest,int destPos,int length)</span></span><br><span class="line">        <span class="comment">//src 表示源数组，srcPos 表示从源数组中复制的起始位置</span></span><br><span class="line">        <span class="comment">//dest 表示目标数组，destPos 表示要复制到的目标数组的起始位置，length 表示复制的个数。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] srcArray = &#123;<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>&#125;;</span><br><span class="line">        <span class="keyword">char</span>[] destArray = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line">        System.arraycopy(srcArray,<span class="number">1</span>,destArray,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"输出原数组："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;srcArray.length;i++)&#123;</span><br><span class="line">            System.out.println(srcArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"输出目标数组"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;destArray.length; j++)&#123;</span><br><span class="line">            System.out.println(destArray[j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//currentTimeMillis() 方法</span></span><br><span class="line">        <span class="comment">//该方法的作用是返回当前的计算机时间，</span></span><br><span class="line">        <span class="comment">// 时间的格式为当前计算机时间与 GMT 时间（格林尼治时间）1970 年 1 月 1 日 0 时 0 分 0 秒所差的毫秒数</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(startTime);</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">long</span> trem=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">100000000</span>;i++)&#123;</span><br><span class="line">            trem = trem+i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(trem);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> soTime=endTime-startTime;</span><br><span class="line">        System.out.println(soTime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// identityHashCode(Object x)与hashCode()方法返回相同的哈希值</span></span><br><span class="line">        String  str1= <span class="string">"hello"</span>;</span><br><span class="line">        String str2= <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(str1.hashCode()+<span class="string">"--------"</span>+str2.hashCode());</span><br><span class="line">        System.out.println(System.identityHashCode(str1)+<span class="string">"-----"</span>+System.identityHashCode(str2));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String str3 =<span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br><span class="line">        String str4 = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br><span class="line">        <span class="comment">//不同对象通过重写的hashCode()方法返回的值可能相同</span></span><br><span class="line">        System.out.println(str3 .hashCode()+<span class="string">"------"</span>+str4.hashCode());</span><br><span class="line">        <span class="comment">//因为str3和str4为两种不同的对象所以他们通过identityHashCode方法返回的内存地址不相同；</span></span><br><span class="line">        System.out.println(System.identityHashCode(str3)+<span class="string">"-----"</span>+System.identityHashCode(str4));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><blockquote><p>提供了两个静态变量：PI和E，值分别为：π和e<br>包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数等<br>Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用</p></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        a=<span class="number">9</span>;</span><br><span class="line">        b=-<span class="number">10</span>;</span><br><span class="line">        System.out.println(Math.abs(b));</span><br><span class="line">        <span class="comment">//计算乘方</span></span><br><span class="line">        System.out.println(Math.pow(a,b));</span><br><span class="line">        <span class="comment">//计算自然对数</span></span><br><span class="line">        System.out.println(Math.log(a));</span><br><span class="line">        <span class="comment">//找出最大值</span></span><br><span class="line">        System.out.println(Math.max(<span class="number">7</span>,<span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出90度的正弦值</span></span><br><span class="line">        <span class="comment">//调用Math中的静态变量PI</span></span><br><span class="line">        System.out.println(<span class="string">"90度的正弦值为："</span>+Math.sin(Math.PI/<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h2><blockquote><p>Random类专门用于生成一个随机数<br>它有两个构造器，一个是使用默认的种子（以当前时间为种子），另一个是显式传入一个long整型的种子<br>使用相同的种子可以产生相同的随机数<br>为了避免产生相同的随机数常推荐使用当前时间作为 Random对象的种子<br>Random  rand  = new  Random (System.currentTimeMills()) ;</p><blockquote><p>相比于Math的random()方法，Random类提供了更多的方式来生成各种伪随机数<br>既可以生成浮点类型的伪随机数，也可以生成整数类型的伪随机数，还可以指定生成随机数的范围<br>ThreadLocalRandom类是Random的增强版<br>在并发访问的环境下，使用ThreadLocalRandom来代替Random可以减少多线程资源竞争，保证线程安全<br>它提供了一个静态方法current( )方法来获取对象，然后调用各种nextXxx( ) 方法来获取各种基本类型的随机数</p></blockquote></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//随机产生布尔类型的随机数</span></span><br><span class="line">        System.out.println(rand.nextBoolean());</span><br><span class="line">        <span class="comment">// 生成0.0~1.0之间的伪随机double数</span></span><br><span class="line">        System.out.println(rand.nextDouble());</span><br><span class="line">        <span class="comment">// 生成一个处于int整数取值范围的伪随机整数</span></span><br><span class="line">        System.out.println(rand.nextInt());</span><br><span class="line">        <span class="comment">// 生成0~26之间的伪随机整数</span></span><br><span class="line">        System.out.println(rand.nextInt(<span class="number">26</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用相同的种子产生相同的随机数</span></span><br><span class="line">        Random rand1 = <span class="keyword">new</span> Random(<span class="number">50</span>);</span><br><span class="line">        Random rand2 = <span class="keyword">new</span> Random(<span class="number">50</span>);</span><br><span class="line">        System.out.println(rand1.nextInt());</span><br><span class="line">        System.out.println(rand2.nextInt());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用当前时间作为种子产生随机数</span></span><br><span class="line">        Random rand3 = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">        Random rand4 = <span class="keyword">new</span> Random(System.currentTimeMillis()+<span class="number">1000</span>);</span><br><span class="line">        System.out.println(rand3.nextInt());</span><br><span class="line">        System.out.println(rand4.nextInt());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过ThreadLocalRandom类来生成随机数</span></span><br><span class="line">        ThreadLocalRandom rand5 = ThreadLocalRandom.current();</span><br><span class="line">        ThreadLocalRandom rand6 = ThreadLocalRandom.current();</span><br><span class="line">        <span class="keyword">int</span>  val  = rand5.nextInt(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">long</span> va2 = (<span class="keyword">long</span>) rand6.nextDouble(<span class="number">10.00</span>);</span><br><span class="line">        System.out.println(val);+</span><br><span class="line">        System.out.println(va2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h2><blockquote><p>Runtime类描述Java程序的运行时环境<br>每个Java程序都有一个与之对应的Runtime实例<br>该类会被自动创建，我们可以通过Runtime.getRuntime() 方法来获取当前程序的Runtime实例。<br>应用程序通过该对象与其运行的环境相连接 可以访问JVM的相关信息，如处理器数量、内存信息等  </p></blockquote><h3 id="Runtime类方法"><a href="#Runtime类方法" class="headerlink" title="Runtime类方法"></a>Runtime类方法</h3><ul><li>public static Runtime getRuntime（）： 此方法返回与当前Java应用程序关联的实例或Runtime对象。  </li><li>public long freeMemory（）：此方法返回JVM（Java虚拟机）中的可用内存量  </li><li>public long totalMemory（）：此方法返回JVM（Java虚拟机）中的总内存量  </li><li>public long maxMemory（）：此方法返回Java虚拟机将尝试使用的最大内存量  </li><li>public Process exec（String command）抛出IOException：此方法在单独的进程中执行给定的命令  </li><li>public void gc（）：此方法运行垃圾收集器。调用此方法表明Java虚拟机花费了大量精力来回收未使用的对象，以使其当前占用的内存可用于快速重用  </li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个实例化对象</span></span><br><span class="line">        Runtime run = Runtime.getRuntime();</span><br><span class="line">        <span class="comment">//调用Runtime中的方法获取jvm的相关信息</span></span><br><span class="line">        System.out.println(<span class="string">"jvm中可用的内存数："</span>+run.freeMemory());</span><br><span class="line">        System.out.println(<span class="string">"jvm中总内存数："</span>+run.totalMemory());</span><br><span class="line">        System.out.println(<span class="string">"jvm尝试使用最大的内存数："</span>+run.maxMemory());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过exec方放来调用jvm单独启用一个进程来执行操作命令</span></span><br><span class="line">        run.exec(<span class="string">"notepad.exe"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用Runtime中gc()方法进行垃圾回收</span></span><br><span class="line">        run.gc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><blockquote><p>Data类共有两种构造器分别是无参和有参数的构造器  </p><blockquote><p>Date()   生成一个代表当前日期时间的对象<br>Date(long date) 根据指定的long型整数来生成一个Date对象  </p></blockquote></blockquote><h3 id="Date类方法"><a href="#Date类方法" class="headerlink" title="Date类方法"></a>Date类方法</h3><ul><li>boolean after(Date date)：判断当前日期是否在date之后  </li><li>boolean before(Date date)：判断当前日期是否在date之前  </li><li>long  getTime()：返回该时间对应的long型整数，即从1970年1月1日00:00:00到当前对象之间的时间差  </li><li>int compareTo(Date date)<br>比较当调用此方法的Date对象和指定日期<br>两者相等时候返回0，调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数  </li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Date date =<span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date.toString());</span><br><span class="line">        Date date1 =<span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line">        <span class="comment">//注意参数的设置：  Date类的年份是以1900开头，以0月开头的；</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">2020</span>-<span class="number">1900</span>,<span class="number">6</span>-<span class="number">1</span>,<span class="number">12</span>);</span><br><span class="line">        System.out.println(date1);</span><br><span class="line">        System.out.println(date2);</span><br><span class="line">        <span class="comment">//返回当前时间对应的long型整数</span></span><br><span class="line">        System.out.println(date.getTime());</span><br><span class="line">        System.out.println(date.before(date2));</span><br><span class="line">        System.out.println(date.after(date2));</span><br><span class="line">        System.out.println(date.compareTo(date2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><blockquote><p>Calendar类是一个抽象类，因此不能用构造器来创建对象，必须通过静态方法getInstance( )方法来获取Calendar对象<br>Calendar类可以直接对date的年份，月份或者日期进行更改</p><blockquote><p>roll以及add的区别<br>add方法的月份增加年份会进行递增</p><h2 id="roll方法月份的增加只会自身进行循环"><a href="#roll方法月份的增加只会自身进行循环" class="headerlink" title="roll方法月份的增加只会自身进行循环"></a>roll方法月份的增加只会自身进行循环</h2></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个代表系统当前日期的Calendar对象</span></span><br><span class="line">        Calendar c1 = Calendar.getInstance();</span><br><span class="line">        Date date = c1.getTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个指定时间的Calendar对象</span></span><br><span class="line">        Calendar c2 =Calendar.getInstance();</span><br><span class="line">        c2.set(<span class="number">2008</span>,<span class="number">9</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        System.out.println(c2.getTime());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出某个时间对象的具体年份月份以及日</span></span><br><span class="line">        System.out.println(c2.get(Calendar.YEAR));</span><br><span class="line">        System.out.println(c2.get(Calendar.MONTH));</span><br><span class="line">        System.out.println(c2.get(Calendar.DATE));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更改年月日</span></span><br><span class="line">         c1.add(Calendar.YEAR,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//添加的月份数满12个月后年份会自动增加一位</span></span><br><span class="line">         c1.add(Calendar.MONTH,<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// roll方法的月份增加只会改变月份，如果满12则会进行迭代</span></span><br><span class="line">         c2.roll(Calendar.MONTH,<span class="number">10</span>);</span><br><span class="line">         c1.add(Calendar.DATE,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(c1.get(Calendar.YEAR));</span><br><span class="line">        System.out.println(c1.get(Calendar.MONTH));</span><br><span class="line">        System.out.println(c1.get(Calendar.DATE));</span><br><span class="line">        System.out.println(c2.get(Calendar.MONTH));</span><br><span class="line">        System.out.println(c1.get(Calendar.DATE));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Date类与Calendar类的相互转换 </span></span><br><span class="line">        <span class="comment">//Date类转Calendar类</span></span><br><span class="line">        Calendar cal1 = Calendar.getInstance();</span><br><span class="line">        Date  date1 = cal1.getTime();</span><br><span class="line">        <span class="comment">//Calendar类转Date类</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date();</span><br><span class="line">        Calendar cal2 =Calendar.getInstance();</span><br><span class="line">        cal2.setTime(date2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BigDecimal类"><a href="#BigDecimal类" class="headerlink" title="BigDecimal类"></a>BigDecimal类</h2><blockquote><p>float和double类型的主要设计目标是为了科学计算和工程计算<br>因在于我们的计算机是二进制的 浮点数没有办法是用二进制进行精确表示<br>商业计算往往要求结果精确，这时候BigDecimal就派上大用场  </p></blockquote><h3 id="BigDecimal类的常用构造方法"><a href="#BigDecimal类的常用构造方法" class="headerlink" title="BigDecimal类的常用构造方法"></a>BigDecimal类的常用构造方法</h3><ul><li>1.public BigDecimal(double val)    将double表示形式转换为BigDecimal 不建议使用  </li><li>2.public BigDecimal(int val)　　将int表示形式转换成BigDecimal  </li><li>3.public BigDecimal(String val)　　将String表示形式转换成BigDecimal  <blockquote><blockquote><p>注意：参数类型为double的构造方法的结果有一定的不可预知性 String 构造方法是完全可预知的<br>所以BigDecimal类最好使用String类的构造器  </p></blockquote></blockquote></li></ul><h3 id="BigDecimal类的常用方法"><a href="#BigDecimal类的常用方法" class="headerlink" title="BigDecimal类的常用方法"></a>BigDecimal类的常用方法</h3><ul><li>public BigDecimal add(BigDecimal value);                加法  </li><li>public BigDecimal subtract(BigDecimal value);           减法</li><li>public BigDecimal multiply(BigDecimal value);           乘法  </li><li>public BigDecimal divide(BigDecimal value);             除法  </li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigDecimalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//BigDecimal类的基础对象的构建</span></span><br><span class="line">        BigDecimal doubleTest1 = <span class="keyword">new</span> BigDecimal(<span class="string">"0.01"</span>);</span><br><span class="line">        BigDecimal doubleTest2 = <span class="keyword">new</span> BigDecimal(<span class="number">0.01</span>);</span><br><span class="line">        BigDecimal intTest1 = <span class="keyword">new</span> BigDecimal(<span class="number">178</span>);</span><br><span class="line">        <span class="comment">//string 的构造器是完全预知的所以可以精确的表示0.01</span></span><br><span class="line">        System.out.println(doubleTest1);</span><br><span class="line">        <span class="comment">//0.01无法精确的表示double所以系统会默认随机补位</span></span><br><span class="line">        System.out.println(doubleTest2);</span><br><span class="line">        System.out.println(intTest1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//BigDecimal类的基础方法的使用</span></span><br><span class="line">        BigDecimal testNumber1 = <span class="keyword">new</span> BigDecimal(<span class="string">"0.15"</span>);</span><br><span class="line">        BigDecimal testNumber2 = <span class="keyword">new</span> BigDecimal(<span class="string">"0.03"</span>);</span><br><span class="line">        System.out.println(testNumber1.add(testNumber2));</span><br><span class="line">        System.out.println(testNumber1.subtract(testNumber2));</span><br><span class="line">        System.out.println(testNumber1.multiply(testNumber2));</span><br><span class="line">        System.out.println(testNumber1.divide(testNumber2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><blockquote><p>正则表达式定义了字符串的模式，相当于构建了一个java字符串的自定义模板<br>java.util.regex 包主要包括以下两个类：<br>attern 类：<br>pattern 对象是一个正则表达式的编译表示<br>Pattern 类没有公共构造方法 要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法<br>它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数<br>Matcher 类：<br>Matcher 对象是对输入字符串进行解释和匹配操作的引擎<br>与Pattern 类一样，Matcher 也没有公共构造方法<br>需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象  </p></blockquote><h3 id="Matcher-类的方法"><a href="#Matcher-类的方法" class="headerlink" title="Matcher 类的方法"></a>Matcher 类的方法</h3><ul><li>public int start()  返回以前匹配的初始索引  </li><li>public int end() 返回最后匹配字符之后的偏移量  </li><li>public boolean find()  尝试查找与该模式匹配的输入序列的下一个子序列  </li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="keyword">new</span> String(<span class="string">"请尽快联系我17824852705,我的电话是15143385727出售二手书籍16824852705"</span>);</span><br><span class="line">        <span class="comment">// 创建一个pattern字符串模板</span></span><br><span class="line">        Pattern pat = Pattern.compile(<span class="string">"((17\\d)|(15\\d))\\d&#123;8&#125;"</span>);</span><br><span class="line">        <span class="comment">//调用Pattern类的matcher方法创建一个Matcher对象</span></span><br><span class="line">        Matcher m =pat.matcher(str);</span><br><span class="line">        <span class="comment">//将给定字符串与模板字符串进行比较</span></span><br><span class="line">        <span class="keyword">while</span> (m.find())&#123;</span><br><span class="line">            <span class="comment">//输出所有与模板字符串相匹配的字符串</span></span><br><span class="line">            System.out.println(m.group());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//描述正则表达式的特殊字符</span></span><br><span class="line">        Pattern pat2 =Pattern.compile(<span class="string">"a*b"</span>);</span><br><span class="line">        Matcher m2 = pat2.matcher(<span class="string">"aab"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> boo = m2.matches();</span><br><span class="line">        System.out.println(boo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">//Matcher类end()和start()方法</span></span><br><span class="line">         String str2 =<span class="keyword">new</span> String(<span class="string">"java is very good "</span>);</span><br><span class="line">         System.out.println(<span class="string">"目标字符串："</span>+str2);</span><br><span class="line">         Matcher m3 = Pattern.compile(<span class="string">"\\w+"</span>).matcher(str2);</span><br><span class="line">         <span class="keyword">while</span>(m3.find())&#123;</span><br><span class="line">             System.out.println(m3.group()+<span class="string">"起始字符位置："</span>+m3.start()+<span class="string">"结尾字符位置："</span>+ m3.end());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">//通过正则表达式输出字符串数组</span></span><br><span class="line">         String[] mails = &#123;<span class="string">"kongyeeku@163.com"</span>, <span class="string">"kongyeeku@gmail.com"</span>, <span class="string">"ligang@crazyit.org"</span>, <span class="string">"wawa@abc.xx"</span>&#125;;</span><br><span class="line">         String mailRegEx = <span class="string">"\\w&#123;3,20&#125;@\\w+\\.(com|org|cn|net|gov)"</span>;</span><br><span class="line"></span><br><span class="line">         Pattern mailPattern =Pattern.compile(mailRegEx);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//用for循环for（：）方法对数组进行遍历输出</span></span><br><span class="line">         Matcher matcher =<span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">for</span>(String mail :mails)&#123;</span><br><span class="line">            <span class="keyword">if</span> (matcher == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//第一次匹配时创建matcher对象</span></span><br><span class="line">                matcher = mailPattern.matcher(mail);</span><br><span class="line">                <span class="comment">//先重置目标字符串-避免后面重置时第一个数组会输出两次；</span></span><br><span class="line">                matcher.reset(mail);</span><br><span class="line">                <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">                    System.out.println(matcher.group());</span><br><span class="line">                &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Main类&quot;&gt;&lt;a href=&quot;#Main类&quot; class=&quot;headerlink&quot; title=&quot;Main类&quot;&gt;&lt;/a&gt;Main类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt; JVM运行Java应用程序的时候，首先会调用main方法&lt;br&gt;  调用时不实例化这个类的对象,而是通过类名直接调用&lt;br&gt;  因此需要是限制为public static&lt;br&gt; main()方法定义：“public static void main(String[]  字符串数组参数名)”  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;jvm有限制，不能有返回值，因此返回值类型为void&quot;&gt;&lt;a href=&quot;#jvm有限制，不能有返回值，因此返回值类型为void&quot; class=&quot;headerlink&quot; title=&quot;jvm有限制，不能有返回值，因此返回值类型为void&quot;&gt;&lt;/a&gt;jvm有限制，不能有返回值，因此返回值类型为void&lt;/h2&gt;</summary>
    
    
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Windows如何重做系统</title>
    <link href="http://yoursite.com/2020/09/01/window10/"/>
    <id>http://yoursite.com/2020/09/01/window10/</id>
    <published>2020-09-01T05:06:33.000Z</published>
    <updated>2021-05-06T13:06:10.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要重做系统"><a href="#为什么要重做系统" class="headerlink" title="为什么要重做系统"></a>为什么要重做系统</h2><p>1.提高系统稳定性<br>2.清理系统垃圾<br>3.修复缺失的系统文件<br>4.杀死病毒<br>5.系统崩溃——没招  </p><a id="more"></a><h2 id="重置系统与重装系统的区别"><a href="#重置系统与重装系统的区别" class="headerlink" title="重置系统与重装系统的区别"></a>重置系统与重装系统的区别</h2><p>1.重置利用系统现有的资源重新组成可用的系统，重装把全新的系统写入电脑<br>2.重置可以主动保留必要的文件（电脑可以开机），重装系统则需要手动备份<br>3.重置可能不会解决系统所有的问题，重装一定会<br>4.重置不需要借助工具，重装需要借助光盘或者U盘做介质下载系统镜像<br>5.重置系统后联网自动激活重装系统后可能存在系统激活问题<br>6.若系统损坏严重则只能进行系统重装</p><h2 id="重做系统的注意事项"><a href="#重做系统的注意事项" class="headerlink" title="重做系统的注意事项"></a>重做系统的注意事项</h2><p>1.重装系统和重置系统都会格式化系统盘<br>2.数字权利—包括一些激活码和正版软件的激活可能失效（注意保留激活工具）  </p><h2 id="重置系统"><a href="#重置系统" class="headerlink" title="重置系统"></a>重置系统</h2><p>windows&gt;设置&gt;更新和安全&gt;恢复</p><p><img src="/2020/09/01/window10/1.png" alt="alt"></p><h2 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>工具：8G以上的U盘  </p><h4 id="下载镜像源："><a href="#下载镜像源：" class="headerlink" title="下载镜像源："></a>下载镜像源：</h4><p>旧版本的系统镜像源（非官方授权）<br>[msdn I tell you]  (<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a>)   </p><p><img src="/2020/09/01/window10/2.png" alt="alt"><br>Window10<br>[微软官网]  (<a href="https://www.microsoft.com/zh-cn/software-download/windows10/" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/software-download/windows10/</a>)    </p><p><img src="/2020/09/01/window10/3.png" alt="alt"><br>下载安装工具后运行插入U盘选择为另一台电脑安装介质  </p><p><img src="/2020/09/01/window10/4.png" alt="alt">  </p><p>（注意: U盘插入后微软会自动格式化U盘）  </p><h3 id="开始重装"><a href="#开始重装" class="headerlink" title="开始重装"></a>开始重装</h3><p>1.插入U盘  </p><p>2.通过bios设置U盘为第一启动项  </p><p>3.进入系统安装界面进行逐步安装  </p><p><img src="/2020/09/01/window10/5.png" alt="alt">    </p><p>(注：在安装成功后系统重新启动时要拔出U盘)</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;为什么要重做系统&quot;&gt;&lt;a href=&quot;#为什么要重做系统&quot; class=&quot;headerlink&quot; title=&quot;为什么要重做系统&quot;&gt;&lt;/a&gt;为什么要重做系统&lt;/h2&gt;&lt;p&gt;1.提高系统稳定性&lt;br&gt;2.清理系统垃圾&lt;br&gt;3.修复缺失的系统文件&lt;br&gt;4.杀死病毒&lt;br&gt;5.系统崩溃——没招  &lt;/p&gt;</summary>
    
    
    
    
    <category term="windows" scheme="http://yoursite.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>uni--app 接入高德地图</title>
    <link href="http://yoursite.com/2020/08/24/uni-app%E5%BC%80%E5%8F%91-%E5%89%8D%E7%AB%AF%E5%9C%B0%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2020/08/24/uni-app%E5%BC%80%E5%8F%91-%E5%89%8D%E7%AB%AF%E5%9C%B0%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-08-24T05:06:33.000Z</published>
    <updated>2021-05-06T13:06:12.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、搭建Android开发环境"><a href="#一、搭建Android开发环境" class="headerlink" title="一、搭建Android开发环境"></a>一、搭建Android开发环境</h1><p>[开发工具：HBuilder X ]  (<a href="https://www.cnblogs.com/qisi007/p/10489176.html" target="_blank" rel="noopener">https://www.cnblogs.com/qisi007/p/10489176.html</a>)  </p><p>[ Android SDK 安装及配置]  ( <a href="https://www.cnblogs.com/nebie/p/9145627.html" target="_blank" rel="noopener">https://www.cnblogs.com/nebie/p/9145627.html</a>) </p><p>[JDK的安装及配置]  (<a href="https://zhuanlan.zhihu.com/p/105478993" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/105478993</a>)  </p><a id="more"></a><h2 id="二、-地图实现"><a href="#二、-地图实现" class="headerlink" title="二、    地图实现"></a>二、    地图实现</h2><h3 id="注册高德地图开发者账号"><a href="#注册高德地图开发者账号" class="headerlink" title="注册高德地图开发者账号"></a>注册高德地图开发者账号</h3><ul><li><p>[注册账号]  (<a href="https://lbs.amap.com/" target="_blank" rel="noopener">https://lbs.amap.com/</a>)    </p><h3 id="创建应用获取key（Android平台）"><a href="#创建应用获取key（Android平台）" class="headerlink" title="创建应用获取key（Android平台）"></a>创建应用获取key（Android平台）</h3></li><li><p>[创建Android平台签名证书 获取发布版SHA1值 ]  (<a href="https://ask.dcloud.net.cn/article/35777" target="_blank" rel="noopener">https://ask.dcloud.net.cn/article/35777</a>) </p></li><li><p>[获取调试版SHA1值]  ( <a href="https://blog.csdn.net/qq_21402513/article/details/51982234" target="_blank" rel="noopener">https://blog.csdn.net/qq_21402513/article/details/51982234</a>)  </p></li></ul><h3 id="获取PackageName"><a href="#获取PackageName" class="headerlink" title="获取PackageName"></a>获取PackageName</h3><ul><li>在HBuilder X中创建工程在发行云打包上获取Android包名即可    </li></ul><h3 id="创建应用获取key（小程序平台）"><a href="#创建应用获取key（小程序平台）" class="headerlink" title="创建应用获取key（小程序平台）"></a>创建应用获取key（小程序平台）</h3><ul><li>直接可得到key   </li></ul><h3 id="下载相应的sdk文件导入项目"><a href="#下载相应的sdk文件导入项目" class="headerlink" title="下载相应的sdk文件导入项目"></a>下载相应的sdk文件导入项目</h3><ul><li>[ Android sdk] ( <a href="https://lbs.amap.com/api/android-sdk/summary/" target="_blank" rel="noopener">https://lbs.amap.com/api/android-sdk/summary/</a>)  </li><li>[小程序 sdk ]  ( <a href="https://lbs.amap.com/api/wx/summary/" target="_blank" rel="noopener">https://lbs.amap.com/api/wx/summary/</a>)  <h3 id="在项目中创建Amap对象"><a href="#在项目中创建Amap对象" class="headerlink" title="在项目中创建Amap对象"></a>在项目中创建Amap对象</h3></li><li>[创建对象]  (<a href="https://ask.dcloud.net.cn/article/35070" target="_blank" rel="noopener">https://ask.dcloud.net.cn/article/35070</a>)  <h2 id="三、-运行"><a href="#三、-运行" class="headerlink" title="三、    运行"></a>三、    运行</h2><h3 id="运行到小程序模拟器"><a href="#运行到小程序模拟器" class="headerlink" title="运行到小程序模拟器"></a>运行到小程序模拟器</h3></li><li>[安装微信开发者工具]<br> (<a href="https://jingyan.baidu.com/article/f0e83a2558580022e591018b.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/f0e83a2558580022e591018b.html</a> )  </li><li>[获取小程序App Id]<br> (<a href="https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&amp;token=371280001" target="_blank" rel="noopener">https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&amp;token=371280001</a>)  </li></ul><h3 id="运行到手机模拟器（Android平台）"><a href="#运行到手机模拟器（Android平台）" class="headerlink" title="运行到手机模拟器（Android平台）"></a>运行到手机模拟器（Android平台）</h3><ul><li>[配置手机模拟器]  (<a href="https://ask.dcloud.net.cn/article/151" target="_blank" rel="noopener">https://ask.dcloud.net.cn/article/151</a>)   </li></ul><h2 id="附加、-git及github使用"><a href="#附加、-git及github使用" class="headerlink" title="附加、 git及github使用"></a>附加、 git及github使用</h2><ul><li>[ Git安装及配置]  (<a href="https://my.oschina.net/u/2933229/blog/1818671" target="_blank" rel="noopener">https://my.oschina.net/u/2933229/blog/1818671</a>)   </li><li>[TortoiseGIT 安装及配置]  (<a href="https://www.cnblogs.com/xiuxingzhe/p/9312929.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiuxingzhe/p/9312929.html</a>)  </li></ul><hr><blockquote><p>我的第一篇博客   谢谢！</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、搭建Android开发环境&quot;&gt;&lt;a href=&quot;#一、搭建Android开发环境&quot; class=&quot;headerlink&quot; title=&quot;一、搭建Android开发环境&quot;&gt;&lt;/a&gt;一、搭建Android开发环境&lt;/h1&gt;&lt;p&gt;[开发工具：HBuilder X ]  (&lt;a href=&quot;https://www.cnblogs.com/qisi007/p/10489176.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/qisi007/p/10489176.html&lt;/a&gt;)  &lt;/p&gt;
&lt;p&gt;[ Android SDK 安装及配置]  ( &lt;a href=&quot;https://www.cnblogs.com/nebie/p/9145627.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/nebie/p/9145627.html&lt;/a&gt;) &lt;/p&gt;
&lt;p&gt;[JDK的安装及配置]  (&lt;a href=&quot;https://zhuanlan.zhihu.com/p/105478993&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/105478993&lt;/a&gt;)  &lt;/p&gt;</summary>
    
    
    
    
    <category term="uni-app" scheme="http://yoursite.com/tags/uni-app/"/>
    
  </entry>
  
</feed>
