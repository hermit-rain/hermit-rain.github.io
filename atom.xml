<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鑫宇的个人博客</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-06-15T13:26:52.015Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>rain</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP的前世今生</title>
    <link href="http://yoursite.com/2021/06/14/HTTP%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <id>http://yoursite.com/2021/06/14/HTTP%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</id>
    <published>2021-06-14T06:38:56.000Z</published>
    <updated>2021-06-15T13:26:52.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP的主要特点"><a href="#HTTP的主要特点" class="headerlink" title="HTTP的主要特点"></a>HTTP的主要特点</h1><p><strong>支持客服/服务器模式</strong>：HTTP协议工作于客户端/服务器的架构之上，浏览器作为HTTP客户端通过URL向HTTP服务端发送请求，web服务器根据接受到的请求向客户端发送响应信息；</p><p><strong>简单快速：</strong>客户端向服务器请求服务的时候，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST，每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p><p><strong>灵活</strong>：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记;</p><a id="more"></a>  <p><strong>无连接：</strong>无连接即<strong>限制每次连接只处理一次请求</strong>，服务器处理完客户的请求并收到客户的应答之后便断开连接，采用这种方式可以节省传输时间。从HTTP 1.1 默认使用了<strong>长连接</strong>，即服务器需要等待一定的时间后才断开连接，以保证连接特性。虽然目前的技术如 Keep-Alive使用长连接优化效率，但这些都处于HTTP请求之外的，也就是说在每一个独立的HTTP请求中是无法得知当前请求的HTTP是否处于长连接的状态。我们始终认为HTTP请求在结束后连接就会关闭，这是HTTP的特性，至于下层实现是否在结束请求之后关闭连接都不会关闭这个特性。Keep-Alive可以理解为下层实现对上层是透明。</p><p><strong>无状态：</strong>HTTP协议是无状态协议，<strong>无状态是指协议对于事物处理没有记忆能力</strong>，缺少状态意味着如果后续处理需要前面的信息则必须被重传。这样可能导致每次传输的数据量增大，另一方面，在服务器不需要先前的信息时它的应答会变快。</p><h1 id="HTTP请求头部"><a href="#HTTP请求头部" class="headerlink" title="HTTP请求头部"></a>HTTP请求头部</h1><p>客户端发送一个HTTP请求到服务器的请求消息结构如下，主要由<strong>请求行、请求头部、空行、和请求正文</strong>这四个部分组成。</p><img src="/2021/06/14/HTTP%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/1.png" alt="1" style="zoom:80%;"><p>请求行主要由<strong>请求方法</strong>(GET/PST..)、<strong>URL</strong>、<strong>协议版本号</strong>(1.0/1.1/2.0)三个部分组成，最后需要一个回车换行标志；</p><p>请求头部由若干个报头组成，每个报头的结构都是<strong>头部名字+ <code>：</code> + 空格 + 值</strong>这样的形式，名字与大小写无关，这些请求头部用来设置HTTP请求的一些参数；</p><p>请求正文即数据体，该数据体只在POST请求中用到，表示要上传的数据；</p><p><strong>请求正文和请求头部之间有空行</strong>，即浏览器发送一个空白行来通知服务器它已经结束了该请求头部的发送；</p><h1 id="HTTP响应结构"><a href="#HTTP响应结构" class="headerlink" title="HTTP响应结构"></a>HTTP响应结构</h1><p>服务器接收并处理客户端发送过来的请求后会返回一个HTTP的响应消息即HTTP响应报文，HTTP的响应报文如下：</p><img src="/2021/06/14/HTTP%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/2.png" alt="2" style="zoom:80%;"><p>HTTP的响应报文主要由<strong>状态行、响应头部、响应正文</strong>三部分组成；</p><p>状态行主要由<strong>协议版本号、状态码、状态码描述</strong>三部分组成；</p><p>响应头部主要用于描述服务器的基本信息，以及数据的描述，由响应头字段名字以及对应的值组成；</p><h1 id="HTTP请求-响应的步骤"><a href="#HTTP请求-响应的步骤" class="headerlink" title="HTTP请求/响应的步骤"></a>HTTP请求/响应的步骤</h1><ul><li>客户端连接到Web服务器(建立TCP连接)</li><li>发送HTTP请求</li><li>服务器接受请求并返回HTTP响应</li><li>释放TCP连接</li><li>客户端浏览器解析HTML内容</li></ul><p>首先客户端连接Web服务器（一个HTTP客户端通常是浏览器），与Web服务器的HTTP端口（默认80）建立一个TCP套接字连接；然后发送HTTP请求（<strong>HTTP 协议是建立在 TCP 协议之上的应用层协议，其本质是在建立起的TCP连接中，按照HTTP协议标准发送一个索要网页的请求</strong>），即通过TCP套接字，客户端向Web服务器发送一个文本的请求报文；之后服务器接受到来自客户端的请求并返回HTTP响应，Web服务器解析该请求，定位请求资源，并将资源副本写到TCP套接字，由客户端读取；之后会释放TCP连接（若连接模式为Close，则服务器主动关闭TCP连接，客户端被动关闭连接，若连接模式为Keep-Alive，则该连接会保持一段时间，在该时间内服务器可以继续接收请求）；最后客户端就拿到了HTML相关内容并进行解析，客户端浏览器首先去解析状态行，查看表明请求是否成功的状态代码，然后解析每一个响应头，响应头告知以下为若干字节的HTML文档及文档的字符集，客户端浏览器读取响应数据HTML，并根据HTML语法对其进行格式化，最后在浏览器窗口中显示。</p><h1 id="在浏览器地址栏键入URL，按下回车后经历的流程"><a href="#在浏览器地址栏键入URL，按下回车后经历的流程" class="headerlink" title="在浏览器地址栏键入URL，按下回车后经历的流程"></a>在浏览器地址栏键入URL，按下回车后经历的流程</h1><ul><li>DNS解析</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>TCP连接断开</li></ul><p>首先浏览器会依据URL逐层查询DNS如期缓存，解析URL中的域名所对应的IP地址，DNS缓存从近到远，依次是浏览器缓存、系统缓存、路由器缓存、IPS服务器缓存、根域名服务器缓存、顶级域名服务器缓存，从哪个缓存找到对应的IP则直接返回，不再查询后面的缓存；找到IP地址之后，根据IP地址和对应的端口号与服务器建立TCP连接；之后浏览器会发送读取文件的HTTP请求，该请求将发送给服务器；服务器收到HTTP请求后处理请求并把对应的带有HTML文本的HTTP响应报文发回给浏览器；浏览器收到HTML并在显示窗口中去渲染（首先解析 HTML 文件构建 DOM 树，然后解析 CSS 文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上）；最终浏览器与服务器通过四次挥手释放TCP连接；</p><h1 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h1><p>HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。</p><p>HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>请求指定的页面信息，并返回具体内容，通常只用于读取数据。</td></tr><tr><td>HEAD</td><td>类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头。</td></tr><tr><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立或已有资源的更改。</td></tr><tr><td>PUT</td><td>替换指定的资源，没有的话就新增。</td></tr><tr><td>DELETE</td><td>请求服务器删除 URL 标识的资源数据。</td></tr><tr><td>CONNECT</td><td>将服务器作为代理，让服务器代替用户进行访问。</td></tr><tr><td>OPTIONS</td><td>向服务器发送该方法，会返回对指定资源所支持的 HTTP 请求方法。</td></tr><tr><td>TRACE</td><td>回显服务器收到的请求数据，即服务器返回自己收到的数据，主要用于测试和诊断。</td></tr><tr><td>PATCH</td><td>是对 PUT 方法的补充，用来对已知资源进行局部更新。</td></tr></tbody></table><h2 id="GET请求和POST请求的区别"><a href="#GET请求和POST请求的区别" class="headerlink" title="GET请求和POST请求的区别"></a>GET请求和POST请求的区别</h2><ul><li>GET将请求信息放到URL中；POST放在报文体中；</li><li>GET提交的数据大小有限制；POST提交的数据没限制；</li><li><strong>GET符合幂等性和安全性；POST不符合；</strong></li><li>GET可以被缓存；POST不行；</li></ul><p><strong>注解</strong></p><p>由于GET请求是将请求信息放到URL中的，所以对长度有限制。虽然URL本身并没有长度的限制，但是浏览器会对URL有长度有所限制；</p><p>从数据库层面看，GET请求符合幂等性和安全性。幂等性即对数据库的一次操作和多次操作获得的结果是一致的，安全性即对数据库的操作没有改变数据库中的数据。GET请求是做查询操作的，因此不会改变数据库原有的数据，大致可以认为GET请求符合幂等性和安全性。POST请求则既不幂等也不安全，因为POST请求往往是向数据库中提交数据，因此会改变数据库中的数据。同时POST请求每次获得的结果也可能不同，因为POST请求是作用到上一层的URL上的，即每一次请求都会添加一次新的资源。</p><p>GET请求可以被缓存，可以保存在浏览器的浏览记录中，以GET请求的URL能够保存为浏览器书签。这也是GET请求被广泛使用的原因。</p><h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><p><strong>HTTTP态码共有 5 种类型:</strong></p><table><thead><tr><th>类别</th><th>分类描述</th></tr></thead><tbody><tr><td>1xx</td><td>指示信息-&gt;表示请求已接受，继续处理</td></tr><tr><td>2xx</td><td>成功-&gt; 表示请求已被成功接收、理解、接受</td></tr><tr><td>3xx</td><td>重定向-&gt; 要完成请求必须进行更进一步的操作</td></tr><tr><td>4xx</td><td>客户端错误-&gt; 请求有语法错误或请求无法实现</td></tr><tr><td>5xx</td><td>服务器端错误-&gt; 服务器未能实现合法请求</td></tr></tbody></table><p><strong>常见的HTTP状态码</strong></p><table><thead><tr><th align="center">状态码</th><th align="center">English Name</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">100</td><td align="center">continue</td><td align="left">继续。客户端继续处理请求</td></tr><tr><td align="center">101</td><td align="center">Switching Protocol</td><td align="left">切换协议。服务器根据客户端的请求切换到更高级的协议</td></tr><tr><td align="center">200</td><td align="center">OK</td><td align="left">请求成功。请求所希望的响应头或数据体将随此响应返回</td></tr><tr><td align="center">301</td><td align="center">Moved Permanently</td><td align="left">永久移动。请求的资源已被永久地移动到新 URI，返回信息会包含新的 URI，浏览器会自动定向到新 URI</td></tr><tr><td align="center">302</td><td align="center">Found</td><td align="left">临时移动。与 301 类似。但资源只是临时被移动，客户端应继续使用原有URI</td></tr><tr><td align="center">400</td><td align="center">Bad Request</td><td align="left">客户端请求的语法错误，服务器无法理解；请求的参数有误</td></tr><tr><td align="center">401</td><td align="center">Unauthorized</td><td align="left">当前请求需要用户验证</td></tr><tr><td align="center">403</td><td align="center">Forbidden</td><td align="left">服务器已经理解请求，但是拒绝执行它</td></tr><tr><td align="center">404</td><td align="center">Not Found</td><td align="left">请求失败，请求所希望得到的资源未被在服务器上发现</td></tr><tr><td align="center">500</td><td align="center">Internal Server</td><td align="left">服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理</td></tr><tr><td align="center">501</td><td align="center">Not Implemented</td><td align="left">服务器不支持当前请求所需要的某个功能</td></tr><tr><td align="center">502</td><td align="center">Bad Gateway</td><td align="left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到无效的响应</td></tr><tr><td align="center">503</td><td align="center">Service Unavailable</td><td align="left">由于临时的服务器维护或者过载，服务器当前无法处理请求，一段时间后可能恢复正常</td></tr><tr><td align="center">504</td><td align="center">Gateway Time-out</td><td align="left">充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr></tbody></table><h1 id="HTTP版本间的区别"><a href="#HTTP版本间的区别" class="headerlink" title="HTTP版本间的区别"></a>HTTP版本间的区别</h1><h2 id="HTTP-1-1-和-HTTP-1-0-的区别"><a href="#HTTP-1-1-和-HTTP-1-0-的区别" class="headerlink" title="HTTP/1.1 和 HTTP/1.0 的区别"></a>HTTP/1.1 和 HTTP/1.0 的区别</h2><p><strong>缓存处理</strong>：在 HTTP/1.0 中主要使用 header 里的 if-modified-Since, Expries 来做缓存判断的标准。而 HTTP/1.1 请求头中添加了更多与缓存相关的字段，从而支持更为灵活的缓存策略，例如 Entity-tag, If-Unmodified-Since, If-Match, If-None-Match 等可供选择的缓存头来控制缓存策略。</p><p><strong>节约带宽</strong>： 当客户端请求某个资源时，HTTP/1.0 默认将该资源相关的整个对象传送给请求方，但很多时候可能客户端并不需要对象的所有信息。而在 HTTP/1.1 的请求头中引入了 range 头域，它允许只请求部分资源，其使得开发者可以多线程请求某一资源，从而充分的利用带宽资源，实现高效并发。</p><p><strong>错误通知的管理</strong>：HTTP/1.1 在 1.0 的基础上新增了 24 个错误状态响应码，例如 414 表示客户端请求中所包含的 URL 地址太长，以至于服务器无法处理；410 表示所请求的资源已经被永久删除。</p><p><strong>Host 请求头</strong>：早期 HTTP/1.0 中认为每台服务器都绑定一个唯一的 IP 地址并提供单一的服务，请求消息中的 URL 并没有传递主机名。而随着虚拟主机的出现，一台物理服务器上可以存在多个虚拟主机，并且它们共享同一个 IP 地址。为了支持虚拟主机，HTTP/1.1 中添加了 host 请求头，请求消息和响应消息中应声明这个字段，若请求消息中缺少该字段时服务端会响应一个 404 错误状态码。</p><p><strong>长连接</strong>：HTTP/1.0 默认浏览器和服务器之间保持短暂连接，浏览器的每次请求都需要与服务器建立一个 TCP 连接，服务器完成后立即断开 TCP 连接。HTTP/1.1 默认使用的是持久连接，其支持在同一个 TCP 请求中传送多个 HTTP 请求和响应。此之前的 HTTP 版本的默认连接都是使用非持久连接，如果想要在旧版本的 HTTP 协议上维持持久连接，则需要指定 Connection 的首部字段的值为 Keep-Alive。</p><h2 id="HTTP-1-0-1-1-和-HTTP-2-0-的区别"><a href="#HTTP-1-0-1-1-和-HTTP-2-0-的区别" class="headerlink" title="HTTP/1.0/1.1 和 HTTP/2.0 的区别"></a>HTTP/1.0/1.1 和 HTTP/2.0 的区别</h2><p><strong>二进制分帧</strong>：相比于 HTTP/1.X 的文本（字符串）传送， HTTP/2.0 采用二进制传送。客户端和服务器传输数据时把数据分成帧，帧组成了数据流，流具有流 ID 标识和优先级，通过优先级以及流依赖能够一定程度上解决关键请求被阻塞的问题。<br><strong>多路复用</strong>：HTTP/2.0 支持多路复用。因为流 ID 的存在， 通过同一个 HTTP 请求可以实现多个 HTTP 请求传输，客户端和服务器可以通过流 ID 来标识究竟是哪个流从而定位到是哪个 HTTP 请求。<br><strong>头部压缩：</strong>HTTP/2.0 头部压缩。HTTP/2.0 通过 gzip 和 compress 压缩头部然后再发送，同时通信双方会维护一张头信息表，所有字段都记录在这张表中，在每次 HTTP 传输时只需要传头字段在表中的索引即可，大大减小了重传次数和数据量。<br><strong>服务器推送：</strong>HTTP/2.0 支持服务器推送。 服务器在客户端未经请求许可的情况下，可预先向客户端推送需要的内容，客户端在退出服务时可通过发送复位相关的请求来取消服务端的推送</p><h1 id="Cookie与Session"><a href="#Cookie与Session" class="headerlink" title="Cookie与Session"></a>Cookie与Session</h1><p>因为HTTP是无状态的，理论上意味着我们每次访问有登录需求的页面的时候都需要不厌其烦的输入用户名和密码，但是实际上我们并没有如此操作的原因是引入了Cookie与Session机制。Cookie与Session弥补了HTTP无状态的不足，使HTTP具有了状态性。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a><strong>Cookie</strong></h2><p>Cookie技术是客户端的解决方案，Cookie就是由服务器发送给客户端的特殊信息，而这些信息以文本文件的形式存放在客户端，然后客户端每次向服务器发送请求的时候都会带上这些特殊信息。</p><p>当用户使用浏览器访问一个支持Cookie的网站时，用户提供一个包括用户名在内的个人信息并提交至服务器，接着服务器在向客户端发送超文本的同时也会发回这些信息。当然这些信息并不存在HTTP的响应体中，而是存在HTTP的响应头中。当用户浏览器接收到来自服务器的响应后，浏览器会将这些信息存放一个统一的位置，至此客户端再向服务器发送请求时，都会把相应的Cookie再次发送到服务器中，而这次Cookie信息则存在HTTP请求头里了。 有了Cookie这样的技术实现，服务器在接受到来自客户端浏览器的请求之后就能够分析存放在请求头中的Cookie，得到客户端特有的信息，从而动态生成与该客户端相对应的内容。</p><p><strong>Cookie的设置及发送过程如下：</strong></p><img src="/2021/06/14/HTTP%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/3.png" alt="3" style="zoom: 67%;"><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a><strong>Session</strong></h2><p>Session机制是一种服务器端的机制，服务器使用了一种类似于散列表的结构来保存信息，当程序需要为某个客户端请求创建一个Session的时候，服务器首先检查这个客户端的请求里是否含有Session标识(即为session id)，如果已包含则说明以前已经为此客户端创建过Session,服务器就按照session id把session检索出来使用，若检索不到，可能新建一个。如果客户端请求不包含session id 则为客户端创建一个Session，并生成一个与此Session相关的 session id。(session id的值为一个既不会重复又不容易被找到规律的字符串)这个session id 将会在本次响应中发给客户端进行保存。</p><p><strong>Session的实现方式</strong></p><ul><li>使用Cookie来实现</li><li>使用URL回写来实现</li></ul><p>使用Cookie来实现服务器给每个Session 分配一个唯一的 JSESSIONID并通过Cookie发送给客户端，当客户端发送新的请求的时候，将在Cookie头中携带JSESSIONID,这样服务器就可以找到客户端对应的Session了。</p><img src="/2021/06/14/HTTP%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/4.png" alt="4" style="zoom:80%;"><p>URL回写是指服务器在发送给浏览器页面的所有链接中都携带JSESSIONID的参数，这样客户端点击任何一个链接都会把JSESSIONID带回服务器。如果直接在浏览器输入服务器资源的URL来请求该资源，那么Session 是匹配不到的。Tomcat对Session的使用是一开始同时使用Cookie和URL回写的，如果发现客户端支持Cookie就继续使用Cookie停止使用URL回写；如果发现Cookie被禁用，就一直使用URL回写。不管是Cookie还是Session都和 JSESSIONID息息相关。</p><h2 id="Cookie与Session的区别"><a href="#Cookie与Session的区别" class="headerlink" title="Cookie与Session的区别"></a><strong>Cookie与Session的区别</strong></h2><ul><li>Cookie数据存放在客户的浏览器上，Session数据存放在服务器上</li><li>Session相对于Cookie更安全</li><li>若考虑减轻服务器的负担，应当使用Cookie</li></ul><p>Cookie的数据存放在客户的浏览器上，不安全，别人可以分析存放在本地的Cookie并进行Cookie欺骗，考虑到安全应当使用Session，但是Session会在一定时间内保存在服务器上，当访问增多会比较占用服务器的性能，考虑到减轻服务器性能方面的开销，可以使用Cookie</p><h1 id="数据加密技术"><a href="#数据加密技术" class="headerlink" title="数据加密技术"></a>数据加密技术</h1><ul><li>单向加密：哈希算法，将任意长度的信息转换成固定长度的值，算法不可逆</li><li>对称加密：加密和解密都使用同一个密钥</li><li>非对称加密：加密使用的密钥和解密使用的密钥是不同的即公钥与私钥</li><li>数字签名：证明某个消息或者文件是某人发出/认同的</li></ul><h2 id="单向加密"><a href="#单向加密" class="headerlink" title="单向加密"></a><strong>单向加密</strong></h2><p>单向加密又称不可逆加密，通常采用了哈希算法，即明文被加密成密文后，无法再解密回明文。</p><ul><li>同一明文对应同一密文</li><li>对明文进行微小修改，密文即会发生极大变化</li><li>对于不同的明文，产生的密文是定长的</li></ul><p>在加密领域，单向加密经常用于存放用户的密码，以实现即使数据库数据完全泄露被获取，也无法直接用于登录。</p><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a><strong>对称加密</strong></h2><p>对称加密即为明文可以使用密钥加密成为密文，也能使用同一个密钥将密文解密回明文的方式。</p><ul><li>加密解密的速度快，因此适合数据量大的时候使用</li><li>同一明文不一定都应同一密文，由加密算法决定</li></ul><p><strong>常用对称加密的场景有</strong></p><ul><li>服务端用于保存涉及用户隐私的数据，服务端自动进行数据加密</li><li>进行网络传输时，依赖其他方式进行密钥交换后，使用密钥进行对称加密解密(如SSL/TLS传输机制)</li></ul><p>常见的对称加密算法有：DES、AES、SM4(国密)，而同一加密算法又有不同的加密模式。</p><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a><strong>非对称加密</strong></h2><p>不同于对称加密，非对称加密拥有一对密钥，分别是公钥和私钥，公钥和算法是公开的，私钥是保密的。使用其中一个密钥加密后的密文必须使用另一个密钥来解密。</p><ul><li>非对称加密算法的性能大大弱于对称加密，不建议采用非对称加密算法加密大量的用户数据</li><li>由于其加密特性，非对称加密算法加密的数据长度有限</li></ul><p><strong>使用场景：</strong></p><ul><li>客户端利用公钥给数据加密，传输给拥有私钥的服务端进行解密。由于只是私钥可以解密该数据，该密文即使在传输过程中被截获也不会有泄露的风险。</li><li>服务端对于一段明文传输的数据，先用哈希算法产生摘要信息，之后用私钥对于摘要信息进行加密产生一个数字签名。客户端收到这段明文数据和对应数字签名后，可以利用公钥来验证这段明文数据的完整性。</li></ul><p>常用的非对称加密的算法有：RSA、ECC、SM2</p><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a><strong>数字签名</strong></h2><p>签名就是在信息的后面加一段内容，这些内容是经过哈希后的值，可以证明信息没有被修改。哈希值一般都会加密后再和信息一起发送，以保证这个哈希值不被修改。</p><p><strong>数字签名的流程</strong></p><ul><li>创建数据密钥对</li><li>一段数据利用哈希算法获得数据摘要，再用明文私钥获得哈希值的签名</li><li>此后用户可以将这段数据和签名一同分发给任何拥有公钥的人</li></ul><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p>HTTPS为超文本传输安全协议，是一种以计算机网络安全通信为目的的传输协议，<strong>在HTTP下面加入了SSL层</strong>，从而具有了保护交换数据隐私以及完整性的功能，还提供对网站服务器身份认证的功能，即安全版的HTTP。</p><h2 id="SSL-Security-Sockets-Layer-安全套接层"><a href="#SSL-Security-Sockets-Layer-安全套接层" class="headerlink" title="SSL(Security Sockets Layer-安全套接层)"></a><strong>SSL</strong>(Security Sockets Layer-安全套接层)</h2><ul><li>为网络通信提供安全及数据完整性的一种安全协议</li><li>操作系统对外提供的API,SSL 3.0后更名为TLS</li><li>采用<strong>身份验证</strong>和<strong>数据加密</strong>保证网络通信的安全性和数据的完整性</li></ul><p><strong>”劫持“</strong> ：HTTP抓包的相关协议中，不管是GET请求还是PSOT请求,客户端与服务器之间都没有任何身份认证的过程，数据全部明文传输，“裸奔”在互联网上，所以客户端发出的请求很容易被黑客截获，如果此时黑客冒充服务器，即可以返回任何数据给客户端而不被客户端察觉。</p><h2 id="HTTPS的加密方式"><a href="#HTTPS的加密方式" class="headerlink" title="HTTPS的加密方式"></a><strong>HTTPS的加密方式</strong></h2><p>HTTPS 采用对称加密和非对称加密相结合的方式，首先使用 SSL/TLS 协议进行加密传输，为了弥补非对称加密的缺点，HTTPS 采用证书来进一步加强非对称加密的安全性，通过非对称加密，客户端和服务端协商好之后进行通信传输的对称密钥，后续的所有信息都通过该对称秘钥进行加密解密，完成整个 HTTPS 的流程。</p><h2 id="HTTPS数据传输流程"><a href="#HTTPS数据传输流程" class="headerlink" title="HTTPS数据传输流程"></a><strong>HTTPS数据传输流程</strong></h2><ul><li>浏览器将支持的加密算法信息发送给服务器</li><li>服务器选择一套浏览器支持的加密算法，以证书的形式回发浏览器</li><li>浏览器验证证书合法性，并结合证书公钥加密信息发送给服务器</li><li>服务器使用私钥解密信息，验证哈希，加密响应消息回发浏览器</li><li>浏览器解密响应消息，并对消息进行验真，之后进行加密交互数据</li></ul><h2 id="HTTP与HTTPS的区别"><a href="#HTTP与HTTPS的区别" class="headerlink" title="HTTP与HTTPS的区别"></a><strong>HTTP与HTTPS的区别</strong></h2><ul><li>HTTPS需要到CA申请证书，HTTP不需要；</li><li>HTTPS密文传输，HTTP明文传输；</li><li>连接方式不同，HTTPS默认使用443端口,HTTP使用80端口；</li><li>HTTPS = HTTP + 加密 + 认证 + 完整性保护，较HTTP安全；</li><li>HTTP 页面响应比 HTTPS 快，主要因为 HTTPS 除了 TCP 的 3 次握手，还需要经历一个 SSL 协商过程；</li></ul><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>Socket和TCP/IP协议没有必然的联系，只对TCP/IP协议的抽象，是操作系统对外开放的接口。方便程序员更方便的使用TCP/IP协议。</p><p>Socket起源于Unix,而Unix遵从一切皆文件的哲学，Socket是一种从打开到读和写再到关闭的这种模式去实现的。服务器和客户端各自维护一个文件，在建立连接打开后，可以向自己的文件写入内容供对方使用，在通信结束时就会关闭文件。</p><h2 id="套接字的三种类型"><a href="#套接字的三种类型" class="headerlink" title="套接字的三种类型"></a><strong>套接字的三种类型</strong></h2><p><strong>流套接字（SOCK_STREAM）</strong>：流套接字基于 TCP 传输协议，主要用于提供面向连接、可靠的数据传输服务。由于 TCP 协议的特点，使用流套接字进行通信时能够保证数据无差错、无重复传送，并按顺序接收，通信双方不需要在程序中进行相应的处理。<br><strong>数据报套接字（SOCK_DGRAM）</strong>：和流套接字不同，数据报套接字基于 UDP 传输协议，对应于无连接的 UDP 服务应用。该服务并不能保证数据传输的可靠性，也无法保证对端能够顺序接收到数据。此外，通信两端不需建立长时间的连接关系，当 UDP 客户端发送一个数据给服务器后，其可以通过同一个套接字给另一个服务器发送数据。当用 UDP 套接字时，丢包等问题需要在程序中进行处理。<br><strong>原始套接字（SOCK_RAW）</strong>：由于流套接字和数据报套接字只能读取 TCP 和 UDP 协议的数据，当需要传送非传输层数据包（例如 Ping 命令时用的 ICMP 协议数据包）或者遇到操作系统无法处理的数据包时，此时就需要建立原始套接字来发送。</p><h2 id="Socket通信流程"><a href="#Socket通信流程" class="headerlink" title="Socket通信流程"></a><strong>Socket通信流程</strong></h2><img src="/2021/06/14/HTTP%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/5.png" alt="5" style="zoom: 80%;"><p>服务器首先创建socket后，再为socket绑定IP地址和端口号，接着服务器的socket会开始监听端口号的请求，随时准备接收来自客户端的请求，这时候服务器的socket只是处于<code>listen()</code>状态并没有打开；</p><p>假设此时客户端创建socket，然后打开socket，并根据服务器的IP地址和端口号尝试去连接服务器的socket；</p><p>服务器的socket接收到来自客户端的socket请求后被动打开，开始接收客户端的请求直到客户端返回连接信息，这时服务器的socket进入到阻塞状态<code>accept()</code>，(处于阻塞状态需要一直等到客户端返回连接请求信息后才返回) 同时开始接收下一个客户端的连接请求；</p><p>客户端连接成功后，会向服务器发送连接状态信息，服务器接收到连接状态信息后就会将<code>accept()</code>方法返回，提示连接成功。</p><p>连接成功之后客户端就可以向socket中写入信息，服务器就能收到并读取相关信息。最后在发送完数据后，客户端就会关闭socket，紧接着服务端也需要关闭socket.</p><p><strong>参考资料</strong></p><ul><li><p><a href="https://leetcode-cn.com/leetbook/read/networks-interview-highlights/eksi0s/" target="_blank" rel="noopener">LeetCode - 应用层</a></p></li><li><p><a href="https://juejin.cn/post/6844904100035821575" target="_blank" rel="noopener">掘金 - HTTP灵魂之问</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;HTTP的主要特点&quot;&gt;&lt;a href=&quot;#HTTP的主要特点&quot; class=&quot;headerlink&quot; title=&quot;HTTP的主要特点&quot;&gt;&lt;/a&gt;HTTP的主要特点&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;支持客服/服务器模式&lt;/strong&gt;：HTTP协议工作于客户端/服务器的架构之上，浏览器作为HTTP客户端通过URL向HTTP服务端发送请求，web服务器根据接受到的请求向客户端发送响应信息；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单快速：&lt;/strong&gt;客户端向服务器请求服务的时候，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST，每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;灵活&lt;/strong&gt;：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记;&lt;/p&gt;</summary>
    
    
    
    
    <category term="计网" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>TCP那些事</title>
    <link href="http://yoursite.com/2021/06/11/TCP%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://yoursite.com/2021/06/11/TCP%E9%82%A3%E4%BA%9B%E4%BA%8B/</id>
    <published>2021-06-11T03:31:14.000Z</published>
    <updated>2021-06-15T13:01:07.556Z</updated>
    
    <content type="html"><![CDATA[<p>运输层协议为运行在不同主机上的应用进程之间的逻辑通信；</p><p>TCP与UDP为两种传输层的协议，TCP(传输控制协议)为调用它的应用程序提供一个可靠的、面向连接的服务，而UDP(用户数据协议)为调用它的应用程序提供一种不可靠的、无连接的服务；</p><p><strong>TCP与UDP最基本的责任是将两个端系统间IP的交付服务扩展为运行在端系统上的两个进程之间的交付服务</strong>；</p><a id="more"></a>  <h1 id="TCP报文头"><a href="#TCP报文头" class="headerlink" title="TCP报文头"></a>TCP报文头</h1><img src="/2021/06/11/TCP%E9%82%A3%E4%BA%9B%E4%BA%8B/2.png" alt="2" style="zoom: 80%;"><p><strong>Source Port/Destination Port：</strong> TCP与UDP的数据包都是不包含IP地址信息的，那是IP层面上的事情，但是TCP与UDP都会有源端口和目的端口。两个进程在计算机内部通信可以有<strong>管道、内存共享、信号量、消息队列</strong>等方法，而两个进程如果需要通信最基本的前提是能够唯一的标识一个进程，通过这个唯一的标识来找到对应的进程。在本地的进程通信的过程中我们可以使用PID(进程号)来唯一的标识一个进程，但是PID只在本地唯一，如果把两个进程放到不同的计算机中，它们如果想要进行通信，此时PID就不够用了，解决这个问题的方法就是在传输层中引入<strong>协议端口号（端口）</strong>。<strong>IP层的IP地址可以唯一的标识一个主机</strong>，而TCP协议和端口可以唯一标识主机中的一个进程，所以我们利用<strong>IP地址 + 协议端口号</strong>这样的组合方式来唯一标识网络中的一个进程。有时也把这种唯一标识的模式称为套接字(socket)。虽然通信的重点是应用进程，但是我们只需要<strong>将传送的报文交到目的主机的某一个合适的端口</strong>，剩下的工作就交给TCP来完成就好。</p><p><strong>Sequence Number：</strong>序号是建立在字节流之上的，<strong>每一个报文段的序号即是该报文段个首字节的字节流编码</strong>。假设主机A中的一个进程想通过一条TCP连接向主机B上的一个进程发送数据流，主机A中的TCP将隐式地对数据流中的每一个字节编号，假设数据流由一个包含50000字节的文件组成，其MSS为1000字节，数据流的首字节编号为0，则TCP将为该数据流构建50个报文段，即第一个报文段的序号为0；第二个报文段的序号为100，第三个报文段的序号为200，以此类推，每个序号被填入到相应TCP报文段首部的序号字段中去。</p><p><strong>Acknowledgment Number：</strong> ack确认号是<strong>期望收到对方下一个报文段中首个字节的序号即下一个报文的序列号</strong>。假如B收到了A发送过来的报文段，其序列号是501，并且数据的长度是100字节，这表明B正确收到了来自A的<strong>序号从501-600的数据</strong>，因此B期望接着收到A的序列号为601的报文段，所以B在发送给A的确认报文段中会把ack置为601。</p><p><strong>Offset：</strong>即数据偏移，由于头部有可选字段长度不固定，因此它指出TCP报文的数据距离TCP报文的起始处有多远。</p><p><strong>Reservd：</strong>保留区域，保留给将来使用，目前必须置为 0</p><p><strong>TCP Flags:</strong> 控制位，由八个标志位组成，每个标志位代表一个控制功能 ；常见的标志位如下：</p><ul><li><strong>URG:</strong> 紧急指针标志，用于保证TCP连接不被中断，并且督促中间层设备尽快处理。URG=1-&gt;紧急指针有效；URG=0-&gt;忽略紧急指针</li><li><strong>ACK:</strong> 确认序号标志，ACK=1-&gt; 确认号有效；ACK=0 -&gt; 报文不含确认信息，忽略确认号字段 </li><li><strong>PSH:</strong> push标志 ，push=1-&gt;表示是带有push标志的数据，指示接收方在接收该报文段以后应该尽可能的将该报文段交给应用程序，而不是放到缓冲区排队。</li><li><strong>RST:</strong> 重置连接标志，用于重置由于主机崩溃或者其他原因而出现的错误连接，或者用于拒绝非法的报文段和拒绝连接请求</li><li><strong>SYN:</strong> 同步序号，用于建立连接过程，在连接请求中 SYN=1和ACK=0 表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认域即SYN=1和ACK=1</li><li><strong>FIN:</strong> finish标志，用于释放连接，finish=1表示发送方已经没有数据发送了即关闭本方的数据流。</li></ul><p><strong>Window:</strong> 用来告知发送段接收端的缓存大小，以此控制发送端发送数据的速率，因而达到流量控制。</p><p><strong>Checksum:</strong> 检验和指的是奇偶校验，此校验和是对整个的TCP报文段包括TCP头 部和TCP数据以16位进行计算所得，由发送端计算和存储，并由接收端进行验证。</p><p><strong>Urgent Pointer:</strong> 只有当TCP Flags 中的URG=1时才有效，指出本报文段中的紧急数据的字节数。</p><p><strong>TCP Options:</strong> 可选项，其长度可变，定义一些其他的可选参数。</p><h1 id="UDP报文头部"><a href="#UDP报文头部" class="headerlink" title="UDP报文头部"></a>UDP报文头部</h1><img src="/2021/06/11/TCP%E9%82%A3%E4%BA%9B%E4%BA%8B/1.png" alt="1" style="zoom:80%;"><p><strong>Source Port:</strong> 源端口是一个可选字段，它表示发送方进程的端口号，接收方可以使用该字段向发送方发送信息；</p><p><strong>Destination Port:</strong> 目的端口是数据报接收方的端口号，它只在目标的 IP 地址下才有意义；</p><p><strong>Length:</strong> 长度是协议头和数据报中数据长度的总和，表示整个数据报的大小;</p><p><strong>Checksum:</strong> 校验码使用 IP 首部、UDP 首部和数据报中的数据进行计算，接收方可以通过校验码验证数据的准确性，发现传输过程中出现的问题；</p><h2 id="UDP的特点"><a href="#UDP的特点" class="headerlink" title="UDP的特点"></a>UDP的特点</h2><ul><li>面向非连接</li><li>不维护连接状态，支持同时向多个客户端传输相同的消息</li><li>数据包报头只有8个字节，相较于TCP的20个字节信息，额外开销较小</li><li>吞吐量只受限于数据生成速率、传输速率以及机器性能影响</li><li>尽最大努力交付，不保证可靠交付，不需要维持复杂的链接状态表格</li><li>面向报文，不对应用程序提交的报文信息进行拆分或者合并</li></ul><p><strong>注解</strong></p><p>UDP是一个非连接的传输协议，传输之前源端与终端不建立连接，当它想传输时就简单的抓取来自应用层数据，并尽可能快的把它扔到网络上，在发送端UDP传送的速度仅仅受应用程序生成数据的速度、计算机的能力、和传输带宽的限制。在接收端UDP把每个消息段放到队列中，应用程序每次从消息队列中读取一个消息段。</p><p>由于UDP的连接为非连接状态，每次就不需要维护连接状态、包括收发状态等，因此一台服务器可同时向多个客户机传输相同的消息。</p><p>吞吐量不受拥挤控制算法的调节，只受应用软件生成数据的速率、传输带宽 、源端与终端主机性能的限制。</p><p>UDP是面向报文的，发送端的UDP对应用程序交下来的报文在添加首部后就向下交付给IP层，既不拆分也不合并，而是保留报文的边界，因此应用程序需要选择合适的报文大小，可以看出UDP将绝大多数控制交给上层去解决。</p><h1 id="DNS为什么使用UDP"><a href="#DNS为什么使用UDP" class="headerlink" title="DNS为什么使用UDP"></a>DNS为什么使用UDP</h1><p>实际上，DNS 不仅使用了 UDP 协议，也使用了 TCP 协议 。DNS <strong>查询</strong>在刚设计时主要使用 UDP 协议进行通信，而 TCP 协议也是在 DNS 的演进和发展中被加入到规范的：</p><ol><li>DNS 在设计之初就在区域传输中引入了 TCP 协议，在查询中使用 UDP 协议；</li><li>当 DNS 超过了 512 字节的限制，我们第一次在 DNS 协议中明确了『当 DNS 查询被截断时，应该使用 TCP 协议进行重试』这一规范；</li><li>随后引入的 EDNS 机制允许我们使用 UDP 最多传输 4096 字节的数据，但是由于 MTU 的限制导致的数据分片以及丢失，使得这一特性不够可靠；</li><li>在最近的几年，我们重新规定了 DNS 应该同时支持 UDP 和 TCP 协议，TCP 协议也不再只是重试时的选择；</li></ol><h2 id="DNS-查询选择-UDP-或者-TCP-两种不同协议时的主要原因："><a href="#DNS-查询选择-UDP-或者-TCP-两种不同协议时的主要原因：" class="headerlink" title="DNS 查询选择 UDP 或者 TCP 两种不同协议时的主要原因："></a>DNS 查询选择 UDP 或者 TCP 两种不同协议时的主要原因：</h2><p><strong>UDP 协议</strong></p><ul><li>DNS 查询的数据包较小、机制简单；</li><li>UDP 协议的额外开销小、有着更好的性能表现；</li></ul><p><strong>TCP 协议</strong></p><ul><li>DNS 查询由于 DNSSEC 和 IPv6 的引入迅速膨胀，导致 DNS 响应经常超过 MTU 造成数据的分片和丢失，我们需要依靠更加可靠的 TCP 协议完成数据的传输；</li><li>随着 DNS 查询中包含的数据不断增加，TCP 协议头以及三次握手带来的额外开销比例逐渐降低，不再是占据总传输数据大小的主要部分；</li></ul><p>无论是选择 UDP 还是 TCP，最核心的矛盾就在于需要传输的数据包大小，如果数据包小到一定程度，UDP 协议绝对最佳的选择，但是当数据包逐渐增大直到突破 512 字节以及 MTU 1500 字节的限制时，我们也只能选择使用更可靠的 TCP 协议来传输 DNS 查询和相应。</p><h1 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h1><p><strong>面向连接与无连接：</strong>TCP面向连接而UDP面向无连接，TCP有三次握手的过程，UDP适合消息的多播发布即从单个点向多个点传输信息；</p><p><strong>可靠性</strong>：TCP比较可靠，利用握手确认和重传机制来提供可靠性保证，而UDP可能会丢失，不能保证报文段是否被接收；</p><p><strong>有序性：</strong>TCP利用序列号保证了报文段的顺序交付，到达可能无序，但TCP最终会排序，而UDP不具备有序性；</p><p><strong>传输形式：</strong>TCP面向字节流；UDP面向报文段；</p><p><strong>速度：</strong>TCP速度慢，因为要创建连接，保证消息的可靠性和有序性，相较于UDP需要做额外的很多事情；UDP则更适合对速度敏感的应用，比如在线视频媒体，电话广播、多人在线游戏等；</p><p><strong>量级：</strong>TCP属于重量级的，UDP属于轻量级的，主要体现在报文头部；</p><h1 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h1><p>TCP连接即：在一个应用进程与另外一个应用进程发送数据之前，这两个进程必须先”相互握手”,即它们必须相互发送某些预备的报文段，以建立确保数据传输的参数。在双方握手建立TCP连接之后，将会在两个应用之间建立一个全双工的通信，全双工的通信将会占用两个计算机之间的通信线路，直到它被一方或者双方关闭为止。</p><p>所谓三次握手(Three-way Handshake)，是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。<strong>三次握手的目的是连接服务器指定端口，建立TCP连接,并同步连接双方的顺序号和确认号并交换 TCP信息。</strong>三次握手的过程如下：</p><!-- more --><img src="/2021/06/11/TCP%E9%82%A3%E4%BA%9B%E4%BA%8B/7.png" alt="4" style="zoom: 50%;"><ul><li><strong>第一次握手</strong>：建立连接时，服务器属于<code>LISTEN监听</code>状态。客户端发送<strong>SYN包</strong><code>[SYN = 1; seq = x]</code> 到服务器，并进入<code>SYN_SENT同步已发送</code>状态，等待服务器确认。</li><li><strong>第二次握手</strong>：服务器收到<strong>SYN包</strong>即客户端的连接请求后，将发送ACK确认回应，同时自己也将发送一个SYN建立连接请求，即<strong>SYN+ACK包</strong>  <code>[SYN = 1; ACK = 1; seq = y; ack = x + 1]</code>，此时服务器进入<code>SYN_RECV同步</code>已收到状态。</li><li><strong>第三次握手</strong>：客户端收到服务器的 <strong>SYN+ACK包</strong>，做为回应需要向服务器发送确认包即<strong>ACK包</strong><code>[ACK = 1; seq = x + 1; ack = y + 1]</code>，在该包发送并接收完毕后，客户端与服务器都进入<code>ESTABLISHED建立连接</code>状态，至此连接建立成功。</li></ul><p><strong>注解</strong></p><p>最开始在客户端与服务端首次进行通信，都处于<code>CLOSED</code>状态，假设客户端主动打开，服务器被动打开，那么服务器进程会首先创建<strong>传输控制块TCB</strong>，时刻准备接收其他客户进程的连接请求，此时服务器便进入<code>LISTEN监听</code>状态。</p><p>第一次握手中<code>SYN = 1</code> 为<code>TCP Flags</code> 中的同步序号标志位，表示要与服务器建立连接请求。<strong>在连接请求中 SYN=1和ACK=0 表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认域即SYN=1和ACK=1</strong>，也就是说在收到对方的连接请求后如果同意连接都会向对方发送<code>ACK = 1</code> 进行确认反馈。这也就是在第二次与第三次的握手中都会有<code>ACK= 1</code>的原因。</p><p>第一次握手中的<code>seq = x</code> 是因为<code>Sequence Number</code>会初始化一个序号x，(x可以是任意的正整数值)，在第二次握手中服务器的报文中 <code>ack = x + 1</code> 即对<code>seq = x</code>的回应，表示期待下一次收到来自客户端的报文序号为 <code>x + 1</code>；之所以加1是因为<strong>前两次握手并不能传输数据，每次发包都会消耗掉一个序列号</strong>。第二次握手服务器回应客户端发送报文段同样会初始化一个 <code>Sequence Number</code>即<code>seq = y</code>。</p><h2 id="为什么需要三次握手才能建立连接？两次握手不行嘛？"><a href="#为什么需要三次握手才能建立连接？两次握手不行嘛？" class="headerlink" title="为什么需要三次握手才能建立连接？两次握手不行嘛？"></a>为什么需要三次握手才能建立连接？两次握手不行嘛？</h2><p>三次握手的主要目的是<strong>1、确认自己和对方的发送和接收都是正常的</strong>，从而保证了双方能够进行可靠通信。同时<strong>2、初始化<code>Sequence Number</code></strong>即上面的x与y。通过初始化的这个序号来保证在应用层接收到数据不会乱序，即TCP会根据这个序号来拼接数据。因此在第二次握手服务器发送给客户端初始化序号后，客户端还需要回发确认报文给服务器来告知其已经接收到并且连接正常。</p><p>如果改为了两次握手，在两次握手的设定下，服务器端在成功接受客户端的连接请求SYN后，向客户端发出ACK确定报文时，如果因为网络原因客户端没有接收到，则会一直等待服务器端的ACK报文，而服务器端则认为连接成功建立了，便开始向客户端发送数据。但是客户端因为没有收到服务器端的ACK报文，所以并不知道服务器的顺序号seq，则会认为连接未成功建立，忽略服务器发出的任何数据。如此客户端一直等待服务器端的ACK报文，而服务器端因为客户端一直没有接收数据，而不断地重复发送数据，从而造成死锁。</p><h2 id="针对TCP连接的安全问题：SYN洪泛攻击"><a href="#针对TCP连接的安全问题：SYN洪泛攻击" class="headerlink" title="针对TCP连接的安全问题：SYN洪泛攻击"></a>针对TCP连接的安全问题：SYN洪泛攻击</h2><p>SYN攻击属于DOS攻击的一种，它利用TCP协议缺陷，通过发送大量的半连接请求，耗费CPU和内存资源。SYN攻击除了能影响主机外，还可以危害路由器、防火墙等网络系统，事实上SYN攻击并不管目标是什么系统，只要这些系统打开TCP服务就可以实施。</p><p><strong>SYN攻击的原理</strong></p><p>在三次握手过程中，服务器发送SYN-ACK（确认收到客户端请求的连接）之后，收到客户端的ACK（第三个包）之前的TCP连接称为半连接(half-open connect).此时服务器处于<code>SYN_RECV（等待客户端相应）</code>状态，如果接收到客户端的ACK，则TCP连接成功，如果未接受到，则会重发请求直至成功。SYN攻击就是由’’攻击客户端” 在短时间内伪造大量不存在的IP地址，向服务器不断地发送SYN包，服务器回复确认包，并等待客户的确认，由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的SYN包将长时间占用未连接队列，影响了正常的SYN，目标系统运行缓慢，严重者引起网络堵塞甚至系统瘫痪。</p><p><strong>防范</strong></p><p>主要有两大类，一类是通过防火墙、路由器等过滤网关防护，另一类是通过加固TCP/IP协议栈防范.但必须清楚的是，SYN攻击不能完全被阻止，我们所做的是尽可能的减轻SYN攻击的危害，除非将TCP协议重新设计。</p><ul><li>SYN Cookies：该方案原理和 HTTP Cookies 技术类似，服务端通过特定的算法将半开连接信息编码成序列号或者时间戳，用作服务端给客户端的消息编号，随 SYN-ACK 消息一同返回给连接发起方，这样在连接建立完成前服务端不保存任何信息，直到发送方发送 ACK 确认报文并且服务端成功验证编码信息后，服务端才开始分配传输资源。若请求方是攻击者，则不会向服务端会 ACK 消息，由于未成功建立连接，因此服务端并没有花费任何额外的开销。</li></ul><h2 id="如果已经建立了连接，但是客户端突然出现故障了怎么办？"><a href="#如果已经建立了连接，但是客户端突然出现故障了怎么办？" class="headerlink" title="如果已经建立了连接，但是客户端突然出现故障了怎么办？"></a>如果已经建立了连接，但是客户端突然出现故障了怎么办？</h2><p><strong>保活机制keep-alive</strong></p><ul><li>向对方发送保活探测报文如果未收到响应报文则继续发送</li><li>尝试次数达到保活探测数仍未收到响应则中断连接</li></ul><p>TCP设有保活机制，在一段时间我们称为报活时间，即<code>KeepAliveTime</code> ,在这段时间内，连接处于非活动状态，开启保活功能的一端将向对方发送一个保活的探测报文，如果发送端没有收到响应报文，那么经过一个已经提前配置好的保活时间间隔将会继续发送保活探测报文，直到发送探测报文的次数达到保活探测数，这时对方主机将会被确认为不可达，连接也将被终止。</p><h1 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h1><p><strong>“挥手”是为了终止连接</strong>，即断开一个TCP连接时，需要客户端和服务器总共发出4个包以确定连接的断开。TCP四次挥手的过程如下：</p><img src="/2021/06/11/TCP%E9%82%A3%E4%BA%9B%E4%BA%8B/8.png" alt="5" style="zoom: 50%;"><ul><li><strong>第一次挥手</strong>：刚开始客户端与服务器都处于<code>ESTABLISHED连接状态</code>，假设客户端主动关闭，服务器被动关闭。客户端首先发送<strong>连接释放报文</strong><code>[FIN = 1; seq =m]</code>,并停止发送数据，主动关闭TCP连接，进入<code>FIN_WAIT_1终止等待1</code>状态，等待服务器的确认。</li><li><strong>第二次挥手</strong>：服务器收到连接释放报文后即发出 <strong>确认报文</strong> <code>[ACK = 1; seq = n; ack = m + 1]</code>，并进入<code>CLOSE_WAIT关闭等待</code>状态，此时TCP处于半关闭状态，客户端到服务器的连接释放。同时客户端收到服务器的确认后进入 <code>FIN_WAIT_2终止等待2</code> 状态，并等待服务器发出的连接释放报文。</li><li><strong>第三次挥手</strong>：当服务器的数据传输完毕后，服务器发出 <strong>连接释放报文</strong> <code>[FIN = 1; ACK = 1; seq = p; ack = m + 1]</code>,并进入<code>LAST_ACK最后确认</code>状态，等待客户端的最后确认。</li><li><strong>第四次挥手</strong>：客户端在收到服务器的连接释放报文段后，做为响应发出 <strong>确认报文</strong> <code>[ACK = 1; seq = m + 1; ack = p + 1]</code>, 并进入<code>TIME_WAIT时间等待</code>状态。服务器在收到来自客户端的确认报文段后便进入到<code>CLOSED连接断开</code> 状态，此时TCP未释放掉，客户端还需要经过<strong>时间等待计时器</strong>设置的时间<code>2MSL</code>后，才进入<code>CLOSED连接断开</code>状态，至此四次挥手结束TCP连接终止。</li></ul><p><strong>注解</strong></p><p>第一次挥手的连接释放报文 <code>[FIN = 1; seq =m]</code>,其中<code>FIN = 1</code>表示TCP Flags 中的<code>finish=1</code>表示发送方已经没有数据发送了即关闭本方的数据流，<code>seq = m</code> 其中m的值实际为<code>ESTABLISHED连接状态</code>下，<strong>客户端向服务器发送的最后一个数据报中最后一个数据的序号加1</strong>，而第二次挥手的确认报文中<code>seq = n</code>，n的值也同样是<code>ESTABLISHED连接状态</code>下服务器向客户端发送的最后一个数据报中最后一个数据的序号加1。TCP规定即使FIN报文段不携带任何数据，也要消耗掉一个序号。</p><p>在服务器处于<code>CLOSE_WAIT关闭等待</code>状态时，TCP服务器将通知高层的应用进程客户端要释放与服务器的连接了，这时候会处于半关闭状态，即客户端已经没有要发送 的数据了，但是服务器要发送数据客户端还是可以接收的，并且该状态将持续一段时间。</p><p>第三次挥手的连接释放报文 <code>[FIN = 1; ACK = 1; seq = p; ack = m + 1]</code>中，<code>seq = p</code>的p值表示在服务器处于<code>CLOSE_WAIT关闭等待</code>状态时向客户端发送的最后一个数据报中的最后一个数据的序号加1。</p><p>第四次挥手后客户端进入到<code>TIME_WAIT时间等待</code>状态，此时TCP连接还没有释放，必须经过<code>2*MSL</code>时间后，客户端撤销相应的TCB（保护程序）后，才能进入<code>CLOSED连接断开</code>状态。<code>MSL</code>即最长报文寿命，<code>RFC793</code>定义了<code>MSL</code>的值为2min，而Linux设置成了 30s，服务器在收到客户端的确认号后便立即进入<code>CLOSED连接断开</code>状态。可以看出，服务器结束TCP连接的时间要比客户端早一些。</p><h2 id="为什么要四次挥手？"><a href="#为什么要四次挥手？" class="headerlink" title="为什么要四次挥手？"></a>为什么要四次挥手？</h2><p>因为TCP是<strong>全双工</strong>的，所以在释放TCP连接时发送方和接收方都需要FIN报文和ACK报文， 当主动方在数据传送结束后发出连接释放的通知，由于被动方可能还有必要的数据要处理，所以会先返回 ACK 确认收到报文。当被动方也没有数据再发送的时候，则发出连接释放通知，对方确认后才完全关闭TCP连接。</p><h2 id="TIME-WAIT-为什么是-2MSL"><a href="#TIME-WAIT-为什么是-2MSL" class="headerlink" title="TIME_WAIT 为什么是 2MSL"></a>TIME_WAIT 为什么是 2MSL</h2><ul><li>确保有足够的时间让对方收到ACK包</li><li>避免新旧连接混淆</li></ul><p><code>TIME_WAIT时间等待</code>状态是用来确保有足够的时间让对端收到ACK包。如果被动关闭的那一方(服务器)没有收到ACK，就会触发被动端重发FIN报文。假如客户端发送完了ACK包就立即断开，当最后一条报文发出后丢失了，那么服务器端就不会接收到这一报文，每隔一段时间，服务器端会再次发出FIN报文，此时如果客户端已经断开了，那么就无法响应服务器的二次请求，这样服务器会继续发出FIN报文，客户端就会用 RST 包来响应服务端，这将会使得对方认为是有错误发生，因此不会正常关闭连接。所以需要设置一个时间段，如果在这个时间段内接收到了服务器端的再次请求，则代表客户端发出的ACK报文没有接收成功。反之，则代表服务器端成功接收响应报文，客户端比才进入<code>CLOSED连接断开</code>状态，此次连接成功关闭。之所以是<code>2*MSL</code> 是<strong>客户端发出ACK报文到服务器端的最大时间</strong> + <strong>服务器没有接收到ACK报文再次回发FIN的最大时间</strong> 刚好等于<code>2*MSL</code>。</p><p>同时为了避免新旧连接混淆，如果客户端在发出ACK报文段后就进入<code>CLOSED连接断开</code>状态，此时服务端相应的端口并没有关闭，若客户端在相同的端口立即建立新的连接，则有可能接收到上一次连接中残留的数据包，可能会导致不可预料的异常出现。</p><h2 id="服务器出现大量TIME-WAIT-状态会导致什么问题？如何解决？"><a href="#服务器出现大量TIME-WAIT-状态会导致什么问题？如何解决？" class="headerlink" title="服务器出现大量TIME_WAIT 状态会导致什么问题？如何解决？"></a>服务器出现大量TIME_WAIT 状态会导致什么问题？如何解决？</h2><p><strong>大量连接处于TIME_WAIT的原因</strong></p><p>我们考虑高并发短连接的业务场景，在高并发短连接的 TCP 服务器上，<strong>当服务器处理完请求后主动请求关闭连接</strong>，这样服务器上会有大量的连接处于 TIME_WAIT 状态，服务器维护每一个连接需要一个 socket，也就是每个连接会占用一个文件描述符，而文件描述符的使用是有上限的，如果持续高并发，会导致一些正常的 连接失败。</p><p>无论是客户端还是服务器主动关闭连接，从本质上来说，在高并发场景下主要关心的就是服务端的资源占用问题，而这也是采用 TCP 传输协议必须要面对的问题，其问题解决的出发点也是如何处理好服务质量和资源消耗之间的关系。</p><p><strong>解决方案</strong></p><p>服务器可以设置 SO_REUSEADDR 套接字选项来通知内核，如果端口被占用，但 TCP 连接位于 TIME_WAIT 状态时可以<strong>重用端口</strong>。如果你的服务器程序停止后想立即重启，而新的套接字依旧希望使用同一端口，此时 SO_REUSEADDR 选项就可以避免 TIME-WAIT 状态。也可以采用长连接的方式减少 TCP 的连接与断开，在长连接的业务中往往不需要考虑 TIME-WAIT 状态，但其实在长连接的业务中并发量一般不会太高。</p><h2 id="服务器出现大量CLOSE-WAIT状态的原因？-如何解决？"><a href="#服务器出现大量CLOSE-WAIT状态的原因？-如何解决？" class="headerlink" title="服务器出现大量CLOSE_WAIT状态的原因？ 如何解决？"></a>服务器出现大量CLOSE_WAIT状态的原因？ 如何解决？</h2><ul><li><p>客户端关闭socket连接，服务器忙于读写没有及时关闭连接</p></li><li><p>检查代码，特别是释放资源的代码；检查配置，特别是处理请求的线程配置</p></li></ul><p>在客户端发出连接释放报文之后并没有及时的收到来自服务器的ACK确认，即服务器没有检测到或者忘记要关闭连接，于是资源一直被服务器占用着，出现这种情况通常是程序中有bug，通常是某些连接没有及时释放导致的，或者某些配置如线程池中的线程数配置不合理，此时需要结合实际的业务去排查。</p><h1 id="TCP的快速打开-TFO"><a href="#TCP的快速打开-TFO" class="headerlink" title="TCP的快速打开(TFO)"></a>TCP的快速打开(TFO)</h1><p>TCP Fast Open是对TCP的一种简化握手手续的拓展，用于提高两端点间连接的打开速度，在TCP的三次握手过程中就传输实际有用的数据，以此来优化三次握手提高效率。</p><p><strong>请求Fast Open Cookie</strong></p><ul><li>首先客户端发送SYN给服务端，该数据包包含Fast Open选项，且该选项的Cookie为空，这表明客户端请求Fast Open Cookie；</li><li>支持TCP Fast Open的服务器生成Cookie，并将其置于SYN-ACK数据包中的Fast Open选项以发回客户端；</li><li>客户端收到SYN-ACK后，缓存Fast Open选项中的Cookie</li></ul><p><strong>实现TCP Fast Open</strong></p><ul><li>客户端发送Cookie+SYN+HTTP请求，该数据包包含数据以及此前记录的Cookie；</li><li>如果Cookie有效，服务器将在SYN-ACK数据包中对SYN和数据进行确认，服务器随后将数据递送至相应的应用程序，并返回HTTP响应，否则服务器将丢弃SYN数据包中包含的数据，且其随后发出的SYN-ACK数据包将仅确认SYN的对应序列号；</li><li>客户端回发ACK确认</li></ul><p><strong>注解</strong></p><p>TFO 的优势并不在与首轮三次握手，而在于后面的握手，在拿到客户端的 Cookie 并验证通过以后，可以<strong>直接返回 HTTP 响应</strong>，充分利用了1 个<strong>RTT</strong>(Round-Trip Time，往返时延)的时间<strong>提前进行数据传输</strong>。</p><h1 id="TCP定时器"><a href="#TCP定时器" class="headerlink" title="TCP定时器"></a>TCP定时器</h1><p>TCP中有七种计时器</p><p><strong>建立连接定时器</strong>：该定时器是在建立 TCP 连接的时候使用的，在 TCP 三次握手的过程中，发送方发送 SYN 时，会启动一个定时器（默认为 3 秒），若 SYN 包丢失了，那么 3 秒以后会重新发送 SYN 包，直到达到重传次数。</p><p><strong>重传定时器</strong>：该计时器主要用于 TCP 超时重传机制中，当TCP 发送报文段时，就会创建特定报文的重传计时器，并可能出现两种情况：</p><ul><li>若在计时器截止之前发送方收到了接收方的 ACK 报文，则撤销该计时器；</li><li>若计时器截止时间内并没有收到接收方的 ACK 报文，则发送方重传报文，并将计时器复位；</li></ul><p><strong>坚持计时器</strong>：我们知道 TCP 通过让接受方指明希望从发送方接收的数据字节数（窗口大小）来进行流量控制，当接收端的接收窗口满时，接收端会告诉发送端此时窗口已满，请停止发送数据。此时发送端和接收端的窗口大小均为0，直到窗口变为非0时，接收端将发送一个 确认 ACK 告诉发送端可以再次发送数据，但是该报文有可能在传输时丢失。若该 ACK 报文丢失，则双方可能会一直等待下去，为了避免这种死锁情况的发生，发送方使用一个坚持定时器来周期性地向接收方发送探测报文段，以查看接收方窗口是否变大。</p><p><strong>延迟应答计时器</strong>：延迟应答也被称为捎带 ACK，这个定时器是在延迟应答的时候使用的，为了提高网络传输的效率，当服务器接收到客户端的数据后，不是立即回 ACK 给客户端，而是等一段时间，这样如果服务端有数据需要发送给客户端的话，就可以把数据和 ACK 一起发送给客户端了。</p><p><strong>保活定时器</strong>：该定时器是在建立 TCP 连接时指定 SO_KEEPLIVE 时才会生效，当发送方和接收方长时间没有进行数据交互时，该定时器可以用于确定对端是否还活着。</p><p><strong>FIN_WAIT_2 定时器</strong>：当主动请求关闭的一方发送 FIN 报文给接收端并且收到其对 FIN 的确认 ACK后进入 FIN_WAIT_2状态。如果这个时候因为网络突然断掉、被动关闭的一端宕机等原因，导致请求方没有收到接收方发来的 FIN，主动关闭的一方会一直等待。该定时器的作用就是为了避免这种情况的发生。当该定时器超时的时候，请求关闭方将不再等待，直接释放连接。</p><p><strong>TIME_WAIT 定时器</strong>：我们知道在 TCP 四次挥手中，发送方在最后一次挥手之后会进入 TIME_WAIT 状态，不直接进入 CLOSE 状态的主要原因是被动关闭方万一在超时时间内没有收到最后一个 ACK，则会重发最后的 FIN，2 MSL（报文段最大生存时间）等待时间保证了重发的 FIN 会被主动关闭的一段收到且重新发送最后一个 ACK 。还有一个原因是在这 2 MSL 的时间段内任何迟到的报文段会被接收方丢弃，从而防止老的 TCP 连接的包在新的 TCP 连接里面出现。</p><h1 id="TCP超时重传"><a href="#TCP超时重传" class="headerlink" title="TCP超时重传"></a>TCP超时重传</h1><p>发送方在发送一次数据后就开启一个定时器，在一定时间内如果没有得到发送数据包的 ACK 报文，那么就重新发送数据，在达到一定次数还没有成功的话就放弃重传并发送一个复位信号。</p><p><strong>RTT与RTO</strong></p><p>RTT：发送一个数据包到收到对应的ACK，所花费的时间</p><p>RTO：重传时间间隔，TCP在发送一个数据包之后会启动一个重传定时器，RTO即为这个定时器的重传时间。</p><p>由于RTO是本次发送当前数据包所预估的超时时间，所以RTO需要一个好的算法来统计，以更好的预测本次的超时时间，RTO不是固定写死的配置，而是经过RTT计算出来的。有了RTT才能计算RTO。基于RTO才有了<strong>确认重传机制</strong>，才能支撑起TCP的滑动窗口。</p><h1 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h1><p> 管理<strong>点对点</strong>的数据传输速率，防止<strong>快发送方</strong>压倒<strong>慢接收方</strong></p><p>TCP 中利用可变长的滑动窗口机制实现对发送方的流量控制。对于发送端和接收端而言，TCP 需要把发送的数据放到<strong>发送缓存区</strong>, 将接收的数据放到<strong>接收缓存区</strong>。TCP报文头中的 <strong>Window</strong> 用于接收方告诉发送方自己还有多少缓冲区可以接收数据。发送方根据接收方的处理能力来发送数据，不会导致接收方接收不过来，如果对方的接收缓存区满了，就不能再继续发送了，这便是流量控制。</p><h2 id="TCP滑动窗口"><a href="#TCP滑动窗口" class="headerlink" title="TCP滑动窗口"></a>TCP滑动窗口</h2><p><strong>TCP使用滑动窗口做流量控制和乱序重排</strong></p><ul><li>提供TCP的可靠性</li><li>提供TCP的流量控制</li></ul><p>TCP将数据分割成段进行发送，出于效率和传输速度的考虑，我们不可能一段一段的去发送，等到上一报文段被接收到并回发确认后再发送下一段，这样效率是非常低的。我们要想实现对数据的批量转发，TCP必须要解决可靠传输和包乱序问题，所以TCP需要了解网络中实际的数据处理带宽或数据处理速度，这样才不会引起网络拥塞而丢包。</p><h2 id="滑动窗口数据的计算过程"><a href="#滑动窗口数据的计算过程" class="headerlink" title="滑动窗口数据的计算过程"></a><strong>滑动窗口数据的计算过程</strong></h2><img src="/2021/06/11/TCP%E9%82%A3%E4%BA%9B%E4%BA%8B/3.png" alt="3" style="zoom: 67%;"><p><strong>相关参数</strong></p><p><strong><code>LastByteAcked</code>:</strong> 指向收到的连续最大的ACK的位置，即从左端算起连续已经被接收端的程序收到并发送ACK回值确认的<code>seq</code>；</p><p><strong><code>LastByteSent</code>:</strong> 指向已经发送的最后一个字节的位置，该位置为已经发送但是还没有收到来自接收端的ACK回值确认；</p><p><strong><code>LastByteWritten</code>:</strong> 指向上层应用已写完的最后一个字节的位置，即发送端已经准备好的需要发送的最新的数据段；</p><p><strong><code>LastByteRead</code>:</strong> 指向接收端上层应用已经读完的最后一个字节的位置，即已经收到处理并做ACK回值确认的最后一个字节处；</p><p><strong><code>NextByteExpected</code>:</strong> 指向已经收到的连续最大的<code>seq</code> 位置，即已经收到但没有做回值确认；</p><p><strong><code>LastByteRcvd</code>:</strong> 指向已收到的最后一个字节的位置；与<strong><code>NextByteExpected</code></strong> 间的空缺是因为一些<code>seq</code>因为差错而没有准确到达；</p><p><strong><code>MaxRcvBuffer</code>:</strong> 接收方能够接收的最大数据量 即接收方的缓存区大小</p><p><strong><code>AdvertisedWindow</code>: 接收方缓冲区还能处理的数据量，该值即为TCP报文头中的 <code>Window</code> 中所返回的值；</strong></p><p><strong><code>EffectiveWindow</code>: 发送方窗口内还允许发送的数据的大小，即除去已发送没确认的还能发送的数据大小；</strong></p><p><strong>相关公式</strong></p><ul><li><code>AdvertisedWindow</code>  = <code>MaxRcvBuffer</code> - (<code>LastByteRcvd</code> - <code>LastByteRead</code>)</li><li><code>EffectiveWindow</code> = <code>AdvertisedWindow</code> - (<code>LastByteSent</code> - <code>LastByteAcked</code>)</li></ul><p><strong>注解</strong></p><p><code>LastByteRcvd</code> - <code>LastByteRead</code>表示接收端缓存区已经接受到的数据或者 <strong>为还没有接受到的数据预留出来的一些空间</strong>(如空缺处)，当前这些空间以及该占据了一些缓存，我们用接收方能够允许的最大缓存数减去已占据的缓存就得了接收方还能够接收的数据量。</p><p><code>LastByteSent</code> - <code>LastByteAcked</code> 表示发送端已经发送出去的数据段，这些数据段很可能已经到达接收方或者还在传输的过程中，所以我们要保证<code>LastByteSent</code> - <code>LastByteAcked</code> &lt;= <code>AdvertisedWindow</code> 即 <strong>已发送且待确认的数据量要小于接收方的<code>Window</code>大小</strong>。自然发送方窗口还可以发送的数据量的大小 <code>EffectiveWindow</code> 即为它们的差值。<code>AdvertisedWindow</code> - (<code>LastByteSent</code> - <code>LastByteAcked</code>)；</p><h2 id="TCP滑动窗口的基本原理"><a href="#TCP滑动窗口的基本原理" class="headerlink" title="TCP滑动窗口的基本原理"></a><strong>TCP滑动窗口的基本原理</strong></h2><p>TCP 滑动窗口分为两种: <strong>发送窗口</strong>和<strong>接收窗口</strong>。</p><p><strong>TCP会话的发送窗口</strong></p><img src="/2021/06/11/TCP%E9%82%A3%E4%BA%9B%E4%BA%8B/4.png" alt="4" style="zoom:80%;"><p>对于TCP会话的发送方，任何时候在其发送缓存区中的数据都可以分为以下四种：</p><ul><li><code>Sent and Acknowledged</code>:已经发送并且得到端的回应的；</li><li><code>Sent BUT NOT Yet Acknowledged</code>:已经发送但还没有接收到端的回应；</li><li><code>Not Sent Recipient Ready to Receive</code>:未发送但对端允许发送；</li><li><code>Not Sent Recipient NOT Ready to Receive</code>:未发送但是达到了<code>Window</code>的大小，对端不允许发送的数据；</li></ul><p>发送窗口：<code>Sent BUT NOT Yet Acknowledged</code> + <code>Not Sent Recipient Ready to Receive</code></p><p><strong>TCP会话的接收窗口</strong></p><img src="/2021/06/11/TCP%E9%82%A3%E4%BA%9B%E4%BA%8B/5.png" alt="5" style="zoom:80%;"><p>对于TCP的接收方来讲，在任一时刻它的接收缓存区中数据会存在三种状态：</p><p><code>Received and Acknowledged</code>:已接收并且已发送回值的状态；</p><p><code>Not Yet Received,Transmitter Permitted To Send</code>:未接收但是可以接收(准备接收)；</p><p><code>Not Yet Received,Transmitter May Not Sent</code>: 未接收但是不能接收(达到了窗口的阈值)；</p><p>接收窗口：由于ACK由TCP栈回复，默认没有应用延迟的，不存在已接收但未回复ACK的状态。其中<code>Not Yet Received,Transmitter Permitted To Send</code>未接收并且准备接收的部分为接收方的接收窗口。</p><p><strong>原理总结</strong></p><p>TCP最基本的传输可靠性来源于 <strong>确认重传机制</strong>，TCP滑动窗口的可靠性也是建立在确认重传的基础上的。发送窗口只有收到了接收方对于本段发送窗口内字节的ACK确认才会移动发送窗口的左边界，接收方只有在前面所有数据段都确认的情况下才会移动左边界。当在前面还有字节未接收但收到后面字节的情况下(即出现了空位)，窗口也不会移动并不会对后续字节进行确认，以此确保发送端会对这些数据进行重传。同时滑动窗口的大小可以根据一定的策略动态的调整，<strong>应用会根据自身处理能力的变化通过对本端TCP接收窗口的大小的控制，来实现对发送端进行流量控制</strong>。</p><h2 id="如果接收方滑动窗口满了，发送方怎么办？"><a href="#如果接收方滑动窗口满了，发送方怎么办？" class="headerlink" title="如果接收方滑动窗口满了，发送方怎么办？"></a>如果接收方滑动窗口满了，发送方怎么办？</h2><p>基于 TCP 流量控制中的滑动窗口协议，我们知道接收方返回给发送方的 ACK 包中会包含自己的接收窗口大小，若接收窗口已满，此时接收方返回给发送方的接收窗口大小为 0，此时发送方会等待接收方发送的窗口大小直到变为非 0 为止，然而，接收方回应的 ACK 包是存在丢失的可能的，为了防止双方一直等待而出现死锁情况，此时就需要坚持计时器来辅助发送方周期性地向接收方查询，以便发现窗口是否变大，当发现窗口大小变为非零时，发送方便继续发送数据。</p><h1 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h1><p><strong>网络拥塞</strong>: 太多的源端口想以过高的速率发送数据，导致<strong>网络</strong>来不及处理，网络性能变差。如路由器缓存溢出，导致丢包等现象。若出现拥塞而不进行控制，整个网络的吞吐量将随输入负荷的增大而下降。</p><p><strong>判断网络拥塞的依据</strong> : 没有按时收到应当到达的确认报文，即发生了重传。</p><p><strong>拥塞崩溃</strong> : “ 拥塞崩溃 ” 是为何要 拥塞控制 或者 限制有效交流 的原因。拥塞崩溃通常发生在 进入网络的通讯 超出 离开网络的带宽 这样的网络瓶颈下。本地局域网和广域网之间的连接点是常见的瓶颈。</p><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a><strong>拥塞控制</strong></h2><p>调解通讯网络的通讯入口，为了避免由超额认购导致的拥塞崩塌；</p><p>控制发送者发送数据进入<strong>网络</strong>的速率，使数据流保持在引发网络崩溃的水平之下；</p><h2 id="TCP-流量控制-VS-TCP-拥塞控制"><a href="#TCP-流量控制-VS-TCP-拥塞控制" class="headerlink" title="TCP 流量控制 VS TCP 拥塞控制"></a>TCP 流量控制 VS TCP 拥塞控制</h2><p>拥塞控制 防止发送者发送太快太多使<strong>网络</strong>无法应对，关注的是两节点之间的<strong>连接</strong></p><p>流量控制 防止发送者发送太快太多使<strong>接收者</strong>无法应对，关注的是另一个<strong>节点</strong></p><h2 id="拥塞控制算法"><a href="#拥塞控制算法" class="headerlink" title="拥塞控制算法"></a><strong>拥塞控制算法</strong></h2><ul><li><code>slow-start</code> 慢开始</li><li><code>congestion avoidance</code>拥塞避免</li><li><code>fast retransmit</code>快重传</li><li><code>fast recovery</code> 快恢复</li></ul><p><strong>相关概念</strong></p><ul><li><code>cwnd</code>:拥塞窗口，其值取决于网络的拥塞程度，动态变化；</li><li><code>rwnd</code>: 接收窗口，接收端的流量控制；</li><li><code>swnd</code>: 发送窗口-&gt; <code>swnd</code> = min[<code>rwnd</code>, <code>cwnd</code>];</li><li><code>ssthresh</code>: 慢开始门限状态变量；</li></ul><h3 id="慢启动-cwnd-lt-ssthresh"><a href="#慢启动-cwnd-lt-ssthresh" class="headerlink" title="慢启动 (cwnd &lt; ssthresh)"></a>慢启动 (<code>cwnd</code> &lt; <code>ssthresh</code>)</h3><p>刚开始进入传输数据的时候，你是不知道现在的网路到底是稳定还是拥堵的，如果做的太激进，发包太急，那么疯狂丢包，造成雪崩式的网络灾难。拥塞控制首先就是要采用一种保守的慢启动算法来慢慢地适应整个网路。</p><ol><li>三次握手后，双发宣告自己的接收窗口<code>rwnd</code>大小；</li><li>初始化 拥塞窗口<code>cwnd</code> 大小，一般位一个<code>MSS</code>,初始化 <code>ssthresh</code>慢启动门限 ，大多数TCP实现中 <code>ssthresh</code> = 65536Byte;</li><li><code>cwnd</code> 呈指数增长，当收到ACK确认后 拥塞窗口就翻倍；</li><li>当<code>cwnd</code> &gt;= <code>ssthresh</code> 时，切换为拥塞避免算法；</li></ol><h3 id="拥塞避免-cwnd-gt-ssthresh"><a href="#拥塞避免-cwnd-gt-ssthresh" class="headerlink" title="拥塞避免  (cwnd &gt;ssthresh)"></a>拥塞避免  (<code>cwnd</code> &gt;<code>ssthresh</code>)</h3><p>当<code>cwnd</code>到达了慢启动阈值，就不能无止境的翻倍下去了，否则迟早要出事的。这时候就需要拥塞避免算法来收着涨了。</p><ol><li>线性增长，每个<code>RTT</code> ，<code>cwnd</code> 增加1*<code>MSS</code></li><li>只要不出现ACK异常就继续上述操作</li></ol><p><strong>问题引入：前面两个机制都是在没有检测到拥塞的情况下，那么当出现拥赛,<code>cwnd</code> 该如何调整呢？</strong></p><ol><li>重传计时器超时间  Timeout ，判断网络出现了拥塞；</li><li>将<code>ssthresh</code>的值更新为发生拥塞时的 <code>cwnd</code> 的一半</li><li>拥塞窗口 <code>cwnd</code> 重置成  1 <code>MSS</code></li><li>整完后重新进行慢开始算法</li><li>当  <code>cwnd</code>的值又增加到<code>ssthresh</code>时,再次更新到 拥塞避免算法</li></ol><p>上述两种算法为1988年提出的TCP Tahoe版本，但是有时个别报文段会在网络中丢失，但是实际网络并未发生拥塞，这将导致发送发超时重传，并误以为网络发生了拥塞，所以发送方错误地启动了慢开始算法，并把拥塞窗口重置为最小值 1，因而降低了传输效率。所以为了优化<strong>由于错误判断拥塞而导致的效率低下的问题</strong>，1990年又增加了两种算法，即TCP Reno版本 快重传和快恢复的。</p><p>TCP的拥塞控制流程如下：</p><img src="/2021/06/11/TCP%E9%82%A3%E4%BA%9B%E4%BA%8B/6.png" alt="6" style="zoom:80%;"><h3 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h3><ol><li>要求接收方不要等待自己发送数据时才进行<strong>捎带确认</strong>，而是要立即发送确认；</li><li>即使收到失序的报文段也要立即发出对已收到报文段的<strong>重复确认</strong>；</li><li>当发送方一旦<strong>收到3个连续的重复确认</strong>，就将相应报文段立即重传，而不是等该报文段的重传计时器超时再重传。</li></ol><h3 id="快恢复"><a href="#快恢复" class="headerlink" title="快恢复"></a>快恢复</h3><ol><li>收到了3个连续的重复确认后，知道只是出现了丢失个别报文段并不是出现网络拥塞；</li><li>并不启动慢开始算法，而是执行快速恢复算法；</li><li>将 <code>ssthresh</code> 与 <code>cwnd</code> 都调整为当前窗口<code>cwnd</code>的一半 -&gt; <code>ssthresh</code> = <code>cwnd</code> / <code>2</code>； <code>cwnd</code> = <code>cwnd</code> / 2;</li><li>也有快速实现是把拥塞窗口 <code>cwnd</code> 的值再增大些，调整为 <code>cwnd</code> = <code>ssthresh</code> + 3</li><li>接着执行拥塞避免算法，线性增大 <code>cwnd</code></li></ol><p><strong>注解</strong></p><p><code>cwnd</code> = <code>ssthresh</code> + 3 =&gt; 既然发送方收到了3个连续的重复确认，就表明3个数据已经离开了网络，这3个报文段不再消耗网络资源而是停留在接收方的接收缓冲区中，可见现在网络中不再是堆积了报文段，反而是减少了3个报文段，因此可以适当把拥塞窗口扩大些。</p><p>快速恢复和拥塞避免的主要区别是在遇到报文丢失的场景时，拥塞避免会直接将<code>cwnd</code>置为1，而快速恢复则是先执行快速重传，然后将<code>cwnd</code>减半。</p><p><strong>参考资料</strong></p><ul><li>计算机网络自顶向下方法</li><li><a href="https://leetcode-cn.com/leetbook/read/networks-interview-highlights/ek40dd/" target="_blank" rel="noopener">LeetCode-传输层</a></li><li><a href="https://www.bilibili.com/video/BV1FE411C7dk?from=search&seid=5749281866247807566" target="_blank" rel="noopener">bilibili-TCP滑动窗口动态演示视频</a></li><li><a href="https://www.bilibili.com/video/BV1L4411a7RN?from=search&seid=1102706201373675068" target="_blank" rel="noopener">bilibili-TCP的拥塞控制讲解</a></li><li><a href="https://draveness.me/whys-the-design-udp-minimum-header/" target="_blank" rel="noopener">draveness-为什么 UDP 头只有 8 个字节</a></li><li><a href="https://draveness.me/whys-the-design-dns-udp-tcp/" target="_blank" rel="noopener">draveness-为什么 DNS 使用 UDP 协议</a></li><li><a href="https://juejin.cn/post/6844904070889603085" target="_blank" rel="noopener">掘金-TCP灵魂之问</a></li><li><a href="https://juejin.cn/post/6844904005315854343" target="_blank" rel="noopener">掘金-三次握手和四次挥手以及TCP标志位的详细介绍</a></li><li><a href="https://blog.csdn.net/h2604396739/article/details/85238286?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.channel_param" target="_blank" rel="noopener">csdn-慢启动、拥塞避免、快速重传、快速恢复</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;运输层协议为运行在不同主机上的应用进程之间的逻辑通信；&lt;/p&gt;
&lt;p&gt;TCP与UDP为两种传输层的协议，TCP(传输控制协议)为调用它的应用程序提供一个可靠的、面向连接的服务，而UDP(用户数据协议)为调用它的应用程序提供一种不可靠的、无连接的服务；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP与UDP最基本的责任是将两个端系统间IP的交付服务扩展为运行在端系统上的两个进程之间的交付服务&lt;/strong&gt;；&lt;/p&gt;</summary>
    
    
    
    
    <category term="计网" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络概述</title>
    <link href="http://yoursite.com/2021/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2021/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</id>
    <published>2021-06-07T05:40:28.000Z</published>
    <updated>2021-06-11T03:42:50.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="协议层次及服务类型"><a href="#协议层次及服务类型" class="headerlink" title="协议层次及服务类型"></a>协议层次及服务类型</h1><h2 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h2><p>OSI 模型全称为开放式通信系统互连参考模型，是国际标准化组织 ( ISO ) 提出的一个试图使各种计算机在世界范围内互连为网络的标准框架。OSI 将计算机网络体系结构划分为七层，每一层实现各自的功能和协议，并完成与相邻层的接口通信。OSI 的服务定义详细说明了各层所提供的服务。某一层的服务就是该层及其下各层的一种能力，它通过接口提供给更高一层。各层所提供的服务与这些服务是怎么实现的无关。OSI参考模型并没有提供一个可以实现的方法，只是描述了一些概念，用来协调进程间通信标准的制定。即OSI参考模型并不是一个标准，而是一个在制定标准时所使用的概念模型框架。</p><a id="more"></a><p><img src="/2021/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/1.png" alt="1"></p><ul><li>物理层：机械、电子、定时接口通信信道上的原始比特流传输 -<strong>-比特(Bit)</strong></li><li>数据链路层：物理寻址、同时将原始比特流变成逻辑传输路线–<strong>帧(Frame)</strong></li><li>网络层：控制子网的运行，如逻辑编址、分组传输、路由选择–<strong>分组、数据包(Packet)</strong></li><li>传输层：将数据进行分割，并将这些数据交给网络层且保证这些数据段有效的到达对端 –<strong>数据段(Segment)</strong> </li><li>会话层：不同机器上的用户之间建立及管理会话 –<strong>数据(data)</strong></li><li>表示层：信息的语法语义以及它们的关系，如加密、解密、转换翻译、压缩解压缩 –<strong>数据(data)</strong></li><li>应用层 ：定义了应用进程之间的交互规则，通过不同的应用层协议为不同的网络应用提供服务 –<strong>消息/报文(message)</strong></li></ul><p><strong>物理层</strong>：首先要解决两台物理机之间的通信需求，具体就是机器A往机器B发送比特流，机器B能收到这些比特流。物理层主要定义了物理设备的标准，如网线的类型、光纤的接口类型、各种传输介质的传输速率等，主要作用是传输比特流，即 01010二进制数据，将它们转化成电流强弱来进行传输，到达目的主机后再转化成 010101的机器码，即数模转换与模数转换。网卡就工作在这一层。</p><p><strong>数据链路层</strong>：在传输比特流的过程中会产生差错、数据传输不完整的可能，因此数据链路层应运而生。数据链路层定义了如何格式化数据以进行传输，以及如何控制对物理介质的访问。通常还提供错误检测和纠正以确保数据传输的可靠性。本层将比特数据组成了帧，其中交换机工作在这一层，将帧解码并根据帧中包含的信息把数据发送到正确的接收方。</p><p><strong>网络层</strong>：随着网络节点的不断增多，点对点通信时是需要经过多个节点的。那么如何找到最佳节点、如何选择最佳路径便成为了首要的需求，此时便有了网络层。网络层的首要功能是将网络地址翻译成对应的物理地址、并决定如何将数据从发送方路由到接收方。网络层通过综合考虑发送优先权、网络拥赛程度、服务质量以及可选路由的花费来决定从一个网络节点A到另一个网络中节点B的最佳路径。由于网络层处理并智能指导数据发送、 路由选择网络各段，所以路由器属于网络层，此层的数据我们成为数据包。</p><p><strong>传输层</strong>：随着网络通信需求的进一步加大，通信过程中需要发送大量的数据，如海量的文件传输，可能需要很长时间，而网络在通信的过程中会中断好多次，此时为了保证传输大量文件时的准确性，需要对发送方发送出去的数据进行切片，切割为一个个的段落即 <strong>Segment</strong>进行发送。那么便出现了数据段丢失、要不要重传、每个段落要按照顺序到达嘛等问题。传输层解决了主机间的数据传输、传输质量等问题。该层为OSI模型中最重要的一层。传输协议同时进行流量控制，或是基于接收方可接收数据的快慢程度规定适当的发送速率。除此以外传输层按照网络能处理的最大尺寸将数据分割成较小的数据片。同时对每一个数据片安排一个序列号，以便数据到达接收方节点的传输层时能以正确的顺序重组，该过程称为排序。</p><p><strong>会话层</strong>：现在我们已经保证给正确的计算机发送正确的封装过后的信息，但是用户的体验并不要。因为每次都需要我们手动的去调用TCP打包、然后调用IP协议去找路由。所以我们要建立一个自动收发包，自动寻址的功能，于是便有了会话层。会话层的作用即建立和管理应用程序之间的通信。</p><p><strong>表示层</strong>：现在我们可以保证了应用程序可以自动的收发包和寻址，但是对于不同系统之间的通信仍然存在语法的问题。例如用Linux给 windows发包，exe文件并不能在Linux下执行，shell 在windows下也不能执行，此时便出现了表示层。表示层帮我们解决了不同系统间的通信语法问题，在表示层数据将按照网络能理解的方案进行格式化，这种格式化也因所使用的网络的类型不同而不同。</p><p><strong>应用层</strong>：此时虽然发送方知道自己发送的是什么，转换成字节数组后有多长，但是接收方并不知道，所以应用层的网络协议诞生了，应用层规定发送方和接收方必须使用一个固定长度的消息头，消息头必须使用某种固定的组成，而且消息头中必须记录消息体的长度等一系列信息，以方便接收方能够正确的解析发送方发送过来的数据。</p><h2 id="TCP-IP参考模型"><a href="#TCP-IP参考模型" class="headerlink" title="TCP/IP参考模型"></a>TCP/IP参考模型</h2><p>TCP/IP参考模型首先由ARPANET所使用的网络体系结构，后来该结构被美国国防部用来做为计算机网络的标准。在其推动下，市场上绝大多数的厂商也以该标准为主，用以商用。基于 TCP/IP 的参考模型将协议分成四个层次，如上图所示，它们分别是：网络接口层、网络层、传输层、和应用层。</p><p><strong>应用层</strong>：TCP/IP 模型将 OSI 参考模型中的会话层、表示层和应用层的功能合并到一个应用层实现，通过不同的应用层协议为不同的应用提供服务。例如：FTP、Telnet、DNS、SMTP 等。</p><p><strong>传输层</strong>：该层对应于 OSI 参考模型的传输层，为上层实体提供源端到对端主机的通信功能。传输层定义了两个主要协议：传输控制协议（TCP）和用户数据报协议（UDP）。其中面向连接的 TCP 协议保证了数据的传输可靠性，面向无连接的 UDP 协议能够实现数据包简单、快速地传输。</p><p><strong>网际互联层</strong>：网际互联层对应 OSI 参考模型的网络层，主要负责相同或不同网络中计算机之间的通信。在网际互联层， IP 协议提供的是一个不可靠、无连接的数据报传递服务。该协议实现两个基本功能：寻址和分段。根据数据报报头中的目的地址将数据传送到目的地址，在这个过程中 IP 负责选择传送路线。除了 IP 协议外，该层另外两个主要协议是互联网组管理协议（IGMP）和互联网控制报文协议（ICMP）。</p><p><strong>网络接入层</strong>：网络接入层的功能对应于 OSI 参考模型中的物理层和数据链路层，它负责监视数据在主机和网络之间的交换。事实上，TCP/IP 并未真正描述这一层的实现，而由参与互连的各网络使用自己的物理层和数据链路层协议，然后与 TCP/IP 的网络接入层进行连接，因此具体的实现方法将随着网络类型的不同而有所差异。</p><h2 id="TCP-IP-五层参考模型"><a href="#TCP-IP-五层参考模型" class="headerlink" title="TCP/IP 五层参考模型"></a>TCP/IP 五层参考模型</h2><p>五层体系的协议结构是综合了 OSI 和 TCP/IP 优点的一种协议，包括<strong>应用层、传输层、网络层、数据链路层和物理层</strong>。五层协议的体系结构只是为介绍网络原理而设计的，实际应用还是 TCP/IP 四层体系结构。</p><h2 id="比较-TCP-IP-参考模型与-OSI-参考模型"><a href="#比较-TCP-IP-参考模型与-OSI-参考模型" class="headerlink" title="比较 TCP/IP 参考模型与 OSI 参考模型"></a>比较 TCP/IP 参考模型与 OSI 参考模型</h2><p><strong>共同点</strong>：</p><ul><li>都采用了层次结构的概念</li><li>都能够提供面向连接和无连接的通信服务机制</li></ul><p><strong>不同点</strong>：</p><ul><li>OSI 采用了七层模型，而 TCP/IP 是四层</li><li>OSI 是一个在协议开发前设计的、有清晰概念的模型；TCP/IP 是先有协议集然后建立的、事实上得到广泛应用的弱模型，功能描述和实现细节混在一起</li><li>TCP/IP 一开始就提出面向连接和无连接服务，而 OSI 一开始只强调面向连接服务，直到很晚才开始制定无连接的服务标准。</li></ul><h2 id="数据如何在各层之间传输【数据的封装过程】"><a href="#数据如何在各层之间传输【数据的封装过程】" class="headerlink" title="数据如何在各层之间传输【数据的封装过程】"></a>数据如何在各层之间传输【数据的封装过程】</h2><p>在发送主机端，一个应用层报文被传送到运输层。在最简单的情况下，运输层收取到报文并附上附加信息，该首部将被接收端的运输层使用。应用层报文和运输层首部信息一道构成了运输层报文段。附加的信息可能包括：允许接收端运输层向上向适当的应用程序交付报文的信息以及差错检测位信息。该信息让接收端能够判断报文中的比特是否在途中已被改变。运输层则向网络层传递该报文段，网络层增加了如源和目的端系统地址等网络层首部信息，生成了网络层数据报。该数据报接下来被传递给链路层，在数据链路层数据包添加发送端 MAC 地址和接收端 MAC 地址后被封装成数据帧，在物理层数据帧被封装成比特流，之后通过传输介质传送到对端。</p><img src="/2021/06/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/3.png" alt="3" style="zoom:80%;"><h1 id="TCP-IP-协议群"><a href="#TCP-IP-协议群" class="headerlink" title="TCP/IP 协议群"></a>TCP/IP 协议群</h1><table><thead><tr><th align="left">OSI 七层概念模型</th><th align="center">TCP/IP 四层参考模型</th><th>对应的网络协议</th></tr></thead><tbody><tr><td align="left">应用层（Application</td><td align="center"></td><td>HTTP, TFTP, FTP, NFS, WAIS, SMTP, Telnet, DNS, SNMP</td></tr><tr><td align="left">表示层（Presentation）</td><td align="center">应用层</td><td>TIFF, GIF, JPEG, PICT</td></tr><tr><td align="left">会话层（Session）</td><td align="center"></td><td>RPC, SQL, NFS, NetBIOS, names, AppleTalk</td></tr><tr><td align="left">传输层（Transport)</td><td align="center">传输层</td><td>TCP, UDP</td></tr><tr><td align="left">网络层（Network）</td><td align="center">网络层</td><td>IP, ICMP, ARP, RARP, RIP, IPX</td></tr><tr><td align="left">数据链路层（Data Link）</td><td align="center"></td><td>FDDI, Frame Relay, HDLC, SLIP, PPP</td></tr><tr><td align="left">物理层（Physical）</td><td align="center">网络接口层</td><td>EIA/TIA-232, EIA/TIA-499, V.35, 802.3</td></tr></tbody></table><p><strong>各层的常见协议详解如下：</strong></p><table><thead><tr><th align="center"><strong>协议</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td align="center"><strong>HTTP</strong></td><td>超文本传输协议（HyperText Transfer Protocol）</td></tr><tr><td align="center">FTP</td><td>文件传输协议（File Transfer Protocol）用于在客户端和服务器之间进行文件传输</td></tr><tr><td align="center">SMTP</td><td>简单邮件传输协议（Simple Mail Transfer Protocol）是一个在网络上传输电子邮件的标准</td></tr><tr><td align="center">DNS</td><td>域名系统（Domain Name System）是域名和 IP 地址相互映射的分布式数据库</td></tr><tr><td align="center">SSH</td><td>安全外壳协议（Secure Shell）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境</td></tr><tr><td align="center">DHCP</td><td>动态主机配置协议（Dynamic Host Configuration Protocol）的主要作用是集中管理、动态分配 IP 地址提升地址的使用率</td></tr><tr><td align="center"><strong>TCP</strong></td><td>传输控制协议（Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议</td></tr><tr><td align="center">UDP</td><td>用户数据报协议（User Datagram Protocol）是一个简单的、无连接的、不可靠的、面向数据报的通信协议</td></tr><tr><td align="center"><strong>IP</strong></td><td>网际协议（Internet Protocol）是用于分组交换数据网络的一种协议，功能包括寻址、路由、尽最大努力交付数据包</td></tr><tr><td align="center">ICMP</td><td>互联网控制消息协议（Internet Control Message Protocol）用于返回通信环境的错误消息。traceroute 和 ping 都是基于 ICMP 消息实现的，traceroute 是通过发送含有特殊 TTL 的包，然后接收 ICMP 超时消息和目标不可达消息来实现的；ping 则是用 ICMP 的“Echo request (8)”和“Echo reply (0)”消息来实现的</td></tr><tr><td align="center">IGMP</td><td>因特网组管理协议（Internet Group Management Protocol ）管理 IP 协议多播组成员</td></tr><tr><td align="center">RIP</td><td>路由信息协议（Routing Information Protocol）是一种内部网关协议（IGP），是距离向量路由协议的一种实现</td></tr><tr><td align="center">OSFP</td><td>开放式最短路径优先（Open Shortest Path First）是一种内部网关协议（IGP），使用 Dijkstra 算法计算最短路径，是链路状态路由协议的一种实现</td></tr><tr><td align="center">BGP</td><td>边界网关协议（Border Gateway Protocol）是互联网上一个核心的去中心化自治路由协议，属于矢量路由协议。BGP 用于互联网上，将自治系统视作一个整体；每个自治系统使用 IGP（代表实现有 RIP 和 OSPF）进行路由</td></tr><tr><td align="center"><strong>ARP*</strong></td><td>地址解析协议（Address Resolution Protocol）通过 IP 寻找 MAC 地址</td></tr><tr><td align="center">ARQ</td><td>自动重传请求（Automatic Repeat-reQuest）是一种错误纠正协议</td></tr><tr><td align="center">IEEE802</td><td>IEEE 802 指 IEEE 标准中关于局域网和城域网的一系列标准，其中最广泛使用的有以太网、令牌环、无线局域网等</td></tr></tbody></table><h1 id="相关设备"><a href="#相关设备" class="headerlink" title="相关设备"></a>相关设备</h1><ul><li>集线器（Hub）是<strong>物理层</strong>的硬件，连接所有的线路，广播所有信息</li><li>网桥（Bridge）是<strong>数据链路层</strong>的硬件。网桥隔离两个端口，不同的端口形成单独的冲突域，减少网内冲突。网桥在不同或相同类型的 LAN 之间存储并转发数据帧，根据 MAC 头部来决定转发端口，显然是数据链路层的设备</li><li>交换机（Switch）是<strong>数据链路层</strong>的硬件，相当于多端口的网桥。交换机内部存储 MAC 表，只会将数据帧发送到指定的目的地址</li><li>路由器（Router）是<strong>网络层</strong>的硬件，根据 IP 地址进行寻址，不同子网间的数据传输隔离</li></ul><h1 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h1><ul><li>速率：比特（bit）是计算机中数据量的单位，也是信息论中使用的信息量的单位。速率的单位是 b/s，或kb/s, Mb/s, Gb/s 等</li><li>带宽 ：“带宽”是数字信道所能传送的“最高数据率”，单位是“比特每秒”，或 b/s (bit/s)。 </li><li>吞吐量：表示在单位时间内通过某个网络（或信道、接口）的数据量，吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。吞吐量受网络的带宽或网络的额定速率的限制。  </li><li>传输时延：(发送时延 )发送数据时，数据块从结点进入到传输媒体所需要的时间。也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。 </li><li>传播时延：电磁波在信道中需要传播一定的距离而花费的时间。 </li><li>处理时延：交换结点为存储转发而进行一些必要的处理所花费的时间。 </li><li>排队时延：结点缓存队列中分组排队所经历的时延。排队时延的长短往往取决于网络中当时的通信量；</li><li>总时延：数据经历的总时延就是发送时延、传播时延、处理时延和排队时延之和。</li></ul><p><strong>参考资料</strong></p><ul><li><a href="https://leetcode-cn.com/leetbook/read/networks-interview-highlights/ekjhp7/" target="_blank" rel="noopener">力扣 (LeetCode)</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;协议层次及服务类型&quot;&gt;&lt;a href=&quot;#协议层次及服务类型&quot; class=&quot;headerlink&quot; title=&quot;协议层次及服务类型&quot;&gt;&lt;/a&gt;协议层次及服务类型&lt;/h1&gt;&lt;h2 id=&quot;OSI-七层模型&quot;&gt;&lt;a href=&quot;#OSI-七层模型&quot; class=&quot;headerlink&quot; title=&quot;OSI 七层模型&quot;&gt;&lt;/a&gt;OSI 七层模型&lt;/h2&gt;&lt;p&gt;OSI 模型全称为开放式通信系统互连参考模型，是国际标准化组织 ( ISO ) 提出的一个试图使各种计算机在世界范围内互连为网络的标准框架。OSI 将计算机网络体系结构划分为七层，每一层实现各自的功能和协议，并完成与相邻层的接口通信。OSI 的服务定义详细说明了各层所提供的服务。某一层的服务就是该层及其下各层的一种能力，它通过接口提供给更高一层。各层所提供的服务与这些服务是怎么实现的无关。OSI参考模型并没有提供一个可以实现的方法，只是描述了一些概念，用来协调进程间通信标准的制定。即OSI参考模型并不是一个标准，而是一个在制定标准时所使用的概念模型框架。&lt;/p&gt;</summary>
    
    
    
    
    <category term="计网" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>java多线程基础</title>
    <link href="http://yoursite.com/2021/06/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2021/06/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2021-06-03T06:38:51.000Z</published>
    <updated>2021-06-09T00:35:49.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、进程与线程"><a href="#一、进程与线程" class="headerlink" title="一、进程与线程"></a>一、进程与线程</h1><h2 id="1、程序、进程、线程"><a href="#1、程序、进程、线程" class="headerlink" title="1、程序、进程、线程"></a>1、程序、进程、线程</h2><p>程序：通过某种语言编写的一组指令 ，即一段<strong>静态的代码</strong>。</p><p>进程：程序的一次执行过程。将程序加载入内存分配空间并执行，该段静态代码程序便拥有了<strong>动态性</strong>。<strong>系统运行一个程序即是一个进程从创建，运行到消亡的过程</strong>。如下图所示，在 ubuntu中通过查看任务管理器的方式，我们就可以清楚看到 当前运行的进程。</p><a id="more"></a><img src="/2021/06/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1.png" alt="1" style="zoom:80%;"><p><strong>线程概念的出现</strong></p><p>进程的出现使操作系统的并发成为了可能，但是随着计算机的普及，人们对<strong>实时性</strong>有了更高的要求。一个进程在一段时间只能做一件事情，如果一个进程有多个任务，只能逐一的去执行这些子任务。然而这些子任务之间并不存在顺序上的依赖，因此人们想到既然CPU可以按照时间片的方式轮流的切换执行不同的进程，那为什么不能也同样给进程子任务打上标签，让CPU按照更细的时间片来执行子任务呢？由于子任务共享内存等资源，因此隶属于同一个进程的子任务之间的切换是不需要切换页目录以使用新的地址空间的，这就为子任务的快速切换提供了可能。此时人们便提出了线程，让一个线程去执行子任务，这样一个进程就包括了多个线程，每个线程去负责独立的子任务，这样让进程的内部并发成为了可能，就实现了实时性的目的。</p><p>线程：<strong>进程进一步细化为线程，是一个程序内部的一条执行路径</strong>。也叫做轻量级进程。</p><p>如下图所示，在<code>CCleaner</code> 这一应用程序中，我们同时执行<code>Health Check</code> 以及 <code>Custom Clean</code> 两项子任务即为多线程。</p><img src="/2021/06/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/5.png" alt="5" style="zoom: 67%;"><h3 id="1-1-进程与线程的关系、区别"><a href="#1-1-进程与线程的关系、区别" class="headerlink" title="1.1 进程与线程的关系、区别"></a>1.1 进程与线程的关系、区别</h3><ul><li><strong>进程是资源分配的最小单位，线程是CPU调度的最小单位</strong></li><li>进程有独立的地址空间，相互不影响，多个线程只是进程的不同执行路径，共享其地址空间及资源</li><li>线程不能看做独立的应用，而进程可看作独立应用</li><li>多进程的程序比多线程的程序健壮</li><li>进程的切换比线程的切换开销大</li></ul><p><strong>注解</strong></p><p>进程是资源分配的基本单位，所有与该进程有关的资源都被记录在进程控制块PCB中，以表示该进程拥有或者正在使用这些资源。同时进程也是抢占处理机调度的单位，它拥有完整的虚拟内存和地址空间。当进程发生调度时，不同的进程拥有不同的虚拟地址空间，而同一进程中的不同线程共享同一地址空间。</p><p>线程与资源分配无关，它属于某一进程，并和该进程内的其他线程共享进程的资源。线程只由相关的堆、栈 寄存器、程序计数器和线程控制表TCB组成，其中寄存器用来存储线程内的局部变量，但并不存储其他线程的相关变量。每一个独立的线程有一个程序的入口、顺序执行序列以及程序的出口，但是线程并不能独立的执行，必须依存于某个应用程序中，由应用程序提供对多个线程的执行控制。</p><p>操作系统并没有将多个线程当作多个应用来实现进程的调度和管理以及资源的分配，而进程可作为独立的应用，拥有独立的内存空间。当一个进程崩溃后，在保护模式下并不会对其他进程产生影响，然而某个线程挂掉之后其所在的进程也会同样挂掉。</p><p>进程切换比线程切换开销大、耗费资源、效率差，对于要求同时进行，并且要求共享某些变量的并发操作只能用线程，不能用进程。</p><h3 id="1-2-java进程与线程"><a href="#1-2-java进程与线程" class="headerlink" title="1.2 java进程与线程"></a>1.2 java进程与线程</h3><ul><li>运行一个Java程序会产生一个Java进程，每一个Java进程至少包含三个线程：<code>main()</code> 主线程、<code>gc()</code> 线程、异常处理线程</li><li>每一个进程对应一个JVM实例，多个线程共享JVM里面的堆，每一个线程都有自己私有的栈</li><li>Java采用单线程编程模型，如果程序里面没有创建线程的话，只会自动创建一个线程-&gt;主线程</li><li>Java程序启动时，主线程立刻运行，在执行完各种子线程的关闭动作后才能完成执行</li></ul><p><strong>从 JVM 角度说进程和线程之间的关系</strong></p><img src="/2021/06/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/4.png" alt="4" style="zoom: 67%;"><p>如上图：一个进程中可以有多个线程，多个线程共享进程的<strong>堆</strong>和<strong>方法区 (JDK1.8 之后的元空间)资源，但是每个线程有自己的 程序计数器</strong>、<strong>虚拟机栈</strong> 和 <strong>本地方法栈</strong>。</p><h3 id="1-3-为什么要使用多线程"><a href="#1-3-为什么要使用多线程" class="headerlink" title="1.3 为什么要使用多线程"></a>1.3 为什么要使用多线程</h3><ul><li>提高计算机系统CPU的利用率</li><li>提高应用程序的响应，增强用户体验</li></ul><h3 id="1-4-使用多线程可能带来那些问题？"><a href="#1-4-使用多线程可能带来那些问题？" class="headerlink" title="1.4 使用多线程可能带来那些问题？"></a>1.4 使用多线程可能带来那些问题？</h3><p>并发编程的目的就是为了能提高程序的执行效率提高程序运行速度，但是并发编程可能会遇到很多问题。比如：内存泄漏、死锁、线程不安全等等</p><h2 id="2-单核CPU与多核CPU"><a href="#2-单核CPU与多核CPU" class="headerlink" title="2.单核CPU与多核CPU"></a>2.单核CPU与多核CPU</h2><ul><li>单核CPU：在一个时间单元内，只能执行一个线程的任务，其实是一种假的多线程。然而在单核的情况下，让用户看起来像同一时刻并发执行多个任务的原因是，CPU分配给单一任务执行的时间片很短、任务切换的频次高，造成所有任务都在并发执行的假象。</li><li>多核CPU：多核时代多线程主要是为了提高 CPU 利用率，同一时刻多个任务同时进行。</li></ul><h2 id="3-并行与并发"><a href="#3-并行与并发" class="headerlink" title="3.并行与并发"></a>3.并行与并发</h2><ul><li>并行：多个CPU同时执行多个任务</li><li>并发：单个CPU同时执行多个任务 (如：秒杀、抢票)</li></ul><h1 id="二、线程的创建及使用"><a href="#二、线程的创建及使用" class="headerlink" title="二、线程的创建及使用"></a>二、线程的创建及使用</h1><p><strong>创建线程四种方式</strong></p><ul><li>继承于<code>Thread</code>类</li><li>实现 <code>Runnable</code>接口</li><li>实现 <code>Callable</code> 接口的方式</li><li>线程池创建</li></ul><h2 id="1-继承于Thread类"><a href="#1-继承于Thread类" class="headerlink" title="1.继承于Thread类"></a>1.继承于Thread类</h2><ol><li>创建一个继承于<code>Thread</code>类的子类</li><li>重写 <code>Thread</code>类的 <code>run()</code>方法 ==&gt; 将此线程需要执行的操作声明在 <code>run()</code>中</li><li>创建<code>Thread</code>类的子类的对象 ==&gt; 主线程</li><li>通过此对象调用<code>start()</code>方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//如下操作在main线程中执行，此时主线程与子线程交替执行 同时抢占cpu资源</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"main========&gt;hello world"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-Thread类的常用方法"><a href="#1-1-Thread类的常用方法" class="headerlink" title="1.1 Thread类的常用方法"></a>1.1 Thread类的常用方法</h3><ul><li><code>start()</code> 启动当前线程；调用当前线程的run()</li><li><code>run()</code> 通常需要重写Thread类的此方法，将创建的线程要执行的操作声明在此方法中</li><li><code>currentThread()</code> 静态方法，返回执行当前代码的线程</li><li><code>getName()</code> 获取当前线程的名字</li><li><code>setName()</code> 设置当前线程的名字</li><li><code>getPriority()</code> 获取线程的优先级</li><li><code>setPriority()</code> 设置线程优先级</li><li><code>yield()</code> 释放当前线程CPU的执行权 =&gt; 很<strong>可能下一刻该线程又抢到CPU执行权</strong></li><li><code>join()</code> 在某个程序执行流程中调用其他线程的join()时，当前线程将会被阻塞，直到调用的线程执行完毕为止(插队)</li><li><code>sleep(long millitime)</code>让当前线程睡眠指定 <code>millitime</code>时间，此时该线程处于阻塞状态</li><li><code>stop()</code>  _中断线程 已经过时_：当执行此方法时，强制结束当前线程</li><li><code>interrupt()</code>  <em>目前使用的<strong>通知线程中断</strong>的方法</em> ：1. 如果线程处于被阻塞状态，那么线程将立即退出被阻塞状态，抛出一个<code>InterruptedException</code> 2. 如果线程处于正常活动状态，那么会将该线程的终端标志设置为true。被设置中断标志的线程将继续正常运行，不受影响。</li></ul><h3 id="1-2线程的优先级"><a href="#1-2线程的优先级" class="headerlink" title="1.2线程的优先级"></a>1.2线程的优先级</h3><ul><li><code>MIN_PRIORITY</code> = 1</li><li><code>NORM_PRIORITY</code>= 5</li><li><code>MAX_PRIORITY</code> = 10</li></ul><p>注意：高优先级的线程要抢占低优先级线程的cup执行权，只是概率上高优先级的线程有更高的概率被执行，并不意味着只有在高优先级的线程执行完后低线程的线程才执行。</p><h3 id="1-3-线程start-方法与-run-方法的区别"><a href="#1-3-线程start-方法与-run-方法的区别" class="headerlink" title="1.3 线程start() 方法与 run() 方法的区别"></a>1.3 线程start() 方法与 run() 方法的区别</h3><ul><li><code>start()</code>：启动当前线程并调用当前线程的<code>run()</code>。new 一个 Thread，线程进入了新建状态，调用 <code>start()</code>方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。这是真正的多线程工作。同时一个线程对象只能调用一次<code>start()</code>方法，如果重复调用将抛出 异常<code>IllegalThreadStateException</code> 因为在执行完<code>start()</code>后该线程已经处于终止状态了。</li><li><code>run()</code>：直接执行 <code>run()</code> 方法，会把 <code>run()</code> 方法当成一个 main 线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。</li></ul><h3 id="1-4-如何给run-传参"><a href="#1-4-如何给run-传参" class="headerlink" title="1.4 如何给run()传参"></a>1.4 如何给<code>run()</code>传参</h3><ul><li>构造函数传参</li><li>成员变量传参</li><li>回调函数传参</li></ul><h2 id="2-实现-Runnable接口"><a href="#2-实现-Runnable接口" class="headerlink" title="2.实现 Runnable接口"></a>2.实现 Runnable接口</h2><ol><li>创建一个实现了<code>Runnable</code>接口的类</li><li>实现类去实现Runnable中的抽象方法 <code>run()</code></li><li>创建实现类的对象</li><li>将此对象作为参数传递到<code>Thread</code>类的构造器中，创建<code>Thread</code>类的对象</li><li>通过<code>Thread</code>类的对象调用<code>start()</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"==&gt;"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread2 myThread2 = <span class="keyword">new</span> MyThread2();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myThread2);</span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myThread2);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1继承于Thread类与实现-Runnable接口-两种创建线程方式的联系与区别"><a href="#2-1继承于Thread类与实现-Runnable接口-两种创建线程方式的联系与区别" class="headerlink" title="2.1继承于Thread类与实现 Runnable接口 两种创建线程方式的联系与区别"></a>2.1继承于Thread类与实现 Runnable接口 两种创建线程方式的联系与区别</h3><ul><li><code>public class Thread implements Runnable</code> ==&gt; <code>Thread</code>类本身也实现了<code>Runnable</code>接口。都需要重写<code>run()</code>方法，将线程要执行的逻辑声明在<code>run()</code>中。</li><li>开发中我们优先选择实现 <code>Runnable</code>接口的方式：1.实现的方式没有类的单继承的局限性；2.实现的方式更适合来处理多个线程共享数据的情况</li></ul><h2 id="3-实现-Callable-接口的方式"><a href="#3-实现-Callable-接口的方式" class="headerlink" title="3.实现 Callable 接口的方式"></a>3.实现 Callable 接口的方式</h2><ol><li>创建一个实现了 <code>Callable</code> 接口的实现类</li><li>实现<code>call()</code>，将此线程需要执行的方法声明到<code>call()</code>中</li><li>创建<code>Callable</code>接口实现类的对象</li><li>将此<code>Callable</code>接口实现类的对象作为参数传递到<code>FutureTask</code>构造器中，创建<code>FutureTask</code> 的对象</li><li>将<code>FutureTask</code>对象作为参数传递到Thread类的构造器中，创建Thread类的对象并调用<code>start()</code>;</li><li>获取 <code>Callable</code>中的 <code>call</code>方法的返回值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum; <span class="comment">//如果不需要返回值可以返回null      </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NumThread numThread = <span class="keyword">new</span> NumThread();</span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(numThread);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">        t1.start(); <span class="comment">//new Thread(futureTask).start();</span></span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">//get()的返回值即为 FutureTask 构造器参数Callable实现类重写的call()的返回值</span></span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-如何实现处理线程的返回值"><a href="#3-1-如何实现处理线程的返回值" class="headerlink" title="3.1 如何实现处理线程的返回值"></a>3.1 如何实现处理线程的返回值</h3><ol><li>主线程等待法：当我们在<code>run()</code>方法中写返回值的时候，由于主线程往往比子线程先执行完毕所以根本无法接受子线程的返回值，所以我们可以在主线程中写循环等待算法，当子线程执行完毕后再执行主线程。缺点：当需要等待的变量很多则不合适，并且需要等待多久也不确定。</li><li>使用<code>Thread</code>类的<code>join()</code>方法阻塞当前线程等待子线程处理完毕后获取返回值。优点：是无需处理主线程循环等待算法，更精确；缺点：粒度不够细。</li><li>通过<code>Callable</code>接口实现：1. 通过<code>Future Task</code>  2. 线程池获取</li></ol><h3 id="3-2如何理解实现Callable接口的方式要比实现Runnable接口创建多线程的方式更好"><a href="#3-2如何理解实现Callable接口的方式要比实现Runnable接口创建多线程的方式更好" class="headerlink" title="3.2如何理解实现Callable接口的方式要比实现Runnable接口创建多线程的方式更好"></a>3.2如何理解实现<code>Callable</code>接口的方式要比实现<code>Runnable</code>接口创建多线程的方式更好</h3><ul><li><code>call()</code> 可以有返回值</li><li><code>call()</code> 可以抛出异常，被外面的异常捕获，获取异常的信息</li><li><code>Callable</code> 支持泛型</li></ul><h2 id="4-线程池"><a href="#4-线程池" class="headerlink" title="4. 线程池"></a>4. 线程池</h2><h3 id="4-1ThreadPoolExecutor-类"><a href="#4-1ThreadPoolExecutor-类" class="headerlink" title="4.1ThreadPoolExecutor 类"></a>4.1<code>ThreadPoolExecutor</code> 类</h3><p><strong><code>ThreadPoolExecutor</code> 3 个最重要的参数：</strong></p><ul><li><strong><code>corePoolSize</code> :</strong> 核心线程数线程数定义了最小可以同时运行的线程数量。</li><li><strong><code>maximumPoolSize</code> :</strong> 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</li><li><strong><code>workQueue</code>:</strong> 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</li></ul><p><code>ThreadPoolExecutor</code>其他常见参数:</p><ul><li><strong><code>keepAliveTime</code></strong>:当线程池中的线程数量大于 <code>corePoolSize</code> 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 <code>keepAliveTime</code>才会被回收销毁；</li><li><strong><code>unit</code></strong> : <code>keepAliveTime</code> 参数的时间单位。</li><li><strong><code>threadFactory</code></strong> :executor 创建新线程的时候会用到。</li><li><strong><code>handler</code></strong> :饱和策略。</li></ul><p><strong>使用线程池创建线程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread1</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//提供指定线程数量的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//执行指定线程的操作，需要传入runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread()); </span><br><span class="line">        service.submit(<span class="keyword">new</span> NumberThread1());  </span><br><span class="line">        <span class="comment">//关闭线程池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2为什么要使用线程池"><a href="#4-2为什么要使用线程池" class="headerlink" title="4.2为什么要使用线程池"></a>4.2为什么要使用线程池</h3><ul><li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul><h3 id="4-3-执行-execute-方法和-submit-方法的区别"><a href="#4-3-执行-execute-方法和-submit-方法的区别" class="headerlink" title="4.3. 执行 execute()方法和 submit()方法的区别"></a>4.3. 执行 <code>execute()</code>方法和 <code>submit()</code>方法的区别</h3><ul><li><code>execute()</code>方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功与否；</li><li><code>submit()</code>方法用于提交需要返回值的任务。线程池会返回一个 <code>Future</code> 类型的对象，通过这个 <code>Future</code> 对象可以判断任务是否执行成功，并且可以通过 <code>Future</code> 的 <code>get()</code>方法来获取返回值，<code>get()</code>方法会阻塞当前线程直到任务完成，而使用 <code>get（long timeout，TimeUnit unit）</code>方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。</li></ul><h1 id="三、线程的生命周期及状态"><a href="#三、线程的生命周期及状态" class="headerlink" title="三、线程的生命周期及状态"></a>三、线程的生命周期及状态</h1><p> java 线程在运行的生命周期中一共有下面<strong>六种状态</strong>：</p><p><img src="/2021/06/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/6.png" alt="6"></p><p>线程在生命周期中并不是固定处于某一个状态而是<strong>随着代码的执行在不同状态之间切换</strong>。Java 线程状态变迁如下图所示：</p><img src="/2021/06/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/7.png" alt="7"><p>线程创建之后它将处于 <strong>NEW（新建）</strong> 状态，调用 <code>start()</code> 方法后开始运行，线程这时候处于 <strong>READY（可运行）</strong> 状态。可运行状态的线程获得了 CPU 时间片后就处于 <strong>RUNNING（运行）</strong> 状态。</p><p>当线程执行 <code>wait()</code>方法之后，线程进入 <strong>WAITING（等待）</strong> 状态。进入等待状态的线程不会被分配CPU执行时间，要等待被其他线程显式的唤醒后才能够返回到运行状态，而 <strong>TIME_WAITING(超时等待)</strong> 状态相当于在等待状态的基础上增加了超时限制，比如通过 <code>sleep（long millis）</code>方法或 <code>wait（long millis）</code>方法可以将 Java 线程置于 <strong>TIMED WAITING</strong> 状态。当超时时间到达后 Java 线程将会返回到 <strong>RUNNABLE</strong> 状态。</p><p>当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到 <strong>BLOCKED（阻塞）</strong> 状态。线程在执行完 <code>run()</code>方法之后将会进入到 <strong>TERMINATED（终止）</strong> 状态，并且一旦终止就不能再复生。</p><h1 id="四、线程的同步"><a href="#四、线程的同步" class="headerlink" title="四、线程的同步"></a>四、线程的同步</h1><h2 id="1-多线程的安全问题"><a href="#1-多线程的安全问题" class="headerlink" title="1.多线程的安全问题"></a>1.多线程的安全问题</h2><p><strong>问题的引出</strong></p><p>假设当前机场有100张票，我们创建3个线程来模拟三个窗口卖票</p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"卖票，票号为"</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window window = <span class="keyword">new</span> Window();</span><br><span class="line">        Thread w1 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">        Thread w2 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">        Thread w3 = <span class="keyword">new</span> Thread(window);</span><br><span class="line">        w1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        w2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        w3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果如下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">窗口2卖票，票号为100</span><br><span class="line">窗口1卖票，票号为100</span><br><span class="line">窗口3卖票，票号为100</span><br><span class="line">窗口1卖票，票号为98</span><br><span class="line">窗口2卖票，票号为99</span><br><span class="line">窗口1卖票，票号为96</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><strong>问题分析</strong></p><p>通过上面运行结果我们发现，卖票的过程中出现了重票和错票的问题。原因是当某个线程操作卖票的过程中，尚未操作完成，其他的线程参与了进来，所以出现了多线程的安全问题。</p><p><strong>问题解决</strong></p><p>当一个线程w操作 ticket的时候其他的线程不允许操作进来，直到线程w操作完ticket其他的线程才允许操作ticket，即使线程 w 阻塞也不允许改变。这样便引出了线程同步的概念。</p><h2 id="2-通过同步机制来解决线程的同步问题"><a href="#2-通过同步机制来解决线程的同步问题" class="headerlink" title="2.通过同步机制来解决线程的同步问题"></a>2.通过同步机制来解决线程的同步问题</h2><p><strong>同步锁机制</strong></p><p>在并发操作中，当多个任务进行共享资源竞争时，为了防止出现线程同步的问题，就是当资源被一个任务使用时，在其上加锁。当资源被锁定后，其他任务在其被解锁前就无法访问它了，在其被解锁后，另一个任务才可以锁定并使用它。</p><p><strong>java中我们可以通过同步机制来解决线程的同步问题</strong></p><ul><li>同步代码块</li><li>同步方法</li><li>重入锁<code>ReentrantLock</code></li></ul><h3 id="2-1同步代码块"><a href="#2-1同步代码块" class="headerlink" title="2.1同步代码块"></a>2.1同步代码块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">synchronized(同步监视器)&#123;</span><br><span class="line">   &#x2F;&#x2F;需要同步的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>操作共享数据的代码即为同步的代码</li><li>共享数据==&gt;多个线程共同操作的数据</li><li>同步监视器 俗称==&gt; 锁 任何一个对象都可以充当锁  </li><li>多个线程必须共用同一把锁 (同步监视器声明的位置不可以在<code>run()</code>中)</li><li>在实现<code>Runnable</code>接口创建的多线程中可以考虑使用 <code>this</code>做同步监视器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123; <span class="comment">//此处的同步监视器可以是 this</span></span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"卖票，票号为"</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-同步方法"><a href="#2-2-同步方法" class="headerlink" title="2.2 同步方法"></a>2.2 同步方法</h3><p>如果共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明为同步的</p><ul><li>同步方法仍然涉及到同步监视器，只是不需要显示的声明</li><li>非静态的同步方法，同步器是 <code>this</code></li><li>静态的同步方法，同步器是 当前类本身</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (ticket != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//调用同步方法</span></span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建同步方法</span></span><br><span class="line"><span class="comment">     * 注意：如果是通过extends继承类的方式创建同步方法需要用 static 修饰</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"卖票，票号为"</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-重入锁ReentrantLock"><a href="#2-3-重入锁ReentrantLock" class="headerlink" title="2.3 重入锁ReentrantLock"></a>2.3 重入锁<code>ReentrantLock</code></h3><p><code>ReentrantLock</code>类实现了 <code>Lock</code> ，它拥有与 <code>synchronized</code> 相同的并发性和内存语义。在实现线程安全的控制中，<code>ReentrantLock</code>可以显式加锁、释放锁。</p><p><strong><code>ReentrantLock</code>常用方法</strong></p><ul><li><code>lock()</code> 获得锁</li><li><code>unlock()</code> 释放锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window4</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"售票-票号为"</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-synchronized-与-Lock-的区别"><a href="#2-4-synchronized-与-Lock-的区别" class="headerlink" title="2.4 synchronized 与 Lock 的区别"></a>2.4 <code>synchronized</code> 与 <code>Lock</code> 的区别</h3><ul><li>两者都可以解决线程的安全问题</li><li><code>Lock</code>是显式锁，手动开启和关闭锁；<code>synchronized</code>是隐式锁，出了作用域自动释放锁</li><li><code>Lock</code>只有代码块锁，<code>synchronized</code>有代码块锁和方法锁</li><li>使用<code>Lock</code>锁，JVM将花费较少的时间来调度线程，性能更好。并且具有 更好的扩展性</li></ul><h1 id="五、线程间通信"><a href="#五、线程间通信" class="headerlink" title="五、线程间通信"></a>五、线程间通信</h1><h2 id="1-锁池EntryList与等待池WaitSet"><a href="#1-锁池EntryList与等待池WaitSet" class="headerlink" title="1.锁池EntryList与等待池WaitSet"></a>1.锁池<code>EntryList</code>与等待池<code>WaitSet</code></h2><p><strong>锁池<code>EntryList</code></strong> ：假设线程A已经拥有了某个对象的锁，而其他线程B、C想要调用这个对象的某个<code>synchronized</code>方法（或者块），由于B、C线程在进入对象的<code>synchronized</code>方法（或者块）之前必须先获得该对象锁的拥有权，而恰巧该对象的所目前正被线程A所占用，此时B、C线程就会被阻塞，进入一个地方去等待锁的释放，这个地方就是该对象的锁池。</p><p><strong>等待池<code>WaitSet</code></strong>：假设线程A调用了某个对象的<code>wait()</code>方法，线程A就会释放该对象的锁，同时线程A就进入到了该对象的等待池中，进入到等待池中的线程不会去竞争该对象的锁</p><ul><li>锁池中的线程就会去竞争该对象的锁</li><li>优先级高的线程竞争到锁的概率就会变高</li><li>没有竞争到的线程就会留在锁池当中，不会进入到等待池当中</li><li>竞争到的线程就会运行直到执行完<code>synchronized</code>或者是遇到异常，然后释放锁</li><li>被<code>notify()</code>或<code>notifyAll()</code>唤醒的线程会进入到锁池当中</li></ul><h2 id="2-线程通信涉及的方法"><a href="#2-线程通信涉及的方法" class="headerlink" title="2.线程通信涉及的方法"></a>2.线程通信涉及的方法</h2><ul><li><code>wait()</code>：一旦执行此方法当前线程就进入阻塞状态，释放同步监视器，并进入到等待池中等待被唤醒</li><li><code>notify()</code> ：随机选取一个处于等待池中的线程进入锁池去竞争获取锁的机会</li><li><code>notifyAll()</code>：会让所有处于等待池的线程全部进入锁池去竞争获取锁的机会</li></ul><p><strong>注意</strong></p><p>三个方法执行线程通信时必须使用在同步代码块或同步方法中; 三个方法的调用者必须是 同步代码块或者同步方法的 同步监视器;三个方法都定义在 <code>java.lang.Object</code>中</p><h2 id="3-sleep-方法和wait-方法的区别"><a href="#3-sleep-方法和wait-方法的区别" class="headerlink" title="3. sleep()方法和wait() 方法的区别"></a>3. <code>sleep()</code>方法和<code>wait()</code> 方法的区别</h2><ul><li><code>sleep()</code> 是 <code>Thread</code> 类的方法；<code>wait()</code> 是 <code>Object</code> 类中定义的方法</li><li><code>sleep()</code> 方法可以在任何地方使用；<code>wait()</code> 只能在 <code>synchronized</code> 方法或者 <code>synchronized</code> 块中使用</li><li><strong><code>Thread.sleep</code> 只会让出 CPU，不会导致锁行为的改变；<code>Object.wait</code> 不仅会让出CPU，还会释放已经占有的同步资源锁</strong></li></ul><h2 id="4-实现线程间通信"><a href="#4-实现线程间通信" class="headerlink" title="4. 实现线程间通信"></a>4. 实现线程间通信</h2><p>实现两个线程交替打印 1 - 100</p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                notify();</span><br><span class="line">                <span class="keyword">if</span> (number &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Communication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(number);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(number);</span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-线程死锁"><a href="#5-线程死锁" class="headerlink" title="5.线程死锁"></a>5.线程死锁</h2><h3 id="5-1什么是死锁"><a href="#5-1什么是死锁" class="headerlink" title="5.1什么是死锁"></a>5.1什么是死锁</h3><p>不同的线程分别占用对方需要的同步资源不放弃，都等待对方先放弃自己需要的同步资源，就形成了死锁</p><p>如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态。</p><p><img src="/2021/06/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/8.png" alt="8"></p><p>注意：出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态无法继续执行。</p><h3 id="5-2死锁演示"><a href="#5-2死锁演示" class="headerlink" title="5.2死锁演示"></a>5.2死锁演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer strLock1 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        StringBuffer strLock2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="comment">//线程1等待线程2释放 strLock2 ，而线程2等待线程1释放 strLock1 ===&gt;产生死锁</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (strLock1) &#123;</span><br><span class="line">                    strLock1.append(<span class="string">"a"</span>);</span><br><span class="line">                    strLock2.append(<span class="string">"1"</span>);</span><br><span class="line">                    <span class="comment">//增加sleep()加大了产生死锁的可能</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (strLock2) &#123;</span><br><span class="line">                        strLock1.append(<span class="string">"b"</span>);</span><br><span class="line">                        strLock2.append(<span class="string">"2"</span>);</span><br><span class="line">                        System.out.println(strLock1);</span><br><span class="line">                        System.out.println(strLock2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"线程 1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (strLock2) &#123;</span><br><span class="line">                    strLock1.append(<span class="string">"c"</span>);</span><br><span class="line">                    strLock2.append(<span class="string">"3"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (strLock1) &#123;</span><br><span class="line">                        strLock1.append(<span class="string">"d"</span>);</span><br><span class="line">                        strLock2.append(<span class="string">"4"</span>);</span><br><span class="line">                        System.out.println(strLock1);</span><br><span class="line">                        System.out.println(strLock2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"线程 2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>参考资料</strong></p><ul><li><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/multi-thread/2020最新Java并发基础常见面试题总结.md" target="_blank" rel="noopener">JavaGuide-java并发基础</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、进程与线程&quot;&gt;&lt;a href=&quot;#一、进程与线程&quot; class=&quot;headerlink&quot; title=&quot;一、进程与线程&quot;&gt;&lt;/a&gt;一、进程与线程&lt;/h1&gt;&lt;h2 id=&quot;1、程序、进程、线程&quot;&gt;&lt;a href=&quot;#1、程序、进程、线程&quot; class=&quot;headerlink&quot; title=&quot;1、程序、进程、线程&quot;&gt;&lt;/a&gt;1、程序、进程、线程&lt;/h2&gt;&lt;p&gt;程序：通过某种语言编写的一组指令 ，即一段&lt;strong&gt;静态的代码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;进程：程序的一次执行过程。将程序加载入内存分配空间并执行，该段静态代码程序便拥有了&lt;strong&gt;动态性&lt;/strong&gt;。&lt;strong&gt;系统运行一个程序即是一个进程从创建，运行到消亡的过程&lt;/strong&gt;。如下图所示，在 ubuntu中通过查看任务管理器的方式，我们就可以清楚看到 当前运行的进程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>步入Linux的世界</title>
    <link href="http://yoursite.com/2021/05/26/%E6%AD%A5%E5%85%A5Linux%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    <id>http://yoursite.com/2021/05/26/%E6%AD%A5%E5%85%A5Linux%E7%9A%84%E4%B8%96%E7%95%8C/</id>
    <published>2021-05-26T08:08:15.000Z</published>
    <updated>2021-06-02T12:56:22.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-初步认识"><a href="#Linux-初步认识" class="headerlink" title="Linux 初步认识"></a>Linux 初步认识</h1><h2 id="Linux的千奇百怪的版本"><a href="#Linux的千奇百怪的版本" class="headerlink" title="Linux的千奇百怪的版本"></a>Linux的千奇百怪的版本</h2><p>目前世界上主流的操作系统 –&gt; Windows Linux Unix MacOS</p><p><strong>Linux 严格上来说只是操作系统内核</strong>，我们所说的Linux操作系统实质上是 “GNU/Linux”</p><p> <strong>“GNU/Linux”</strong> –&gt; GNU项目 + Linux kernel就可以组成一个类Unix的操作系统</p><p>Linux主要运行在服务器和其他大型平台上</p><p><strong>Linux发行版</strong> –&gt; 在Linux kernel 加上一些件组成,不同的组合就构成了不同的发行版 如 Debian Fedora OpenSUSE </p><a id="more"></a>  <img src="/2021/05/26/%E6%AD%A5%E5%85%A5Linux%E7%9A%84%E4%B8%96%E7%95%8C/Unix.png" alt="Unix" style="zoom: 67%;"><h1 id="Linux四大组成部分"><a href="#Linux四大组成部分" class="headerlink" title="Linux四大组成部分"></a>Linux四大组成部分</h1><ul><li>Linux Kernel 内核</li><li>GNU工具</li><li>GUI Desktop环境</li><li>Application </li></ul><h3 id="Linux-Kernel"><a href="#Linux-Kernel" class="headerlink" title="Linux Kernel"></a>Linux Kernel</h3><ol><li>进程管理</li><li>内存管理</li><li>文件管理 （不同的文件系统主要是<strong>文件的读写标准</strong>不同  如Linux -&gt; ext，ext2  Windows -&gt; FAT32 NTFS ）</li><li>硬件设备管理</li></ol><h3 id="GNU"><a href="#GNU" class="headerlink" title="GNU"></a>GNU</h3><p>GNU -&gt; 理查德·斯托曼 创建的一个组织 发起了自由软件运动</p><p>“linux” 最初只是一个内核，不像Unix 有一些软件，Linux Kernel 本身没有，所以GNU 模仿 Unix 同样为 Linux 写了一些必要的软件</p><p><strong>GNU核心</strong></p><p>1.coreutils: 核心工具软件包</p><ul><li>用来处理文件的工具</li><li>用来操作文本的工具</li><li>用来管理进程的工具</li></ul><p>2.Shell: 提供给用户使用的软件,用户拿它使用电脑，实现人机交互</p><ul><li>图形界面shell (GUI shell  -&gt;  Graphical User Interface shell ）</li><li>命令行式shell (CLI  shell  -&gt; Command Line Interface shell)</li></ul><p><strong>传统意义上的shell指的是命令行式的shell</strong>,GNU 是为 Linux 写了 CLS</p><p> <strong>常用的shell 种类</strong></p><ul><li>bash (linux 默认的shell )</li><li>zsh (比较庞大的一种shell)</li><li>tcsh (tcsh是csh的增强版，csh是具有c语言风格的一种shell)</li><li>oh-my-zsh (是一款社区驱动的命令行工具,它基于 zsh 命令行)</li></ul><h3 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h3><p>人们使用计算机的方式</p><ul><li>命令行壳层提供一个命令行界面（CLI）</li><li>图像壳层提供一个<strong>图形用户界面</strong>（GUI）</li></ul><p><strong>GUI的类型</strong></p><p>1.Xwindows，2.KDE(一种主流的桌面设计理念 如 Windows ，Mac Os)，3.GNOME，4.Unity (用于 Ubantu)</p><h1 id="Bash-shell"><a href="#Bash-shell" class="headerlink" title="Bash shell"></a>Bash shell</h1><h3 id="Linux常用命令搜索"><a href="#Linux常用命令搜索" class="headerlink" title="Linux常用命令搜索"></a><a href="https://wangchujiang.com/linux-command/" target="_blank" rel="noopener">Linux常用命令搜索</a></h3><p><strong>参考资料</strong></p><ul><li><a href="https://blog.csdn.net/qq_46207024/article/details/116431998#4Bash_shell_152" target="_blank" rel="noopener">★Bash shell命令</a></li><li><a href="https://www.bilibili.com/video/BV18U4y1W7av" target="_blank" rel="noopener">Frank步入Linux的现代方法</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Linux-初步认识&quot;&gt;&lt;a href=&quot;#Linux-初步认识&quot; class=&quot;headerlink&quot; title=&quot;Linux 初步认识&quot;&gt;&lt;/a&gt;Linux 初步认识&lt;/h1&gt;&lt;h2 id=&quot;Linux的千奇百怪的版本&quot;&gt;&lt;a href=&quot;#Linux的千奇百怪的版本&quot; class=&quot;headerlink&quot; title=&quot;Linux的千奇百怪的版本&quot;&gt;&lt;/a&gt;Linux的千奇百怪的版本&lt;/h2&gt;&lt;p&gt;目前世界上主流的操作系统 –&amp;gt; Windows Linux Unix MacOS&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linux 严格上来说只是操作系统内核&lt;/strong&gt;，我们所说的Linux操作系统实质上是 “GNU/Linux”&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;“GNU/Linux”&lt;/strong&gt; –&amp;gt; GNU项目 + Linux kernel就可以组成一个类Unix的操作系统&lt;/p&gt;
&lt;p&gt;Linux主要运行在服务器和其他大型平台上&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linux发行版&lt;/strong&gt; –&amp;gt; 在Linux kernel 加上一些件组成,不同的组合就构成了不同的发行版 如 Debian Fedora OpenSUSE &lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>系统调用的实现</title>
    <link href="http://yoursite.com/2021/05/23/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2021/05/23/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-05-23T07:09:20.000Z</published>
    <updated>2021-06-02T12:56:16.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作系统的接口"><a href="#操作系统的接口" class="headerlink" title="操作系统的接口"></a>操作系统的接口</h2><p>接口即一些函数，操作系统为上层应用提供一种进入到内核中的手段</p><p>接口表现为函数调用又由系统提供，所以称为<strong>系统调用</strong></p><h3 id="操作系统向上连接的并不是用户而是应用程序"><a href="#操作系统向上连接的并不是用户而是应用程序" class="headerlink" title="操作系统向上连接的并不是用户而是应用程序"></a>操作系统向上连接的并不是用户而是应用程序</h3><p>接口是计算机系统中两个独立的部件进行信息交换的共享边界，应用程序与操作系统之间存在接口，操作系统和计算机硬件之间也存在接口。通过接口可以实现应用程序与操作系统之间的通信和操作系统与计算机硬件之间的通信。由此可见与操作系统相连接的并不是用户，而是应用程序。</p>  <a id="more"></a>  <h3 id="操作系统既然并不面向用户那么用户是如何使用操作系统的"><a href="#操作系统既然并不面向用户那么用户是如何使用操作系统的" class="headerlink" title="操作系统既然并不面向用户那么用户是如何使用操作系统的"></a>操作系统既然并不面向用户那么用户是如何使用操作系统的</h3><ul><li>命令行 (命令程序)</li><li>图形界面 （消息框架程序 + 消息处理程序）</li><li>应用程序</li></ul><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><p>以Linux操作系统为例，当我们使用命令行在去执行hello world程序的时候，C语言代码中的printf函数会在Linux操作系统中生成gcc -o output output.c文件，然后通过shell命令去执行output.c文件，此时该文件会调用操作系统里的write函数，将printf里的字符串写到cmd命令行界面上。这里的write函数就是操作系统接口也叫系统调用。</p><h4 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h4><p>我们以图形化界面中的一个按钮举例。当鼠标点击按钮以后，硬件输入首先会进入一个系统消息队列，然后进入应用消息队列，此时应用消息程序会从消息队列中获得硬件输入的指令，应用消息程序中有WinMain消息循环函数，WinMain函数中有一个GetMassage函数，GetMassage函数从操作系统中获取系统调用，硬件输入的系统调用是OnOK()。在OnOK()中有fopen() 函数，printf() 函数，fclose() 函数，主要功能是获取硬件输入指令相应的信息，然后打印该信息最后关闭该信息。打印的信息作为OnOK()函数的返回值返回到getMassage函数，最后消息循环函数在处理这一硬件输入的循环过程结束，硬件输入的执行结果进入到消息队列中，最后返回给用户。</p><h3 id="一些常见的操作系统接口"><a href="#一些常见的操作系统接口" class="headerlink" title="一些常见的操作系统接口"></a>一些常见的操作系统接口</h3><p><strong>POSIX</strong>: Portable Operating System Interface of UNIX (IEEE 制定的一个标准族)</p><p>POSIX标准定义了操作系统应该为应用程序提供的接口标准，目的是为了增强程序的可移植性。</p><table><thead><tr><th align="center">分类</th><th align="center">POSIX 定义</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"></td><td align="center">fork</td><td align="center">创建一个进程</td></tr><tr><td align="center"><strong>任务管理</strong></td><td align="center">execl</td><td align="center">运行一个可执行程序</td></tr><tr><td align="center"></td><td align="center">pthread_create</td><td align="center">创建一个线程</td></tr><tr><td align="center"></td><td align="center">open</td><td align="center">打开一个文件或目录</td></tr><tr><td align="center"><strong>文件系统</strong></td><td align="center">EACCES</td><td align="center">返回值：表示没有权限</td></tr><tr><td align="center"></td><td align="center">mode_tst_mode</td><td align="center">文件头结构：文件属性</td></tr></tbody></table><h2 id="系统调用的实现"><a href="#系统调用的实现" class="headerlink" title="系统调用的实现"></a>系统调用的实现</h2><p>实现一个 <strong>whoami</strong>  系统调用，一个放在操作系统内核中的字符串 ”I am cxy“ (系统引导时被载入的)被取出来并打印。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设该段为用户程序</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">whoami();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//假设该段为内核代码</span></span><br><span class="line">whoami()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="number">100</span>,<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">"I am cxy"</span> <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><p><strong>要求</strong></p><ul><li>不能jmp，不应该jmp  唉</li><li>凭什么不让我jmp 害</li><li>不jmp该怎么实现 呢</li></ul><h3 id="为什么不可以jmp"><a href="#为什么不可以jmp" class="headerlink" title="为什么不可以jmp"></a>为什么不可以jmp</h3><p>操作系统在内存中，应用程序也在内存中，想访问操作系统提供的功能为什么不直接跳进去？直接 mov 不行嘛？</p><p>no no no !!!</p><p>直接mov jmp 就成为了简单的函数调用。操作系统中存储着重要的信息，如root 的用户名和密码，如果可以轻松进入随便访问，那么root的用户名和密码就很可能被应用程序给<strong>捞</strong>上来，太不安全。所以绝对不可以jmp，mov 进入操作系统内部。</p><h3 id="为什么jmp不进去"><a href="#为什么jmp不进去" class="headerlink" title="为什么jmp不进去"></a>为什么jmp不进去</h3><p>特权环：将内核程序与用户程序<strong>隔离</strong>-&gt; 区分为 <strong>内核态 和用户态</strong> (一种处理器的硬件设计刚性的)</p><p>计算机对内存的使用是一段一段的，内核态可以访问任何数据，用户态不可以 访问内核态数据 -&gt; 由段寄存器实现</p><p>两个特殊的段寄存器</p><p>DPL ：目标内存段的特权级</p><p>CPL ：当前内存段的特权级</p><p>只有当 CPL &lt;= DPL 即 当前内存段的特权级小于等于目标内存段的特权级才能进入到目标内存段</p><img src="/2021/05/23/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/1.png" alt="1" style="zoom:80%;"><p><strong>注解</strong></p><p>在操作系统初始化时，head.s执行时会针对内核态的代码和数据建立GDT表，对应的内核态的DPL为0 是初始化好的。当用户态执行的时候，启动一个用户程序，CS中的CPL = 3 (当操作系统初始化后推动用户态将CS的CPL置为3，之后就一直维持为3)。每次跳转或者mov 都要访问GDT表，当发现 CPL = 3 &gt; DPL = 0 时就直接挡住，根本不让你jmp mov ，所以也就无法通过 jmp、mov 进入内核。</p><h3 id="不jmp如何实现系统调用—中断"><a href="#不jmp如何实现系统调用—中断" class="headerlink" title="不jmp如何实现系统调用—中断"></a>不jmp如何实现系统调用—中断</h3><p>中断 -&gt; 硬件提供的“主动进入内核的方法” </p><p>中断是用户程序发起的调用内核代码的唯一方式</p><p>中断指令 int 0x80 -&gt; 操作系统初始化好的代码，只能从 int 0x80 这扇大门进入到操作系统内部 </p><p><strong>系统调用的核心</strong></p><ol><li>用户程序中包含一段含有int指令的代码</li><li>操作系统写中断处理，获取想调程序的编号</li><li>操作系统根据编号执行相应的代码</li></ol><h3 id="write-系统调用解析"><a href="#write-系统调用解析" class="headerlink" title="write()系统调用解析"></a>write()系统调用解析</h3><img src="/2021/05/23/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/2.png" alt="2" style="zoom:80%;"><p>首先应用程序调用printf，在库函数中变成了printf</p><p>我们使用printf的写法是printf(“%d”,i); 但事实上printf()内部是调用了系统函数 write();</p><p><strong>write的函数头部</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fd：要进行写操作的文件描述；buf：需要输出的缓冲区；count：最大输出字节计数</span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>;</span><br></pre></td></tr></table></figure><p>我们可以发现，printf()函数的形参和write()的形参是不一样的。所以要想通过printf()调用write()的话，首先就需要库函数格式化输出，采用c语言的处理方式使其转化成符合write()函数的格式。</p><p><strong>在printf函数里面调用write</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;unisted.h&gt;</span></span></span><br><span class="line">_syscall3(<span class="keyword">int</span>, <span class="built_in">write</span>, <span class="keyword">int</span>, fd, <span class="keyword">const</span> <span class="keyword">char</span>* buf, <span class="keyword">off_t</span>, count)</span><br></pre></td></tr></table></figure><h4 id="syscall3-宏"><a href="#syscall3-宏" class="headerlink" title="_syscall3 宏"></a>_syscall3 宏</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _syscall3(type,name,atype,a,btype,b,ctype,c)\</span></span><br><span class="line">type name(atype a, btype b, ctype c) \</span><br><span class="line"><span class="comment">//内嵌汇编</span></span><br><span class="line">&#123; <span class="keyword">long</span> __res;\</span><br><span class="line"><span class="function">__asm__ <span class="title">volatile</span><span class="params">(“<span class="keyword">int</span> <span class="number">0x80</span>”:”=a”(__res):””(__NR_##name), <span class="comment">//执行中断处理函数 int0x80 输出 res 输入 __NR_writ </span></span></span></span><br><span class="line">”b”((long)(a)),”c”((long)(b)),“d”((long)(c)))); if(__res&gt;=0) return</span><br><span class="line">(type)__res; errno=-__res; <span class="keyword">return</span> <span class="number">-1</span>;&#125;</span><br></pre></td></tr></table></figure><p><strong>_syscall3 宏注解</strong></p><ul><li>可以看出在printf函数里面调用write其实是利用了_syscall3 这个宏, _syscall3 宏调用之后就是展开成上面的一段汇编代码。主要就是将宏展开代码中的type,name,atype,a,btype,b,ctype,c 替换成了int, write, int, fd, const char* buf, off_t, count。                              因此type name(atype a, btype b, ctype c) 就变成了int write(int fd,const char * buf, off_t count)；</li><li>展开的汇编代码一样会跟着变化，此时出现了中断代码 int 0x80, (该段代码为_syscall3 的核心代码)操作系统内核的大门即将打开。之前我们了解到在head.s里面会重新建立idt表，之后中断就会根据中断号查那个表，然会获得中断服务函数的入口地址。</li><li>”=a”(res):””(NR_##name) -&gt; :左边为输出右边为输入。<br>”“(<em>NR##name) name为之前传入的参数 write 所以该条指令就是将<strong>NR_write = 4 赋值给eax这个寄存器，</strong>NR_write称为系统调用号，就是根据它来区分不同的系统调用函数同时获得中断函数的入口地址。如在linux/inlcude/unistd.h中 # define <em>_NR_write 4<br>”=a”(</em></em> res) 为输出，将来要把eax赋给res</li><li>”b”((long)(a)),”c”((long)(b)),“d”((long)(c))就是把形参的a、b、c依次赋值给ebx、ecx、edx三个寄存器；输入完成之后就通过int 0x80这个中断号进入操作系统。</li><li>int 0x80这条指令执行完之后，eax中就会存放int 0x80的返回值，然后将这个返回值赋值给<strong>res，</strong>res就是int write()这个系统调用的返回值，至此write这个系统调用也就结束了。</li></ul><h4 id="int-0x80"><a href="#int-0x80" class="headerlink" title="int 0x80"></a>int 0x80</h4><p>int 0x80 的实现  -&gt; 通过<strong>set_system_gate 中断处理门</strong> 取出中断处理函数然后跳到那里去执行 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sched_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; set_system_gate(<span class="number">0x80</span>,&amp;system_call); &#125;</span><br></pre></td></tr></table></figure><p>int 0x80对应的中断处理函数就是system_call，init 代表初始化，0x80就是要用后面这个 system_call来处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在linux/include/<span class="keyword">asm</span>/system.h中</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> set_system_gate(n, addr) \ <span class="comment">//n 中断处理号，addr 地址</span></span></span><br><span class="line">_set_gate(&amp;idt[n],<span class="number">15</span>,<span class="number">3</span>,addr); <span class="comment">//idt是中断向量表基址</span></span><br></pre></td></tr></table></figure><p>set_system_gate这个宏又调用了_set_gate这个宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在linux/include/<span class="keyword">asm</span>/system.h中</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _set_gate(gate_addr, type, dpl, addr)\</span></span><br><span class="line">__asm__(“movw %%dx,%%ax\n\t” “movw %<span class="number">0</span>,%%dx\n\t”\</span><br><span class="line">“movl %%eax,%<span class="number">1</span>\n\t” “movl %%edx,%<span class="number">2</span>”:\</span><br><span class="line">:”i”((short)(<span class="number">0x8000</span>+(dpl&lt;&lt;<span class="number">13</span>)+type&lt;&lt;<span class="number">8</span>))),“o”(*(( \</span><br><span class="line"><span class="keyword">char</span>*)(gate_addr))),”o”(*(<span class="number">4</span>+(<span class="keyword">char</span>*)(gate_addr))),\</span><br><span class="line">“d”((<span class="keyword">char</span>*)(addr),”a”(<span class="number">0x00080000</span>))</span><br></pre></td></tr></table></figure><p>_set_gate这个宏建立了类似于下图的表格</p><p><img src="/2021/05/23/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/3.png" alt="3"></p><p><strong>_set_gate的目的就是要改变特权级穿过特权环的隔离进入到内核</strong></p><p>用户态的程序如果要进入内核，必须使用0x80号中断，那么就必须先要进入idt表。用户态的CPL=3，且idt表的DPL故意设置成3，因此能够跳到idt表，跳到idt表中之后就能找到之后程序跳转的地方，也就是中断服务函数的起始地址，CS就是段选择符（8），ip就是”处理函数入口点偏移“。CS=8，IP =&amp;system_call就是跳到内核的system_call这个函数去执行；</p><p><strong>int 0x80 完整流程</strong></p><ul><li>初始化的时候0x80号中断的DPL设成3，让用户态的代码能跳进内核</li><li>进入内核后，设置CS = 8(CS 的最后两位为 00 所以 CPL 也就自然变成了0)，IP = &amp;system_call 来重置 PC指针</li><li>根据PC指针继续跳到 system_call 去执行</li><li>最后 int 0x80返回之后，CS最后两位再次变成3，变成用户态</li></ul><h4 id="system-call"><a href="#system-call" class="headerlink" title="system_call"></a>system_call</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在linux/kernel/system_call.s中</span><br><span class="line">nr_system_calls=<span class="number">72</span></span><br><span class="line">.globl _system_call</span><br><span class="line">_system_call: cmpl $nr_system_calls<span class="number">-1</span>,%eax</span><br><span class="line">ja bad_sys_call</span><br><span class="line">push %ds push %es push %fs</span><br><span class="line">pushl %edx pushl %ecx pushl %ebx <span class="comment">//调用的参数</span></span><br><span class="line">movl $<span class="number">0x10</span>,%edx mov %dx,%ds mov %dx,%es <span class="comment">//内核数据</span></span><br><span class="line">movl $<span class="number">0x17</span>,%edx mov %dx,%fs <span class="comment">//fs可以找到用户数据</span></span><br><span class="line">call _sys_call_table(,%eax,<span class="number">4</span>) <span class="comment">//a(,%eax,4)=a+4*eax</span></span><br><span class="line">pushl %eax <span class="comment">//返回值压栈，留着ret_from_sys_call时用</span></span><br><span class="line">... <span class="comment">//其他代码</span></span><br><span class="line">ret_from_sys_call: popl %eax, 其他pop, iret</span><br></pre></td></tr></table></figure><p><strong>system_call注解</strong></p><ul><li>system_call 的核心代码为 call _sys_call_table(,%eax,4) -&gt;通过call 跳到另外一个地址去执行</li><li>_sys_call_table(,%eax,4) 为一种寻址方式 -&gt; _sys_call_table + 4 * %eax 等于相应的系统调用处理函数真正的入口地址</li><li>_sys_call_table-&gt;函数表 起始地址； 4 -&gt;每个系统调用占4个字节； eax -&gt; 系统调用号__NR_write 4</li></ul><h4 id="sys-call-table"><a href="#sys-call-table" class="headerlink" title="_sys_call_table"></a>_sys_call_table</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在include/linux/sys.h中</span><br><span class="line">fn_ptr sys_call_table[]=</span><br><span class="line">&#123;sys_setup, sys_exit, sys_fork, sys_read, sys_write,</span><br><span class="line">...&#125;;</span><br><span class="line"></span><br><span class="line">在include/linux/sched.h中</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(fn_ptr*)</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><strong>_sys_call_table注解</strong></p><p>sys_call_table是一个fn_ptr类型的全局函数表，fn_ptr是一个函数指针，4个字节，这就是_sys_call_table+4*%eax  这里为什么要乘4的原因。查表然后就可以根据eax来知道要调用的真正中断服务函数的入口地址。此处 eax = __NR_write = 4, 找到下标4对应的函数即为 sys_write。所以 call _sys_call_table(,%eax,4) 就对应了 call sys_write 接着就真正开始执行系统函数 sys_write 了。</p><h4 id="write系统调用总结"><a href="#write系统调用总结" class="headerlink" title="write系统调用总结"></a>write系统调用总结</h4><p><strong>库函数printf -&gt; syscall3 -&gt; 库函数write -&gt; int 0x80 -&gt; system_call -&gt; sys_call_table -&gt; sys_write</strong></p><img src="/2021/05/23/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/6.png" alt="6" style="zoom:80%;"><p>库函数printf 通过 _syscall3 这个宏来调用 write 函数，在 write 函数中调用 system_call 来处理 int 0x80, 在system_call 中调用 system_call_table 这个表知道要调用的真正中断服务函数的入口地址，再根据 eax 中存储的系统调用号就可以真正跳到sys_write这个系统函数去执行了。执行完成后输出返回值并跳回用户态至此write的系统调用结束。</p><h2 id="whoami-系统调用设计"><a href="#whoami-系统调用设计" class="headerlink" title="whoami  系统调用设计"></a><strong>whoami</strong>  系统调用设计</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户态代码</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">eax = <span class="number">72</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="number">0x80</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中断处理</span></span><br><span class="line">system_call:</span><br><span class="line">_sys_call_table + eax * <span class="number">4</span>  <span class="comment">//sys_whoami() -&gt; 72</span></span><br><span class="line">call sys_whoami</span><br><span class="line"><span class="comment">//内核态代码 </span></span><br><span class="line">sys_whoami()</span><br><span class="line"> &#123;</span><br><span class="line"> printk(<span class="number">100</span>,<span class="number">8</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="string">"I am cxy"</span> <span class="comment">// 100地址处</span></span><br></pre></td></tr></table></figure><p>前面我们了解到，想要设计一个whoami() 系统调用，因为很不安全所以不允许jmp，此时用户态的CPL = 3，内核态代码DPL = 0,也根本跳不进来。我们要想设计一个系统调用就要必须通过操作系统硬件设计好的 int 0x80中断指令进入内核，所以我们自己设置系统调用号eax = 72 再通过int 0x80 进入到操作系统内部。那么此时我们用户态CPL = 3,  int 0x80 的DPL 也做成 3 ，就可以穿过接口了，一旦穿过去之后，CPL就会被置为0，然后就开始执行 system_call, 在 _sys_call_table中查表就调用了 sys_whoami(); 最终就真的进入到内核去执行sys_whoami()，这时候再用printk()将内存地址100 处的字符串 “I am cxy” 打印出来，故事就到这里结束了。</p><p><strong>参考资料</strong></p><ul><li><a href="https://www.bilibili.com/video/BV1d4411v7u7" target="_blank" rel="noopener">哈工大李治军操作系统</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;操作系统的接口&quot;&gt;&lt;a href=&quot;#操作系统的接口&quot; class=&quot;headerlink&quot; title=&quot;操作系统的接口&quot;&gt;&lt;/a&gt;操作系统的接口&lt;/h2&gt;&lt;p&gt;接口即一些函数，操作系统为上层应用提供一种进入到内核中的手段&lt;/p&gt;
&lt;p&gt;接口表现为函数调用又由系统提供，所以称为&lt;strong&gt;系统调用&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;操作系统向上连接的并不是用户而是应用程序&quot;&gt;&lt;a href=&quot;#操作系统向上连接的并不是用户而是应用程序&quot; class=&quot;headerlink&quot; title=&quot;操作系统向上连接的并不是用户而是应用程序&quot;&gt;&lt;/a&gt;操作系统向上连接的并不是用户而是应用程序&lt;/h3&gt;&lt;p&gt;接口是计算机系统中两个独立的部件进行信息交换的共享边界，应用程序与操作系统之间存在接口，操作系统和计算机硬件之间也存在接口。通过接口可以实现应用程序与操作系统之间的通信和操作系统与计算机硬件之间的通信。由此可见与操作系统相连接的并不是用户，而是应用程序。&lt;/p&gt;</summary>
    
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统的启动</title>
    <link href="http://yoursite.com/2021/05/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%90%AF%E5%8A%A8/"/>
    <id>http://yoursite.com/2021/05/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%90%AF%E5%8A%A8/</id>
    <published>2021-05-20T11:19:30.000Z</published>
    <updated>2021-06-02T12:56:04.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="打开电源那神秘的黑色背后发生着什么"><a href="#打开电源那神秘的黑色背后发生着什么" class="headerlink" title="打开电源那神秘的黑色背后发生着什么"></a>打开电源那神秘的黑色背后发生着什么</h2><ol><li>x86 PC刚开机时CPU处于实模式 （实模式即16bit，保护模式即32bit）</li><li>开始时，CS = 0xFFFF；IP = 0x0000；（CS-&gt; 段寄存器；IP-&gt;段内偏移; <strong>CS &lt;&lt; 4 + IP = 物理地址</strong>）</li><li>寻址 0xFFFF0(ROM BIOS 映射区)  （BIOS -&gt; Basic Input Output System；固化到内存地址为 0xFFFF0 处的一段代码）</li><li>检查RAM，键盘，显示器，软硬磁盘</li><li>将磁盘0磁道0扇区读入 0x7c00处 （0磁道0扇区为操作系统的引导扇区共 512byte）</li><li>设置CS = 0x07c0; IP = 0x0000;</li><li>寻址 0x7c00 开始执行操作系统引导扇区的代码</li></ol><a id="more"></a>  <p><strong>注解</strong></p><p>intel x86 PC机开机接通电源后，在内存0xFFFF0处固化了一段程序即 ROM BIOS ，由于计算机的工作原理是取指执行，如果内存中一片空白则无法进行取指执行，所以该段程序是由硬件已经做好的。刚一上电硬件自动设置 CS = 0xFFFF；IP = 0x0000；由于[CS &lt;&lt;4 + IP = 0xFFFF0] ，所以刚一上电就跳到了 BIOS区进行执行。执行该段固化好的代码-&gt; 1.检查RAM，键盘，显示器，软硬磁盘，2.将磁盘0磁道0扇区的代码读入到 0x7c00处 。然后更新 CS = 0x07c0; IP = 0x0000; 继续取指执行，寻址 0x7c00 开始执行操作系统引导扇区的代码。因此硬盘的第一个扇区上存放着开机后执行的第一段我们可以控制的程序。<strong>操作系统的故事从这里开始……</strong></p><h2 id="引导扇区代码-bootsect-s"><a href="#引导扇区代码-bootsect-s" class="headerlink" title="引导扇区代码 bootsect.s"></a>引导扇区代码 bootsect.s</h2><p><strong>为什么引导扇区的代码使用汇编</strong></p><p>在操作系统引导的过程中我们要保证有绝对的控制，使用汇编可以精准的变成机器指令去执行，而使用C语言则首先需要编译，在编译的过程中很可能会发生差错，没办法进行绝对的控制，就很可能发生死机的情况。</p><p><strong>bootsect核心代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">BOOTSEG = <span class="number">0x07c0</span></span><br><span class="line">INITSEG = <span class="number">0x9000</span></span><br><span class="line">SETUPSEG = <span class="number">0x9020</span></span><br><span class="line"></span><br><span class="line">entry start <span class="comment">//关键字entry告诉链接器“程序入口”</span></span><br><span class="line">start:</span><br><span class="line">    mov ax, #BOOTSEG mov ds, ax</span><br><span class="line">    mov ax, #INITSEG mov es, ax</span><br><span class="line">    mov cx, #<span class="number">256</span></span><br><span class="line">    sub si, si sub di,di</span><br><span class="line">    rep movw</span><br><span class="line">    jmpi go, INITSEG</span><br><span class="line"></span><br><span class="line">go: mov ax,cs <span class="comment">//cs=0x9000</span></span><br><span class="line">    mov ds,ax mov es,ax mov ss,ax mov sp,#<span class="number">0xff00</span></span><br><span class="line">load_setup: <span class="comment">//载入setup模块</span></span><br><span class="line">    mov dx,#<span class="number">0x0000</span> mov cx,#<span class="number">0x0002</span> mov bx,#<span class="number">0x0200</span></span><br><span class="line">    mov ax,#<span class="number">0x0200</span>+SETUPLEN <span class="keyword">int</span> <span class="number">0x13</span> <span class="comment">//BIOS中断</span></span><br><span class="line">    jnc ok_load_setup</span><br><span class="line">    mov dx,#<span class="number">0x0000</span></span><br><span class="line">    mov ax,#<span class="number">0x0000</span> <span class="comment">//复位</span></span><br><span class="line">    <span class="keyword">int</span> <span class="number">0x13</span></span><br><span class="line">    j load_setup <span class="comment">//重读</span></span><br></pre></td></tr></table></figure><ul><li>将磁盘上从第 2 到 5 的四个扇区构成的 setup 模块读入到了内存的0x90200 处；</li><li>然后打出一个 Logo；</li></ul><img src="/2021/05/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%90%AF%E5%8A%A8/1.png" alt="1" style="zoom:80%;"><p><strong>注解</strong></p><p>对于x86PC来说，bootsect  刚读进来是放在0x07c00这个位置，然后将其转移到0x90000这个位置，并继续执行；利用int 0x13中断，将操作系统的setup读入到0x90200开始的内存处；读入setup之后，bootsect 继续执行，在屏幕上显示开机logo “loading system…”，然后进入 read_it 继续读操作系统模块，并将控制权转移到setup中，执行setup中的内容。</p><h2 id="setup-s"><a href="#setup-s" class="headerlink" title="setup.s"></a>setup.s</h2><p><strong>setup-&gt;OS启动前的配置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SYSSEG = <span class="number">0x1000</span></span><br><span class="line"></span><br><span class="line">start: mov ax,          #INITSEG mov ds,ax mov ah,#<span class="number">0x03</span></span><br><span class="line">    <span class="keyword">xor</span> bh,bh <span class="keyword">int</span> <span class="number">0x10</span>  <span class="comment">//取光标位置dx mov [0],dx</span></span><br><span class="line">    mov ah,#<span class="number">0x88</span> <span class="keyword">int</span> <span class="number">0x15</span> mov [<span class="number">2</span>],ax ...</span><br><span class="line">    cli                 <span class="comment">//不允许中断</span></span><br><span class="line">    mov ax,             #<span class="number">0x0000</span> cld</span><br><span class="line">do_move: mov es,ax add ax,#<span class="number">0x1000</span></span><br><span class="line">    cmp ax,             #<span class="number">0x9000</span> jz end_move</span><br><span class="line">    mov ds,ax sub di,di</span><br><span class="line">    sub si,si</span><br><span class="line">    mov cx,             #<span class="number">0x8000</span></span><br><span class="line">    rep                 # 将system模块移到<span class="number">0</span>地址</span><br><span class="line">    movsw</span><br><span class="line">    jmp do_move</span><br></pre></td></tr></table></figure><ul><li>准备初始化参数 （将硬件参数存放到0x90000处）</li><li>将<strong>system操作系统主体模块</strong>移动到0地址处</li><li>临时建立GDT IDT表，<strong>jump 0，8</strong> 进入到保护模式下</li></ul><img src="/2021/05/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%90%AF%E5%8A%A8/2.png" alt="2" style="zoom: 80%;"><p><strong>注解</strong></p><p>操作系统是管理各种硬件的，要管理各种硬件就必须首先知道各种硬件参数。管理内存就要知道内存有多少，同时知道都被谁给占着，这就需要数据结构来存储这些信息。所以setup会获取各种硬件的信息并建立相应的数据结构来管理这些硬件。</p><p>CS是16bit寄存器，IP也是16bit的寄存器。CS&lt;&lt;4 + IP 最多只能形成一个 20 位地址放到地址总线上，所以最多只能寻址 <strong>1M</strong> 以内的内存。这对于现在的计算机是远远不够的。所以需要从实模式进入到保护模式下（1M -&gt; 4G）</p><p>16bit 模式和 32bit 模式的本质区别是 <strong>CPU的解释程序不同</strong></p><p>保护模式下的寻址方式不再是 CS&lt;&lt;4 + IP，而是根据<strong>CS(选择子) 查表 + IP</strong></p><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><p>执行完bootsect与setup模块之后，接着跳到system操作系统的主体模块进行执行。</p><h3 id="head-s"><a href="#head-s" class="headerlink" title="head.s"></a>head.s</h3><p>head.s是system模块开始的第一个文件，存放在0地址处</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stratup_32: movl $<span class="number">0x10</span>,%eax mov %ax,%ds mov %ax,%es</span><br><span class="line">    mov %as,%fs mov %as,%gs <span class="comment">//指向gdt的0x10项(数据段)</span></span><br><span class="line">    lss _stack_start,%esp <span class="comment">//设置栈(系统栈)</span></span><br><span class="line">    call setup_idt</span><br><span class="line">    call setup_gdt</span><br><span class="line">    xorl %eax,%eax</span><br><span class="line"><span class="number">1</span>:incl %eax</span><br><span class="line">    movl %eax,<span class="number">0x000000</span> cmpl %eax,<span class="number">0x100000</span></span><br><span class="line">    je <span class="number">1b</span> <span class="comment">//0地址处和1M地址处相同(A20没开启)，就死循环</span></span><br><span class="line">    jmp after_page_tables <span class="comment">//页表，什么东东?</span></span><br><span class="line">setup_idt: lea ignore_int,%edx</span><br><span class="line">    movl $<span class="number">0x00080000</span>,%eax movw %dx,%ax</span><br><span class="line">    lea _idt,%edi movl %eax,(%edi)</span><br></pre></td></tr></table></figure><ul><li>setup.s是进入保护模式，head.s是进入保护模式之后的初始化。</li><li>重新设置 GDT, IDT 表，重新开启A20地址线 （setup里设置的gdt与idt 是临时的，开启A20地址线后寻址范围就从1M变成了4G）</li><li>IDT表是中断函数表，从此int n 不再是DOS中断，而是在IDT表中找到中断函数的地址并执行。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">after_page_tables:</span><br><span class="line">    pushl $<span class="number">0</span> pushl $<span class="number">0</span> pushl $<span class="number">0</span> pushl $L6</span><br><span class="line">    pushl $_main jmp setup_paging</span><br><span class="line">L6: jmp L6</span><br><span class="line">setup_paging: 设置页表 ret</span><br></pre></td></tr></table></figure><ul><li>在前面开启20号地址线之后就jmp到after_page_tables这个标号处</li><li>在after_page_tables里面将main函数三个参数、L6、main函数的入口地址都压入栈中</li><li>在set_paging 执行完毕后，将ret到main() 函数执行</li></ul><p><strong>注解</strong></p><p>IDT,GDT 的查表都是硬件查表，都是硬件设计好的，目的就是为了速度快</p><p>head.s中使用的汇编和bootsect 及 setup的汇编不一样，head.s中使用的是32位的汇编代码，而bootsect及setup中使用的是16位的汇编代码。另外在操作系统的.c文件中还使用一种汇编为”内嵌汇编”。</p><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><p><strong>main函数完成了各种硬件数据结构的初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mem_init();</span><br><span class="line">    trap_init();</span><br><span class="line">    blk_dev_init();</span><br><span class="line">    chr_dev_init();</span><br><span class="line">    tty_init();</span><br><span class="line">    time_init();</span><br><span class="line">    sched_init();</span><br><span class="line">    buffer_init();</span><br><span class="line">    hd_init();</span><br><span class="line">    floppy_init();</span><br><span class="line">    sti();</span><br><span class="line">    move_to_user_mode();</span><br><span class="line">    <span class="keyword">if</span>(!fork())&#123;init();&#125;   <span class="comment">// 这行永远不会退出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>bootsect将操作系统从磁盘中读入进内存，setup获取一些硬件参数并进入到保护模式，head初始化一些gdt表，并初始化一些页表，之后跳到main函数，main中有一大堆init，完成对各种硬件数据结构的初始化。</p><p><strong>总体可以概括为两步</strong></p><ol><li>将操作系统读入到内存</li><li>初始化</li></ol><p>只有先将操作系统读入进内存后计算机才能进行取指执行</p><p>初始化是因为操作系统是管理计算机硬件的软件，要想管理硬件就先要对每一种硬件做出相应的数据结构。setup，head，main, mem-init 这些搭在一起就是为了 得到硬件参数，初始化关键的数据结构，为将来管理操作系统做准备。</p><p><strong>参考资料</strong></p><ul><li><a href="https://www.bilibili.com/video/BV1d4411v7u7" target="_blank" rel="noopener">哈工大李治军操作系统</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;打开电源那神秘的黑色背后发生着什么&quot;&gt;&lt;a href=&quot;#打开电源那神秘的黑色背后发生着什么&quot; class=&quot;headerlink&quot; title=&quot;打开电源那神秘的黑色背后发生着什么&quot;&gt;&lt;/a&gt;打开电源那神秘的黑色背后发生着什么&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;x86 PC刚开机时CPU处于实模式 （实模式即16bit，保护模式即32bit）&lt;/li&gt;
&lt;li&gt;开始时，CS = 0xFFFF；IP = 0x0000；（CS-&amp;gt; 段寄存器；IP-&amp;gt;段内偏移; &lt;strong&gt;CS &amp;lt;&amp;lt; 4 + IP = 物理地址&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;寻址 0xFFFF0(ROM BIOS 映射区)  （BIOS -&amp;gt; Basic Input Output System；固化到内存地址为 0xFFFF0 处的一段代码）&lt;/li&gt;
&lt;li&gt;检查RAM，键盘，显示器，软硬磁盘&lt;/li&gt;
&lt;li&gt;将磁盘0磁道0扇区读入 0x7c00处 （0磁道0扇区为操作系统的引导扇区共 512byte）&lt;/li&gt;
&lt;li&gt;设置CS = 0x07c0; IP = 0x0000;&lt;/li&gt;
&lt;li&gt;寻址 0x7c00 开始执行操作系统引导扇区的代码&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统概述</title>
    <link href="http://yoursite.com/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</id>
    <published>2021-05-16T08:44:16.000Z</published>
    <updated>2021-06-09T00:16:48.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机是如何工作的"><a href="#计算机是如何工作的" class="headerlink" title="计算机是如何工作的"></a>计算机是如何工作的</h2><h3 id="从白纸到图灵机"><a href="#从白纸到图灵机" class="headerlink" title="从白纸到图灵机"></a><strong>从白纸到图灵机</strong></h3><p>计算机是如何工作的说到底就是一个<strong>计算模型</strong></p><p>1936年，英国数学家A.C.图灵提出了一种模型，通过纸带模拟人使用笔在纸上进行计算。即在纸带上读入3，在纸带上读入2，在纸带上读入 +，控制器查表知道是5，接着在纸带上写下5；<strong>此时图灵机只能进行加法运算</strong>。</p><a id="more"></a>  <p><img src="/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/7.jpg" alt="7"></p><h3 id="从图灵机到通用图灵机"><a href="#从图灵机到通用图灵机" class="headerlink" title="从图灵机到通用图灵机"></a><strong>从图灵机到通用图灵机</strong></h3><p>只能进行加法运算的计算模型显然是不够的，接着人们将控制器进行更改，当遇到加法操作时就改为加法控制器，当遇到乘法操作时就将控制器更改为乘法控制器。此时的通用图灵机就可以根据不同的运算方式来进行不同的计算控制，实现了通用的计算模型。</p><img src="/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/6.jpg" alt="6" style="zoom: 80%;"><h3 id="从通用图灵机到计算机"><a href="#从通用图灵机到计算机" class="headerlink" title="从通用图灵机到计算机"></a><strong>从通用图灵机到计算机</strong></h3><p><strong>冯·诺依曼</strong>首次提出<strong>存储程序</strong>的思想。</p><p>一种将程序指令存储器和数据存储器合并在一起的电脑设计概念结构</p><p>计算机由五大部分组成：<strong>运算器、控制器、存储器、输入设备、输出设备</strong>。</p><p>存储程序计算机在体系结构上主要特点有：1.以运算单元为中心；2.采用存储程序原理；3.存储器是按地址访问、线性编址的空间；3.控制流由指令流产生；4.指令由操作码和地址码组成；6.数据以二进制编码；</p><p>计算机在程序的控制下一步一步的从存储器中取出指令并进行处理，从此计算机工作的原理变成了<strong>取指执行</strong></p><img src="/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/55.png" alt="55" style="zoom:50%;"><h2 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h2><h3 id="维基百科的解释"><a href="#维基百科的解释" class="headerlink" title="维基百科的解释"></a><strong>维基百科的解释</strong></h3><p>操作系统（英语：<strong>O</strong>perating <strong>S</strong>ystem，缩写：<strong>OS</strong>）是一组主管并控制计算机操作、运用和运行硬件、软件资源和提供公共服务来组织用户交互的相互关联的系统软件程序，同时也是计算机系统的内核与基石。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入与输出设备、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互的操作界面。</p><h3 id="简而言之"><a href="#简而言之" class="headerlink" title="简而言之"></a><strong>简而言之</strong></h3><p>键盘能输入，鼠标能点，显示器能看。人们可以在其上面进行听音乐、看小电影、浏览网站等一系列<strong>人机交互</strong>动作的啥东西。</p><h3 id="将操作系统立起来"><a href="#将操作系统立起来" class="headerlink" title="将操作系统立起来"></a><strong>将操作系统立起来</strong></h3><p>操作系统是工作在应用程序与计算机硬件之间的一层软件。向上给应用程序提供接口，向下管理各种硬件。</p><img src="/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/1.jpg" alt="1" style="zoom: 50%;"><h3 id="操作系统都管理那些硬件"><a href="#操作系统都管理那些硬件" class="headerlink" title="操作系统都管理那些硬件"></a><strong>操作系统都管理那些硬件</strong></h3><p>CPU管理    内存管理    终端管理    磁盘管理    文件管理    <em>网络管理    电源管理    多核管理</em></p><img src="/2021/05/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/8.jpg" alt="8" style="zoom:80%;"><h2 id="操作系统的历史"><a href="#操作系统的历史" class="headerlink" title="操作系统的历史"></a>操作系统的历史</h2><h3 id="多进程图谱主线"><a href="#多进程图谱主线" class="headerlink" title="多进程图谱主线"></a>多进程图谱主线</h3><h4 id="1955-1965-年-IBM-7094"><a href="#1955-1965-年-IBM-7094" class="headerlink" title="1955-1965 年 IBM 7094"></a>1955-1965 年 IBM 7094</h4><p>计算机使用只专注于科学计算</p><p>批处理操作系统</p><p>典型代表：IBSYS 监控系统</p><h4 id="1965-1980-从IBSYS-到-OS-360"><a href="#1965-1980-从IBSYS-到-OS-360" class="headerlink" title="1965-1980 从IBSYS 到 OS/360"></a>1965-1980 从IBSYS 到 OS/360</h4><p>计算机开始进入多个行业，开始让计算机做很多事，往往既有IO任务，又有计算任务，如果按照以往的批处理系统，在执行IO任务的时候cup就要停下来。你让这么重要的计算机停一会？你觉得合适嘛？</p><p>多进程结构和进程管理概念萌芽</p><p>所以这个时候就出现了 <strong>多道程序</strong>  作业间的切换 和 调度 成为了核心</p><h4 id="1965-1980-从OS-360到MULTICS"><a href="#1965-1980-从OS-360到MULTICS" class="headerlink" title="1965-1980 从OS/360到MULTICS"></a>1965-1980 从OS/360到MULTICS</h4><p> 从OS/360到MULTICS并没有本质的区别，核心同样都是任务切换多道处理，但是增加了<strong>分时系统</strong>的概念</p><p>此时OS/360操作系统已经可以同时执行多个程序但是进程的切换是 在<strong>执行不下去</strong>的情况才切换，所以就会出现个别程序得不到cpu调度始终无法得到执行的情况，始终等待老倒霉蛋了！</p><p>所以就进行优化出现了分时系统的概念，cpu根据时间定期的切换，每个进程都一段一段的向前推进。</p><p>从此多进程的结构更加的清晰</p><h4 id="1980-1990-MULTICS-到-UNIX"><a href="#1980-1990-MULTICS-到-UNIX" class="headerlink" title="1980-1990 MULTICS 到 UNIX"></a>1980-1990 MULTICS 到 UNIX</h4><p>小型化计算机出现</p><p>UNIX是一个简化的MULTICS，核心概念差不多，同样还是任务切换 分时系统，但是更加的灵活和成功</p><p>Ken Thompson 和 Dennis Ritchie于1969年在贝尔实验室开发  后来重新用c语言进行编写</p><p>他们两个人是唯一通过做出系统而获得图灵奖的人 同时c语言同样是他们创造的</p><h4 id="1990-2000从UNIX到Linux"><a href="#1990-2000从UNIX到Linux" class="headerlink" title="1990-2000从UNIX到Linux"></a>1990-2000从UNIX到Linux</h4><p>个人计算机开始普及，很多人开始使用计算机</p><p>1987年 Andrew Tanenbaum 发布了MINX(非常类似UNIX) 用于教学</p><p>Linus Torvalds 在360sx 兼容微机上学习 MINIX ,并作出小Linux 并于 1991年发布</p><p>1994年 Linux 1.0 采用GPL 协议发布</p><p>1998年以后，互联网世界里展开了一场历史性的Linux的产业化运动</p><h4 id="IBSYS-gt-OS-360-gt-MULTICS-gt-Unix-gt-Linux"><a href="#IBSYS-gt-OS-360-gt-MULTICS-gt-Unix-gt-Linux" class="headerlink" title="IBSYS - &gt; OS/360 - &gt; MULTICS -&gt; Unix -&gt; Linux"></a>IBSYS - &gt; OS/360 - &gt; MULTICS -&gt; Unix -&gt; Linux</h4><p><strong>总结历史</strong></p><p><strong>多进程结构是操作系统的基本图谱</strong></p><ul><li>用户通过执行程序来使用计算机-&gt; 吻合冯诺依曼思想</li><li>作为管理者，操作系统要让多个程序合理推进 -&gt; 进程管理</li><li>多进程推进时需要内存复用等等</li></ul><h3 id="文件操作视图辅线"><a href="#文件操作视图辅线" class="headerlink" title="文件操作视图辅线"></a>文件操作视图辅线</h3><h4 id="PC与DOS"><a href="#PC与DOS" class="headerlink" title="PC与DOS"></a>PC与DOS</h4><p>IBM推出 PC机后，操作系统出现了百家争鸣的局面</p><p>1975年 Digital Research 这家公司 为 Altair8800 开发了操作系统 CP/M</p><p> CP/M : 写命令让用户使用，执行命令对应的程序，为单任务执行</p><p>1980年 出现了 8080 16位芯片，从 CP/M 的基础上开发了 QDOS(Quick and Dirty OS)</p><h4 id="从QDOS到-MS-DOS"><a href="#从QDOS到-MS-DOS" class="headerlink" title="从QDOS到 MS-DOS"></a>从QDOS到 MS-DOS</h4><p><strong>Bill Gates</strong> 进入历史舞台…..</p><p>1975年，22岁的 Paul Allen 和 20 岁的 Bill Gates 为 Altair8800 开发了 BASIC 解释器，据此开创了微软</p><p>1977年，Bill Gates 开发了 FAT磁盘管理系统</p><p> <strong>QDOS 的成功在于 以 CP/M 为基础，将BASIC and FAT 整合了进来</strong></p><p>1980年，IBM 想和 Digital Research 合作要求授权使用 CP/M,但是没有成功，转而同微软合作</p><p>1981年，微软买下了 QDOS,并改名为 MS-DOS (Disk OS) 同 IBM PC 一起打包出售 火爆全场</p><h4 id="从MS-DOS到Windows"><a href="#从MS-DOS到Windows" class="headerlink" title="从MS-DOS到Windows"></a>从MS-DOS到Windows</h4><p>MS-DOS的磁盘 ，文件，命令，让人使用计算加很方便，但似乎可以更加的方便…</p><p>1989年，MS-DOS 4.0 出现，支持了鼠标和键盘，此时微软已经决定要放弃 MS - DOS</p><p>不久后，图形界面操作系统 Windows 3.0 大获成功 （乔布斯直呼内行hhh）</p><p>然后就一发不可收拾，95 、xp、Vista、Win7、Win8…</p><h4 id="Mac-OS-与-ios"><a href="#Mac-OS-与-ios" class="headerlink" title="Mac OS 与 ios"></a>Mac OS 与 ios</h4><p>1984年，苹果推出 PC(麦金塔机，Macintosh) ,简称Mac 机。其处理器使用 IBM Intel 或者AMD等 ，核心在于屏幕、能耗等</p><p>和 Mac 机一起发布 System X 系统，一上来就是 GUI 图形化系统</p><p>在System 7 以后改名为 Mac OS 8</p><p>2007年，苹果发布 ios，核心仍然是 Mac OS, 专为移动端设备使用</p><p><strong>Mac OS 的 核心是 Unix, 专注于界面、文件、媒体等 和用户有关的内容。</strong></p><h4 id="CP-M-gt-QDOS-gt-MS-DOS-gt-Windows-Unix-gt-System-gt-Mac-OS-gt-ios"><a href="#CP-M-gt-QDOS-gt-MS-DOS-gt-Windows-Unix-gt-System-gt-Mac-OS-gt-ios" class="headerlink" title="CP/M -&gt; QDOS -&gt; MS- DOS -&gt; Windows    /  Unix -&gt; System -&gt; Mac OS -&gt; ios"></a>CP/M -&gt; QDOS -&gt; MS- DOS -&gt; Windows    /  Unix -&gt; System -&gt; Mac OS -&gt; ios</h4><p><strong>总结历史</strong></p><ul><li>仍然是程序执行，多进程，程序执行带动其他设备使用的基本结构</li><li>但用户的体验感更受重视：各种文件、编程环境、图形界面</li></ul><p>至此操作系统两大基本主体伴随着操作系统历史更加的清晰！</p><p><strong>参考资料</strong></p><ul><li><a href="https://www.bilibili.com/video/BV1d4411v7u7" target="_blank" rel="noopener">哈工大李治军操作系统</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;计算机是如何工作的&quot;&gt;&lt;a href=&quot;#计算机是如何工作的&quot; class=&quot;headerlink&quot; title=&quot;计算机是如何工作的&quot;&gt;&lt;/a&gt;计算机是如何工作的&lt;/h2&gt;&lt;h3 id=&quot;从白纸到图灵机&quot;&gt;&lt;a href=&quot;#从白纸到图灵机&quot; class=&quot;headerlink&quot; title=&quot;从白纸到图灵机&quot;&gt;&lt;/a&gt;&lt;strong&gt;从白纸到图灵机&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;计算机是如何工作的说到底就是一个&lt;strong&gt;计算模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1936年，英国数学家A.C.图灵提出了一种模型，通过纸带模拟人使用笔在纸上进行计算。即在纸带上读入3，在纸带上读入2，在纸带上读入 +，控制器查表知道是5，接着在纸带上写下5；&lt;strong&gt;此时图灵机只能进行加法运算&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>java 基础类</title>
    <link href="http://yoursite.com/2020/09/17/java%E5%9F%BA%E7%A1%80%E5%BA%93%E7%B1%BB/"/>
    <id>http://yoursite.com/2020/09/17/java%E5%9F%BA%E7%A1%80%E5%BA%93%E7%B1%BB/</id>
    <published>2020-09-17T13:15:21.168Z</published>
    <updated>2021-05-23T07:10:35.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Main类"><a href="#Main类" class="headerlink" title="Main类"></a>Main类</h2><blockquote><p> JVM运行Java应用程序的时候，首先会调用main方法<br>  调用时不实例化这个类的对象,而是通过类名直接调用<br>  因此需要是限制为public static<br> main()方法定义：“public static void main(String[]  字符串数组参数名)”  </p></blockquote><h2 id="jvm有限制，不能有返回值，因此返回值类型为void"><a href="#jvm有限制，不能有返回值，因此返回值类型为void" class="headerlink" title="jvm有限制，不能有返回值，因此返回值类型为void"></a>jvm有限制，不能有返回值，因此返回值类型为void</h2>  <a id="more"></a>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span>  </span>&#123;</span><br><span class="line"><span class="comment">//主方法入口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//输出args数组的长度</span></span><br><span class="line">    System.out.println(args.length);</span><br><span class="line">    System.out.println(<span class="string">"打印main方法中的输出参数"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">    System.out.println(args[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><blockquote><p>  Object类在java.lang包中<br>   所有Java类都直接或间接扩展Object类<br>   所有Java类都是Object类的子类Object类是所有类的超类<br>   Object类本身没有超类<br>   Object类的引用变量可以保存任何类的对象的引用</p></blockquote><h3 id="Object类方法"><a href="#Object类方法" class="headerlink" title="Object类方法"></a>Object类方法</h3><ul><li><p>public String toString()<br>我们可以自定义它， 它返回对象的字符串表示形式 通常它用于调试目的<br> 如果类中未重写该方法，则输出：”类名@十六进制的hashcode值”，若重写，则输出表述该对象信息的字符串</p></li><li><p>System.out.println(xx)<br>括号里面的“xx”对象如果不是String类型的话，就自动调用xx的toString()方法</p></li><li><p>public boolean equals(Object obj) </p><p>它用于比较两个对象的相等性</p></li><li><p>public int hashCode()<br>它返回对象的哈希码（整数）值, 根据一定的规则将与对象相关的信息（比如对象的存储地址，对象的字段等）映射成一个数值，这个数值称作为散列值</p></li><li><p>protected void finalize() throws Throwable </p><p>它不是在Object类中实现 它在对象被销毁之前被垃圾收集器调用。</p></li><li><p>public final Class getClass()<br>  它返回对象的Class对象的引用即可以返回对象的父类等相关信息</p></li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String strObj = <span class="keyword">new</span> String();</span><br><span class="line">        ObjectTest obj = <span class="keyword">new</span> ObjectTest();</span><br><span class="line"></span><br><span class="line">        printClassInfo(strObj);</span><br><span class="line">        printClassInfo(obj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String str1 =<span class="keyword">new</span> String(<span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">//调用hasCode方法输出对象的哈希值</span></span><br><span class="line">        System.out.println(<span class="string">"str字符串的哈希值为："</span>+str1.hashCode());</span><br><span class="line">        equalsTest(str1);</span><br><span class="line">        <span class="comment">//调用toString方法返回str对象的字符串形式</span></span><br><span class="line">        System.out.println(<span class="string">"返回str对象的字符串形式："</span>+str1.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个printClassInfo()方法来描述getClass()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printClassInfo</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取类名</span></span><br><span class="line">        System.out.println(<span class="string">"类名："</span> + obj.getClass().getName());</span><br><span class="line">        <span class="comment">//获取父类名</span></span><br><span class="line">        System.out.println(<span class="string">"父类："</span>+obj.getClass().getSuperclass().getName());</span><br><span class="line">        <span class="comment">//获取接口信息并输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; obj.getClass().getInterfaces().length; i++) &#123;</span><br><span class="line">            System.out.println(obj.getClass().getInterfaces()[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个equalsTest方法来描述equals()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equalsTest</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        String passworld = <span class="string">"123456"</span>;</span><br><span class="line">        <span class="keyword">boolean</span> con;</span><br><span class="line">        <span class="keyword">if</span> (str.equals(passworld)) con = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            con=<span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(con);</span><br><span class="line">        <span class="keyword">return</span>  con;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String-StringBuffer-StringBuilder类"><a href="#String-StringBuffer-StringBuilder类" class="headerlink" title="String StringBuffer StringBuilder类"></a>String StringBuffer StringBuilder类</h2><blockquote><p>String 类一旦创建将不会改变<br>与String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象<br>tringBuffer用法和StringBuilder一样，不过，StringBuffer是线程安全的<br> StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder类</p></blockquote><h3 id="String类方法"><a href="#String类方法" class="headerlink" title="String类方法"></a>String类方法</h3><ul><li>char charAt(int index)<br>取字符串中的某一个字符，其中的参数index指的是字符串中序数。<br>   字符串的序数从0开始到length()-1    </li><li>int compareTo(String anotherString)<br>当前String对象与anotherString比较<br>  相等关系返回０；不相等时，从两个字符串第0个字符开始比较，返回第一个不相等的字符差<br>   另一种情况，较长字符串的前面部分恰巧是较短的字符串，返回它们的长度差  </li></ul><hr>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符串</span></span><br><span class="line">        String greeting =<span class="string">"hello world"</span>;</span><br><span class="line">        System.out.println(greeting);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//string和StringBuffer类的相互转换</span></span><br><span class="line">        <span class="comment">//注意：可以=解决scanner类输入字符串进行修改的问题</span></span><br><span class="line">        String aa =<span class="keyword">new</span> String(<span class="string">"123456"</span>);</span><br><span class="line">        StringBuilder bb = <span class="keyword">new</span>  StringBuilder(aa);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化字符转</span></span><br><span class="line">        <span class="keyword">char</span> [] helloArray = &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">        String arrayTest = <span class="keyword">new</span> String(helloArray);</span><br><span class="line">        System.out.println(arrayTest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出字符串的长度</span></span><br><span class="line">        System.out.println(arrayTest.length());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取字符串中的特定字符</span></span><br><span class="line">        System.out.println(arrayTest.charAt(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将两个字符串进行比较</span></span><br><span class="line">        String str1 = <span class="keyword">new</span> String(<span class="string">"i love cat"</span>);</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(<span class="string">"i love cat"</span>);</span><br><span class="line">        String str3 = <span class="keyword">new</span> String(<span class="string">"i love cat and dogs"</span>);</span><br><span class="line">        System.out.println(str1.compareTo(str2));</span><br><span class="line">        System.out.println(str1.compareTo(str3));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接两个字符串的方法</span></span><br><span class="line">        String str4 =<span class="string">"我的github网站："</span>;</span><br><span class="line">        String str5 =<span class="string">"https://github.com/hermit-rain"</span>;</span><br><span class="line">        System.out.println(str1.concat(str2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//描述StringBuilder类中主要使用的方法</span></span><br><span class="line">        StringBuilder str6 = <span class="keyword">new</span> StringBuilder(<span class="string">"hello "</span>);</span><br><span class="line">        <span class="comment">//追加</span></span><br><span class="line">        System.out.println(str6.append(<span class="string">"java"</span>));</span><br><span class="line">        <span class="comment">//反转</span></span><br><span class="line">        System.out.println(str6.reverse());</span><br><span class="line">        <span class="comment">//移除</span></span><br><span class="line">        System.out.println(str6.delete(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">        <span class="comment">//替换</span></span><br><span class="line">        System.out.println(str6.insert(<span class="number">0</span>,<span class="string">"hello java"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h2><blockquote><p>Scanner类包括文件输入和字符输入两种格式<br>next无法读取空格 遇到空格即停止编译  nextLine可以识别空格并成功输出<br>注意：Scanner类只能返回String类的对象 不能返回StringBuffer类的对象,要想调用StringBuffer方法必须将String类型转化成StringBuffer类型</p></blockquote><h3 id="Scanner类方法"><a href="#Scanner类方法" class="headerlink" title="Scanner类方法"></a>Scanner类方法</h3><ul><li>hasNext hasNextLine作为判断判否还有下一行输入  </li><li>next  nextLine 返回输入源中的下一行字符串</li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建Scanner类对象</span></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in) ;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//用next返回输入源中的下一行字符串</span></span><br><span class="line">        <span class="keyword">if</span> (scan.hasNext())&#123;</span><br><span class="line">            String str1 =scan.next();</span><br><span class="line">            System.out.println(<span class="string">"输出的数据是："</span>+str1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用 nextLine返回输入源中的下一行字符串</span></span><br><span class="line">        <span class="keyword">if</span> (scan.hasNextLine())&#123;</span><br><span class="line">            String str2 = scan.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"输入字符串str2："</span>+str2);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><blockquote><p>System类中包括类有 3 个静态成员变量<br>分别是 PrintStream out、InputStream in 和 PrintStream err  </p></blockquote><h3 id="System类方法"><a href="#System类方法" class="headerlink" title="System类方法"></a>System类方法</h3><ul><li>arrayCopy() 方法 该方法的作用是数组复制，即从指定源数组中复制一个数组 </li><li>currentTimeMillis() 方法 该方法的作用是返回当前的计算机时间  </li><li>identityHashCode(Object x) 该方法返回指定对象的精确hashCode值  <blockquote><blockquote><p>identityHashCode(Object x)与hashCode()两种方法的区别<br>Object的hashCode()默认是返回内存地址的，但是hashCode()可以重写，所以hashCode()不能代表内存地址的不同<br>System.identityHashCode(Object x)方法可以返回对象的内存地址,不管该对象的类是否重写了hashCode()方法<br>该方法返回指定对象的精确hashCode值，也就是根据该对象的地址计算得到的hashCode值，可以唯一地标识一个对象<br>判断两个对象是否是指向同一地址，应该用System.identityHashCode(Object x)方法进行判断 </p></blockquote></blockquote></li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//类方法arrayCopy</span></span><br><span class="line">        <span class="comment">// public static void arraycopy(Object src,int srcPos,Object dest,int destPos,int length)</span></span><br><span class="line">        <span class="comment">//src 表示源数组，srcPos 表示从源数组中复制的起始位置</span></span><br><span class="line">        <span class="comment">//dest 表示目标数组，destPos 表示要复制到的目标数组的起始位置，length 表示复制的个数。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] srcArray = &#123;<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>&#125;;</span><br><span class="line">        <span class="keyword">char</span>[] destArray = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line">        System.arraycopy(srcArray,<span class="number">1</span>,destArray,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"输出原数组："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;srcArray.length;i++)&#123;</span><br><span class="line">            System.out.println(srcArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"输出目标数组"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;destArray.length; j++)&#123;</span><br><span class="line">            System.out.println(destArray[j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//currentTimeMillis() 方法</span></span><br><span class="line">        <span class="comment">//该方法的作用是返回当前的计算机时间，</span></span><br><span class="line">        <span class="comment">// 时间的格式为当前计算机时间与 GMT 时间（格林尼治时间）1970 年 1 月 1 日 0 时 0 分 0 秒所差的毫秒数</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(startTime);</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">long</span> trem=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">100000000</span>;i++)&#123;</span><br><span class="line">            trem = trem+i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(trem);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> soTime=endTime-startTime;</span><br><span class="line">        System.out.println(soTime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// identityHashCode(Object x)与hashCode()方法返回相同的哈希值</span></span><br><span class="line">        String  str1= <span class="string">"hello"</span>;</span><br><span class="line">        String str2= <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(str1.hashCode()+<span class="string">"--------"</span>+str2.hashCode());</span><br><span class="line">        System.out.println(System.identityHashCode(str1)+<span class="string">"-----"</span>+System.identityHashCode(str2));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String str3 =<span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br><span class="line">        String str4 = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br><span class="line">        <span class="comment">//不同对象通过重写的hashCode()方法返回的值可能相同</span></span><br><span class="line">        System.out.println(str3 .hashCode()+<span class="string">"------"</span>+str4.hashCode());</span><br><span class="line">        <span class="comment">//因为str3和str4为两种不同的对象所以他们通过identityHashCode方法返回的内存地址不相同；</span></span><br><span class="line">        System.out.println(System.identityHashCode(str3)+<span class="string">"-----"</span>+System.identityHashCode(str4));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><blockquote><p>提供了两个静态变量：PI和E，值分别为：π和e<br>包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数等<br>Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用</p></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        a=<span class="number">9</span>;</span><br><span class="line">        b=-<span class="number">10</span>;</span><br><span class="line">        System.out.println(Math.abs(b));</span><br><span class="line">        <span class="comment">//计算乘方</span></span><br><span class="line">        System.out.println(Math.pow(a,b));</span><br><span class="line">        <span class="comment">//计算自然对数</span></span><br><span class="line">        System.out.println(Math.log(a));</span><br><span class="line">        <span class="comment">//找出最大值</span></span><br><span class="line">        System.out.println(Math.max(<span class="number">7</span>,<span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出90度的正弦值</span></span><br><span class="line">        <span class="comment">//调用Math中的静态变量PI</span></span><br><span class="line">        System.out.println(<span class="string">"90度的正弦值为："</span>+Math.sin(Math.PI/<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h2><blockquote><p>Random类专门用于生成一个随机数<br>它有两个构造器，一个是使用默认的种子（以当前时间为种子），另一个是显式传入一个long整型的种子<br>使用相同的种子可以产生相同的随机数<br>为了避免产生相同的随机数常推荐使用当前时间作为 Random对象的种子<br>Random  rand  = new  Random (System.currentTimeMills()) ;</p><blockquote><p>相比于Math的random()方法，Random类提供了更多的方式来生成各种伪随机数<br>既可以生成浮点类型的伪随机数，也可以生成整数类型的伪随机数，还可以指定生成随机数的范围<br>ThreadLocalRandom类是Random的增强版<br>在并发访问的环境下，使用ThreadLocalRandom来代替Random可以减少多线程资源竞争，保证线程安全<br>它提供了一个静态方法current( )方法来获取对象，然后调用各种nextXxx( ) 方法来获取各种基本类型的随机数</p></blockquote></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//随机产生布尔类型的随机数</span></span><br><span class="line">        System.out.println(rand.nextBoolean());</span><br><span class="line">        <span class="comment">// 生成0.0~1.0之间的伪随机double数</span></span><br><span class="line">        System.out.println(rand.nextDouble());</span><br><span class="line">        <span class="comment">// 生成一个处于int整数取值范围的伪随机整数</span></span><br><span class="line">        System.out.println(rand.nextInt());</span><br><span class="line">        <span class="comment">// 生成0~26之间的伪随机整数</span></span><br><span class="line">        System.out.println(rand.nextInt(<span class="number">26</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用相同的种子产生相同的随机数</span></span><br><span class="line">        Random rand1 = <span class="keyword">new</span> Random(<span class="number">50</span>);</span><br><span class="line">        Random rand2 = <span class="keyword">new</span> Random(<span class="number">50</span>);</span><br><span class="line">        System.out.println(rand1.nextInt());</span><br><span class="line">        System.out.println(rand2.nextInt());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用当前时间作为种子产生随机数</span></span><br><span class="line">        Random rand3 = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">        Random rand4 = <span class="keyword">new</span> Random(System.currentTimeMillis()+<span class="number">1000</span>);</span><br><span class="line">        System.out.println(rand3.nextInt());</span><br><span class="line">        System.out.println(rand4.nextInt());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过ThreadLocalRandom类来生成随机数</span></span><br><span class="line">        ThreadLocalRandom rand5 = ThreadLocalRandom.current();</span><br><span class="line">        ThreadLocalRandom rand6 = ThreadLocalRandom.current();</span><br><span class="line">        <span class="keyword">int</span>  val  = rand5.nextInt(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">long</span> va2 = (<span class="keyword">long</span>) rand6.nextDouble(<span class="number">10.00</span>);</span><br><span class="line">        System.out.println(val);+</span><br><span class="line">        System.out.println(va2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h2><blockquote><p>Runtime类描述Java程序的运行时环境<br>每个Java程序都有一个与之对应的Runtime实例<br>该类会被自动创建，我们可以通过Runtime.getRuntime() 方法来获取当前程序的Runtime实例。<br>应用程序通过该对象与其运行的环境相连接 可以访问JVM的相关信息，如处理器数量、内存信息等  </p></blockquote><h3 id="Runtime类方法"><a href="#Runtime类方法" class="headerlink" title="Runtime类方法"></a>Runtime类方法</h3><ul><li>public static Runtime getRuntime（）： 此方法返回与当前Java应用程序关联的实例或Runtime对象。  </li><li>public long freeMemory（）：此方法返回JVM（Java虚拟机）中的可用内存量  </li><li>public long totalMemory（）：此方法返回JVM（Java虚拟机）中的总内存量  </li><li>public long maxMemory（）：此方法返回Java虚拟机将尝试使用的最大内存量  </li><li>public Process exec（String command）抛出IOException：此方法在单独的进程中执行给定的命令  </li><li>public void gc（）：此方法运行垃圾收集器。调用此方法表明Java虚拟机花费了大量精力来回收未使用的对象，以使其当前占用的内存可用于快速重用  </li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个实例化对象</span></span><br><span class="line">        Runtime run = Runtime.getRuntime();</span><br><span class="line">        <span class="comment">//调用Runtime中的方法获取jvm的相关信息</span></span><br><span class="line">        System.out.println(<span class="string">"jvm中可用的内存数："</span>+run.freeMemory());</span><br><span class="line">        System.out.println(<span class="string">"jvm中总内存数："</span>+run.totalMemory());</span><br><span class="line">        System.out.println(<span class="string">"jvm尝试使用最大的内存数："</span>+run.maxMemory());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过exec方放来调用jvm单独启用一个进程来执行操作命令</span></span><br><span class="line">        run.exec(<span class="string">"notepad.exe"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用Runtime中gc()方法进行垃圾回收</span></span><br><span class="line">        run.gc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><blockquote><p>Data类共有两种构造器分别是无参和有参数的构造器  </p><blockquote><p>Date()   生成一个代表当前日期时间的对象<br>Date(long date) 根据指定的long型整数来生成一个Date对象  </p></blockquote></blockquote><h3 id="Date类方法"><a href="#Date类方法" class="headerlink" title="Date类方法"></a>Date类方法</h3><ul><li>boolean after(Date date)：判断当前日期是否在date之后  </li><li>boolean before(Date date)：判断当前日期是否在date之前  </li><li>long  getTime()：返回该时间对应的long型整数，即从1970年1月1日00:00:00到当前对象之间的时间差  </li><li>int compareTo(Date date)<br>比较当调用此方法的Date对象和指定日期<br>两者相等时候返回0，调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数  </li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Date date =<span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date.toString());</span><br><span class="line">        Date date1 =<span class="keyword">new</span> Date(System.currentTimeMillis());</span><br><span class="line">        <span class="comment">//注意参数的设置：  Date类的年份是以1900开头，以0月开头的；</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">2020</span>-<span class="number">1900</span>,<span class="number">6</span>-<span class="number">1</span>,<span class="number">12</span>);</span><br><span class="line">        System.out.println(date1);</span><br><span class="line">        System.out.println(date2);</span><br><span class="line">        <span class="comment">//返回当前时间对应的long型整数</span></span><br><span class="line">        System.out.println(date.getTime());</span><br><span class="line">        System.out.println(date.before(date2));</span><br><span class="line">        System.out.println(date.after(date2));</span><br><span class="line">        System.out.println(date.compareTo(date2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><blockquote><p>Calendar类是一个抽象类，因此不能用构造器来创建对象，必须通过静态方法getInstance( )方法来获取Calendar对象<br>Calendar类可以直接对date的年份，月份或者日期进行更改</p><blockquote><p>roll以及add的区别<br>add方法的月份增加年份会进行递增</p><h2 id="roll方法月份的增加只会自身进行循环"><a href="#roll方法月份的增加只会自身进行循环" class="headerlink" title="roll方法月份的增加只会自身进行循环"></a>roll方法月份的增加只会自身进行循环</h2></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个代表系统当前日期的Calendar对象</span></span><br><span class="line">        Calendar c1 = Calendar.getInstance();</span><br><span class="line">        Date date = c1.getTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个指定时间的Calendar对象</span></span><br><span class="line">        Calendar c2 =Calendar.getInstance();</span><br><span class="line">        c2.set(<span class="number">2008</span>,<span class="number">9</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        System.out.println(c2.getTime());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出某个时间对象的具体年份月份以及日</span></span><br><span class="line">        System.out.println(c2.get(Calendar.YEAR));</span><br><span class="line">        System.out.println(c2.get(Calendar.MONTH));</span><br><span class="line">        System.out.println(c2.get(Calendar.DATE));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更改年月日</span></span><br><span class="line">         c1.add(Calendar.YEAR,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//添加的月份数满12个月后年份会自动增加一位</span></span><br><span class="line">         c1.add(Calendar.MONTH,<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// roll方法的月份增加只会改变月份，如果满12则会进行迭代</span></span><br><span class="line">         c2.roll(Calendar.MONTH,<span class="number">10</span>);</span><br><span class="line">         c1.add(Calendar.DATE,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(c1.get(Calendar.YEAR));</span><br><span class="line">        System.out.println(c1.get(Calendar.MONTH));</span><br><span class="line">        System.out.println(c1.get(Calendar.DATE));</span><br><span class="line">        System.out.println(c2.get(Calendar.MONTH));</span><br><span class="line">        System.out.println(c1.get(Calendar.DATE));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Date类与Calendar类的相互转换 </span></span><br><span class="line">        <span class="comment">//Date类转Calendar类</span></span><br><span class="line">        Calendar cal1 = Calendar.getInstance();</span><br><span class="line">        Date  date1 = cal1.getTime();</span><br><span class="line">        <span class="comment">//Calendar类转Date类</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date();</span><br><span class="line">        Calendar cal2 =Calendar.getInstance();</span><br><span class="line">        cal2.setTime(date2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BigDecimal类"><a href="#BigDecimal类" class="headerlink" title="BigDecimal类"></a>BigDecimal类</h2><blockquote><p>float和double类型的主要设计目标是为了科学计算和工程计算<br>因在于我们的计算机是二进制的 浮点数没有办法是用二进制进行精确表示<br>商业计算往往要求结果精确，这时候BigDecimal就派上大用场  </p></blockquote><h3 id="BigDecimal类的常用构造方法"><a href="#BigDecimal类的常用构造方法" class="headerlink" title="BigDecimal类的常用构造方法"></a>BigDecimal类的常用构造方法</h3><ul><li>1.public BigDecimal(double val)    将double表示形式转换为BigDecimal 不建议使用  </li><li>2.public BigDecimal(int val)　　将int表示形式转换成BigDecimal  </li><li>3.public BigDecimal(String val)　　将String表示形式转换成BigDecimal  <blockquote><blockquote><p>注意：参数类型为double的构造方法的结果有一定的不可预知性 String 构造方法是完全可预知的<br>所以BigDecimal类最好使用String类的构造器  </p></blockquote></blockquote></li></ul><h3 id="BigDecimal类的常用方法"><a href="#BigDecimal类的常用方法" class="headerlink" title="BigDecimal类的常用方法"></a>BigDecimal类的常用方法</h3><ul><li>public BigDecimal add(BigDecimal value);                加法  </li><li>public BigDecimal subtract(BigDecimal value);           减法</li><li>public BigDecimal multiply(BigDecimal value);           乘法  </li><li>public BigDecimal divide(BigDecimal value);             除法  </li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigDecimalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//BigDecimal类的基础对象的构建</span></span><br><span class="line">        BigDecimal doubleTest1 = <span class="keyword">new</span> BigDecimal(<span class="string">"0.01"</span>);</span><br><span class="line">        BigDecimal doubleTest2 = <span class="keyword">new</span> BigDecimal(<span class="number">0.01</span>);</span><br><span class="line">        BigDecimal intTest1 = <span class="keyword">new</span> BigDecimal(<span class="number">178</span>);</span><br><span class="line">        <span class="comment">//string 的构造器是完全预知的所以可以精确的表示0.01</span></span><br><span class="line">        System.out.println(doubleTest1);</span><br><span class="line">        <span class="comment">//0.01无法精确的表示double所以系统会默认随机补位</span></span><br><span class="line">        System.out.println(doubleTest2);</span><br><span class="line">        System.out.println(intTest1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//BigDecimal类的基础方法的使用</span></span><br><span class="line">        BigDecimal testNumber1 = <span class="keyword">new</span> BigDecimal(<span class="string">"0.15"</span>);</span><br><span class="line">        BigDecimal testNumber2 = <span class="keyword">new</span> BigDecimal(<span class="string">"0.03"</span>);</span><br><span class="line">        System.out.println(testNumber1.add(testNumber2));</span><br><span class="line">        System.out.println(testNumber1.subtract(testNumber2));</span><br><span class="line">        System.out.println(testNumber1.multiply(testNumber2));</span><br><span class="line">        System.out.println(testNumber1.divide(testNumber2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><blockquote><p>正则表达式定义了字符串的模式，相当于构建了一个java字符串的自定义模板<br>java.util.regex 包主要包括以下两个类：<br>attern 类：<br>pattern 对象是一个正则表达式的编译表示<br>Pattern 类没有公共构造方法 要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法<br>它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数<br>Matcher 类：<br>Matcher 对象是对输入字符串进行解释和匹配操作的引擎<br>与Pattern 类一样，Matcher 也没有公共构造方法<br>需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象  </p></blockquote><h3 id="Matcher-类的方法"><a href="#Matcher-类的方法" class="headerlink" title="Matcher 类的方法"></a>Matcher 类的方法</h3><ul><li>public int start()  返回以前匹配的初始索引  </li><li>public int end() 返回最后匹配字符之后的偏移量  </li><li>public boolean find()  尝试查找与该模式匹配的输入序列的下一个子序列  </li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="keyword">new</span> String(<span class="string">"请尽快联系我17824852705,我的电话是15143385727出售二手书籍16824852705"</span>);</span><br><span class="line">        <span class="comment">// 创建一个pattern字符串模板</span></span><br><span class="line">        Pattern pat = Pattern.compile(<span class="string">"((17\\d)|(15\\d))\\d&#123;8&#125;"</span>);</span><br><span class="line">        <span class="comment">//调用Pattern类的matcher方法创建一个Matcher对象</span></span><br><span class="line">        Matcher m =pat.matcher(str);</span><br><span class="line">        <span class="comment">//将给定字符串与模板字符串进行比较</span></span><br><span class="line">        <span class="keyword">while</span> (m.find())&#123;</span><br><span class="line">            <span class="comment">//输出所有与模板字符串相匹配的字符串</span></span><br><span class="line">            System.out.println(m.group());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//描述正则表达式的特殊字符</span></span><br><span class="line">        Pattern pat2 =Pattern.compile(<span class="string">"a*b"</span>);</span><br><span class="line">        Matcher m2 = pat2.matcher(<span class="string">"aab"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> boo = m2.matches();</span><br><span class="line">        System.out.println(boo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">//Matcher类end()和start()方法</span></span><br><span class="line">         String str2 =<span class="keyword">new</span> String(<span class="string">"java is very good "</span>);</span><br><span class="line">         System.out.println(<span class="string">"目标字符串："</span>+str2);</span><br><span class="line">         Matcher m3 = Pattern.compile(<span class="string">"\\w+"</span>).matcher(str2);</span><br><span class="line">         <span class="keyword">while</span>(m3.find())&#123;</span><br><span class="line">             System.out.println(m3.group()+<span class="string">"起始字符位置："</span>+m3.start()+<span class="string">"结尾字符位置："</span>+ m3.end());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         <span class="comment">//通过正则表达式输出字符串数组</span></span><br><span class="line">         String[] mails = &#123;<span class="string">"kongyeeku@163.com"</span>, <span class="string">"kongyeeku@gmail.com"</span>, <span class="string">"ligang@crazyit.org"</span>, <span class="string">"wawa@abc.xx"</span>&#125;;</span><br><span class="line">         String mailRegEx = <span class="string">"\\w&#123;3,20&#125;@\\w+\\.(com|org|cn|net|gov)"</span>;</span><br><span class="line"></span><br><span class="line">         Pattern mailPattern =Pattern.compile(mailRegEx);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//用for循环for（：）方法对数组进行遍历输出</span></span><br><span class="line">         Matcher matcher =<span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">for</span>(String mail :mails)&#123;</span><br><span class="line">            <span class="keyword">if</span> (matcher == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//第一次匹配时创建matcher对象</span></span><br><span class="line">                matcher = mailPattern.matcher(mail);</span><br><span class="line">                <span class="comment">//先重置目标字符串-避免后面重置时第一个数组会输出两次；</span></span><br><span class="line">                matcher.reset(mail);</span><br><span class="line">                <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">                    System.out.println(matcher.group());</span><br><span class="line">                &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Main类&quot;&gt;&lt;a href=&quot;#Main类&quot; class=&quot;headerlink&quot; title=&quot;Main类&quot;&gt;&lt;/a&gt;Main类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt; JVM运行Java应用程序的时候，首先会调用main方法&lt;br&gt;  调用时不实例化这个类的对象,而是通过类名直接调用&lt;br&gt;  因此需要是限制为public static&lt;br&gt; main()方法定义：“public static void main(String[]  字符串数组参数名)”  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;jvm有限制，不能有返回值，因此返回值类型为void&quot;&gt;&lt;a href=&quot;#jvm有限制，不能有返回值，因此返回值类型为void&quot; class=&quot;headerlink&quot; title=&quot;jvm有限制，不能有返回值，因此返回值类型为void&quot;&gt;&lt;/a&gt;jvm有限制，不能有返回值，因此返回值类型为void&lt;/h2&gt;</summary>
    
    
    
    
    <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Windows如何重做系统</title>
    <link href="http://yoursite.com/2020/09/01/window10/"/>
    <id>http://yoursite.com/2020/09/01/window10/</id>
    <published>2020-09-01T05:06:33.000Z</published>
    <updated>2021-06-09T00:34:15.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要重做系统"><a href="#为什么要重做系统" class="headerlink" title="为什么要重做系统"></a>为什么要重做系统</h2><p>1.提高系统稳定性<br>2.清理系统垃圾<br>3.修复缺失的系统文件<br>4.杀死病毒<br>5.系统崩溃——没招  </p><a id="more"></a><h2 id="重置系统与重装系统的区别"><a href="#重置系统与重装系统的区别" class="headerlink" title="重置系统与重装系统的区别"></a>重置系统与重装系统的区别</h2><p>1.重置利用系统现有的资源重新组成可用的系统，重装把全新的系统写入电脑<br>2.重置可以主动保留必要的文件（电脑可以开机），重装系统则需要手动备份<br>3.重置可能不会解决系统所有的问题，重装一定会<br>4.重置不需要借助工具，重装需要借助光盘或者U盘做介质下载系统镜像<br>5.重置系统后联网自动激活重装系统后可能存在系统激活问题<br>6.若系统损坏严重则只能进行系统重装</p><h2 id="重做系统的注意事项"><a href="#重做系统的注意事项" class="headerlink" title="重做系统的注意事项"></a>重做系统的注意事项</h2><p>1.重装系统和重置系统都会格式化系统盘<br>2.数字权利—包括一些激活码和正版软件的激活可能失效（注意保留激活工具）  </p><h2 id="重置系统"><a href="#重置系统" class="headerlink" title="重置系统"></a>重置系统</h2><p>windows&gt;设置&gt;更新和安全&gt;恢复</p><p><img src="/2020/09/01/window10/1.png" alt="alt"></p><h2 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>工具：8G以上的U盘  </p><h4 id="下载镜像源："><a href="#下载镜像源：" class="headerlink" title="下载镜像源："></a>下载镜像源：</h4><p>旧版本的系统镜像源（非官方授权）<br>[msdn I tell you]  (<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a>)   </p><p><img src="/2020/09/01/window10/2.png" alt="alt"><br>Window10<br>[微软官网]  (<a href="https://www.microsoft.com/zh-cn/software-download/windows10/" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/software-download/windows10/</a>)    </p><p><img src="/2020/09/01/window10/3.png" alt="alt"><br>下载安装工具后运行插入U盘选择为另一台电脑安装介质  </p><p><img src="/2020/09/01/window10/4.png" alt="alt">  </p><p>（注意: U盘插入后微软会自动格式化U盘）  </p><h3 id="开始重装"><a href="#开始重装" class="headerlink" title="开始重装"></a>开始重装</h3><p>1.插入U盘  </p><p>2.通过bios设置U盘为第一启动项  </p><p>3.进入系统安装界面进行逐步安装  </p><p><img src="/2020/09/01/window10/5.png" alt="alt">    </p><p>(注：在安装成功后系统重新启动时要拔出U盘)</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;为什么要重做系统&quot;&gt;&lt;a href=&quot;#为什么要重做系统&quot; class=&quot;headerlink&quot; title=&quot;为什么要重做系统&quot;&gt;&lt;/a&gt;为什么要重做系统&lt;/h2&gt;&lt;p&gt;1.提高系统稳定性&lt;br&gt;2.清理系统垃圾&lt;br&gt;3.修复缺失的系统文件&lt;br&gt;4.杀死病毒&lt;br&gt;5.系统崩溃——没招  &lt;/p&gt;</summary>
    
    
    
    
    <category term="windows" scheme="http://yoursite.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>uni--app 接入高德地图</title>
    <link href="http://yoursite.com/2020/08/24/uni-app%E5%BC%80%E5%8F%91-%E5%89%8D%E7%AB%AF%E5%9C%B0%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2020/08/24/uni-app%E5%BC%80%E5%8F%91-%E5%89%8D%E7%AB%AF%E5%9C%B0%E5%9B%BE%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-08-24T05:06:33.000Z</published>
    <updated>2021-05-23T07:10:36.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、搭建Android开发环境"><a href="#一、搭建Android开发环境" class="headerlink" title="一、搭建Android开发环境"></a>一、搭建Android开发环境</h1><p>[开发工具：HBuilder X ]  (<a href="https://www.cnblogs.com/qisi007/p/10489176.html" target="_blank" rel="noopener">https://www.cnblogs.com/qisi007/p/10489176.html</a>)  </p><p>[ Android SDK 安装及配置]  ( <a href="https://www.cnblogs.com/nebie/p/9145627.html" target="_blank" rel="noopener">https://www.cnblogs.com/nebie/p/9145627.html</a>) </p><p>[JDK的安装及配置]  (<a href="https://zhuanlan.zhihu.com/p/105478993" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/105478993</a>)  </p><a id="more"></a><h2 id="二、-地图实现"><a href="#二、-地图实现" class="headerlink" title="二、    地图实现"></a>二、    地图实现</h2><h3 id="注册高德地图开发者账号"><a href="#注册高德地图开发者账号" class="headerlink" title="注册高德地图开发者账号"></a>注册高德地图开发者账号</h3><ul><li><p>[注册账号]  (<a href="https://lbs.amap.com/" target="_blank" rel="noopener">https://lbs.amap.com/</a>)    </p><h3 id="创建应用获取key（Android平台）"><a href="#创建应用获取key（Android平台）" class="headerlink" title="创建应用获取key（Android平台）"></a>创建应用获取key（Android平台）</h3></li><li><p>[创建Android平台签名证书 获取发布版SHA1值 ]  (<a href="https://ask.dcloud.net.cn/article/35777" target="_blank" rel="noopener">https://ask.dcloud.net.cn/article/35777</a>) </p></li><li><p>[获取调试版SHA1值]  ( <a href="https://blog.csdn.net/qq_21402513/article/details/51982234" target="_blank" rel="noopener">https://blog.csdn.net/qq_21402513/article/details/51982234</a>)  </p></li></ul><h3 id="获取PackageName"><a href="#获取PackageName" class="headerlink" title="获取PackageName"></a>获取PackageName</h3><ul><li>在HBuilder X中创建工程在发行云打包上获取Android包名即可    </li></ul><h3 id="创建应用获取key（小程序平台）"><a href="#创建应用获取key（小程序平台）" class="headerlink" title="创建应用获取key（小程序平台）"></a>创建应用获取key（小程序平台）</h3><ul><li>直接可得到key   </li></ul><h3 id="下载相应的sdk文件导入项目"><a href="#下载相应的sdk文件导入项目" class="headerlink" title="下载相应的sdk文件导入项目"></a>下载相应的sdk文件导入项目</h3><ul><li>[ Android sdk] ( <a href="https://lbs.amap.com/api/android-sdk/summary/" target="_blank" rel="noopener">https://lbs.amap.com/api/android-sdk/summary/</a>)  </li><li>[小程序 sdk ]  ( <a href="https://lbs.amap.com/api/wx/summary/" target="_blank" rel="noopener">https://lbs.amap.com/api/wx/summary/</a>)  <h3 id="在项目中创建Amap对象"><a href="#在项目中创建Amap对象" class="headerlink" title="在项目中创建Amap对象"></a>在项目中创建Amap对象</h3></li><li>[创建对象]  (<a href="https://ask.dcloud.net.cn/article/35070" target="_blank" rel="noopener">https://ask.dcloud.net.cn/article/35070</a>)  <h2 id="三、-运行"><a href="#三、-运行" class="headerlink" title="三、    运行"></a>三、    运行</h2><h3 id="运行到小程序模拟器"><a href="#运行到小程序模拟器" class="headerlink" title="运行到小程序模拟器"></a>运行到小程序模拟器</h3></li><li>[安装微信开发者工具]<br> (<a href="https://jingyan.baidu.com/article/f0e83a2558580022e591018b.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/f0e83a2558580022e591018b.html</a> )  </li><li>[获取小程序App Id]<br> (<a href="https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&amp;token=371280001" target="_blank" rel="noopener">https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&amp;token=371280001</a>)  </li></ul><h3 id="运行到手机模拟器（Android平台）"><a href="#运行到手机模拟器（Android平台）" class="headerlink" title="运行到手机模拟器（Android平台）"></a>运行到手机模拟器（Android平台）</h3><ul><li>[配置手机模拟器]  (<a href="https://ask.dcloud.net.cn/article/151" target="_blank" rel="noopener">https://ask.dcloud.net.cn/article/151</a>)   </li></ul><h2 id="附加、-git及github使用"><a href="#附加、-git及github使用" class="headerlink" title="附加、 git及github使用"></a>附加、 git及github使用</h2><ul><li>[ Git安装及配置]  (<a href="https://my.oschina.net/u/2933229/blog/1818671" target="_blank" rel="noopener">https://my.oschina.net/u/2933229/blog/1818671</a>)   </li><li>[TortoiseGIT 安装及配置]  (<a href="https://www.cnblogs.com/xiuxingzhe/p/9312929.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiuxingzhe/p/9312929.html</a>)  </li></ul><hr><blockquote><p>我的第一篇博客   谢谢！</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、搭建Android开发环境&quot;&gt;&lt;a href=&quot;#一、搭建Android开发环境&quot; class=&quot;headerlink&quot; title=&quot;一、搭建Android开发环境&quot;&gt;&lt;/a&gt;一、搭建Android开发环境&lt;/h1&gt;&lt;p&gt;[开发工具：HBuilder X ]  (&lt;a href=&quot;https://www.cnblogs.com/qisi007/p/10489176.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/qisi007/p/10489176.html&lt;/a&gt;)  &lt;/p&gt;
&lt;p&gt;[ Android SDK 安装及配置]  ( &lt;a href=&quot;https://www.cnblogs.com/nebie/p/9145627.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/nebie/p/9145627.html&lt;/a&gt;) &lt;/p&gt;
&lt;p&gt;[JDK的安装及配置]  (&lt;a href=&quot;https://zhuanlan.zhihu.com/p/105478993&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/105478993&lt;/a&gt;)  &lt;/p&gt;</summary>
    
    
    
    
    <category term="uni-app" scheme="http://yoursite.com/tags/uni-app/"/>
    
  </entry>
  
</feed>
